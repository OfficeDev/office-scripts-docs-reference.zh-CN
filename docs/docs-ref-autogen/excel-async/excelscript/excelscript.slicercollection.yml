### YamlMime:TSType
name: Excel.SlicerCollection
uid: excel!Excel.SlicerCollection:interface
package: excel!
fullName: Excel.SlicerCollection
summary: 代表工作簿或工作表上所有切片器对象的集合。
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: add(slicerSource, sourceField, slicerDestination)
  uid: excel!Excel.SlicerCollection#add:member(1)
  package: excel!
  fullName: add(slicerSource, sourceField, slicerDestination)
  summary: 将新切片器添加到工作簿。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      add(
                  slicerSource: string | PivotTable | Table,
                  sourceField: string | PivotField | number | TableColumn,
                  slicerDestination?: string | Worksheet
              ): Slicer;
    parameters:
    - id: slicerSource
      description: 新切片器将基于的数据源。 它可以是一个数据透视表对象、一个 Table 对象或一个字符串。 传递数据透视表对象时，数据源是数据透视表对象的源。 当传递 Table 对象时，数据源是 Table 对象。 传递字符串时，它被解释为数据透视表/表的名称/id。
      type: string | <xref uid="excel!Excel.PivotTable:interface" /> | <xref uid="excel!Excel.Table:interface" />
    - id: sourceField
      description: 要作为筛选依据的数据源中的字段。 它可以是一个透视字段对象、一个 TableColumn 对象、透视字段的 id 或 TableColumn 的 id/名称。
      type: string | <xref uid="excel!Excel.PivotField:interface" /> | number | <xref uid="excel!Excel.TableColumn:interface" />
    - id: slicerDestination
      description: 可选。 将在其中创建新切片器的工作表。 它可以是工作表对象或工作表的名称/id。 如果从工作表中检索切片器集合，则可以忽略此参数。
      type: string | <xref uid="excel!Excel.Worksheet:interface" />
    return:
      type: <xref uid="excel!Excel.Slicer:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Pivot\");\n    let slicer = sheet.slicers.add(\n        \"Farm Sales\", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */\n        \"Type\" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */\n    );\n    slicer.name = \"Fruit Slicer\";\n    await context.sync();\n}\n```"
- name: getCount()
  uid: excel!Excel.SlicerCollection#getCount:member(1)
  package: excel!
  fullName: getCount()
  summary: 返回集合中的切片器数量。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(): ClientResult<number>;'
    return:
      type: <xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;
      description: ''
- name: getItem(key)
  uid: excel!Excel.SlicerCollection#getItem:member(1)
  package: excel!
  fullName: getItem(key)
  summary: 使用其名称或 ID 获取 Slicer 对象。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(key: string): Slicer;'
    parameters:
    - id: key
      description: 切片器的名称或 id。
      type: string
    return:
      type: <xref uid="excel!Excel.Slicer:interface" />
      description: ''
- name: getItemAt(index)
  uid: excel!Excel.SlicerCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: 根据其在集合中的位置获取切片器。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): Slicer;'
    parameters:
    - id: index
      description: 要检索的对象的索引值。 从零开始编制索引。
      type: number
    return:
      type: <xref uid="excel!Excel.Slicer:interface" />
      description: ''
- name: getItemOrNullObject(key)
  uid: excel!Excel.SlicerCollection#getItemOrNullObject:member(1)
  package: excel!
  fullName: getItemOrNullObject(key)
  summary: 使用其名称或 ID 获取切片器。如果没有切片器项，将返回 null 对象。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemOrNullObject(key: string): Slicer;'
    parameters:
    - id: key
      description: 要检索的切片器的名称或 Id。
      type: string
    return:
      type: <xref uid="excel!Excel.Slicer:interface" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.SlicerCollection#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: 将命令加入队列以加载对象的指定属性。 阅读属性前必须先调用 `context.sync()`。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: 一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
      type: string | string[]
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 16f0f2674a5c30a3563a7c7ea618d2917d4525f5
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49412879"
