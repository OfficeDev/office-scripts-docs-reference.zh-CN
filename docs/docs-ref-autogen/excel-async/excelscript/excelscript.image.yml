### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Image:interface'
    summary: 代表工作表中的图像。 若要获取相应的 Shape 对象，请使用 Image. Shape。
    name: Excel.Image
    fullName: Excel.Image
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.Image#format:member'
      - 'excel!Excel.Image#id:member'
      - 'excel!Excel.Image#load:member(1)'
  - uid: 'excel!Excel.Image#format:member'
    summary: 返回图像的格式。
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: PictureFormat;'
      return:
        type:
          - 'excel!Excel.PictureFormat:enum'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Shapes");
              let image = sheet.shapes.getItem("Image").image;
              image.load("format");
              await context.sync();

              console.log("The image's format is: " + image.format);
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Image#id:member'
    summary: 指定 image 对象的形状标识符。
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Image#load:member(1)'
    summary: 将命令加入队列以加载对象的指定属性。 在 `context.sync()` 读取属性之前，必须先调用。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.PictureFormat:enum'
    name: PictureFormat
    fullName: Excel.PictureFormat