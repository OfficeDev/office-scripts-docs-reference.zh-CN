### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.DataValidation:interface'
    summary: '表示应用于当前范围的数据验证。 若要了解有关数据验证对象模型的详细信息，请参阅[向 Excel 区域添加数据验证](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)<!-- -->.'
    name: Excel.DataValidation
    fullName: Excel.DataValidation
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.DataValidation#clear:member(1)'
      - 'excel!Excel.DataValidation#errorAlert:member'
      - 'excel!Excel.DataValidation#getInvalidCells:member(1)'
      - 'excel!Excel.DataValidation#getInvalidCellsOrNullObject:member(1)'
      - 'excel!Excel.DataValidation#ignoreBlanks:member'
      - 'excel!Excel.DataValidation#load:member(1)'
      - 'excel!Excel.DataValidation#prompt:member'
      - 'excel!Excel.DataValidation#rule:member'
      - 'excel!Excel.DataValidation#type:member'
      - 'excel!Excel.DataValidation#valid:member'
  - uid: 'excel!Excel.DataValidation#clear:member(1)'
    summary: 清除当前区域中的数据有效性。
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.DataValidation#errorAlert:member'
    summary: 用户输入无效数据时，出现错误警报。
    name: errorAlert
    fullName: errorAlert
    langs:
      - typeScript
    type: property
    syntax:
      content: 'errorAlert: DataValidationErrorAlert;'
      return:
        type:
          - 'excel!Excel.DataValidationErrorAlert:interface'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Decision");
              let commentsRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              commentsRange.dataValidation.clear();   

              // If the value of A2 is contained in the value of C2, then 
              // SEARCH(A2,C2) returns the number where it begins. Otherwise,
              // it does not return a number.
              let redundantStringRule = {
                  custom: {
                      formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
                  }
              };
              commentsRange.dataValidation.rule = redundantStringRule;
              commentsRange.dataValidation.errorAlert = {
                  message: "It is redundant to include the baby name in the comment.",
                  showAlert: true,
                  style: "Information",
                  title: "Baby Name in Comment"
              };

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.DataValidation#getInvalidCells:member(1)'
    summary: 返回包含一个或多个矩形区域的 RangeAreas，它具有无效单元格值。 如果所有单元格值都有效，则此函数将引发 ItemNotFound 错误。
    name: getInvalidCells()
    fullName: getInvalidCells()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInvalidCells(): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
  - uid: 'excel!Excel.DataValidation#getInvalidCellsOrNullObject:member(1)'
    summary: 返回包含一个或多个矩形区域的 RangeAreas，它具有无效单元格值。 如果所有单元格值都有效，则此函数将返回 null。
    name: getInvalidCellsOrNullObject()
    fullName: getInvalidCellsOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInvalidCellsOrNullObject(): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
  - uid: 'excel!Excel.DataValidation#ignoreBlanks:member'
    summary: 指定是否对空单元格执行数据验证，其默认值为 true。
    name: ignoreBlanks
    fullName: ignoreBlanks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignoreBlanks: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.DataValidation#load:member(1)'
    summary: 将命令加入队列以加载对象的指定属性。 在 `context.sync()` 读取属性之前，必须先调用。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.DataValidation#prompt:member'
    summary: 当用户选择单元格时提示。
    name: prompt
    fullName: prompt
    langs:
      - typeScript
    type: property
    syntax:
      content: 'prompt: DataValidationPrompt;'
      return:
        type:
          - 'excel!Excel.DataValidationPrompt:interface'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Decision");
              let rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              rankingRange.dataValidation.clear();

              let greaterThanZeroRule = {
                  wholeNumber: {
                      formula1: 0,
                      operator: Excel.DataValidationOperator.greaterThan
                  }
              };
              rankingRange.dataValidation.rule = greaterThanZeroRule;

              rankingRange.dataValidation.prompt = {
                  message: "Please enter a positive number.",
                  showPrompt: true,
                  title: "Positive numbers only."
              };

              rankingRange.dataValidation.errorAlert = {
                  message: "Sorry, only positive numbers are allowed",
                  showAlert: true,
                  style: "Stop",
                  title: "Negative Number Entered"
              };

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.DataValidation#rule:member'
    summary: 包含不同类型的数据验证条件的数据有效性规则。
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: DataValidationRule;'
      return:
        type:
          - 'excel!Excel.DataValidationRule:interface'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Decision");
              let nameRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              nameRange.dataValidation.clear();

              let nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

              let approvedListRule = {
                  list: {
                      inCellDropDown: true,
                      source: nameSourceRange
                  }
              };
              nameRange.dataValidation.rule = approvedListRule;

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.DataValidation#type:member'
    summary: 数据有效性类型，有关详细信息，请参阅 Excel.DataValidationType。
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: DataValidationType;'
      return:
        type:
          - 'excel!Excel.DataValidationType:enum'
  - uid: 'excel!Excel.DataValidation#valid:member'
    summary: 表示所有单元格值根据数据有效性规则是否全部有效。 如果所有单元格的值都有效，则返回 true; 如果所有单元格值无效，则返回 false。 如果区域中存在有效和无效的单元格值，则返回 null。
    name: valid
    fullName: valid
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valid: boolean;'
      return:
        type:
          - boolean
references:
  - uid: 'excel!Excel.DataValidationErrorAlert:interface'
    name: DataValidationErrorAlert
    fullName: Excel.DataValidationErrorAlert
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.DataValidationPrompt:interface'
    name: DataValidationPrompt
    fullName: Excel.DataValidationPrompt
  - uid: 'excel!Excel.DataValidationRule:interface'
    name: DataValidationRule
    fullName: Excel.DataValidationRule
  - uid: 'excel!Excel.DataValidationType:enum'
    name: DataValidationType
    fullName: Excel.DataValidationType