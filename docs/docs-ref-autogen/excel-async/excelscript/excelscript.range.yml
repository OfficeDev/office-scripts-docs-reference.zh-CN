### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Range:interface'
    summary: 'Range 表示一个或多个连续单元格的集合，例如单元格、行、列、单元格块等。若要了解有关如何在整个 API 中使用范围的详细信息，请参阅[使用 Excel JAVASCRIPT Api 处理区域](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges)并使用[excel javascript api （高级）处理区域](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)<!-- -->.'
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.Range#address:member'
      - 'excel!Excel.Range#addressLocal:member'
      - 'excel!Excel.Range#autoFill:member(1)'
      - 'excel!Excel.Range#calculate:member(1)'
      - 'excel!Excel.Range#cellCount:member'
      - 'excel!Excel.Range#clear:member(1)'
      - 'excel!Excel.Range#columnCount:member'
      - 'excel!Excel.Range#columnHidden:member'
      - 'excel!Excel.Range#columnIndex:member'
      - 'excel!Excel.Range#conditionalFormats:member'
      - 'excel!Excel.Range#convertDataTypeToText:member(1)'
      - 'excel!Excel.Range#convertToLinkedDataType:member(1)'
      - 'excel!Excel.Range#copyFrom:member(1)'
      - 'excel!Excel.Range#dataValidation:member'
      - 'excel!Excel.Range#delete:member(1)'
      - 'excel!Excel.Range#find:member(1)'
      - 'excel!Excel.Range#findOrNullObject:member(1)'
      - 'excel!Excel.Range#flashFill:member(1)'
      - 'excel!Excel.Range#format:member'
      - 'excel!Excel.Range#formulas:member'
      - 'excel!Excel.Range#formulasLocal:member'
      - 'excel!Excel.Range#formulasR1C1:member'
      - 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
      - 'excel!Excel.Range#getBoundingRect:member(1)'
      - 'excel!Excel.Range#getCell:member(1)'
      - 'excel!Excel.Range#getColumn:member(1)'
      - 'excel!Excel.Range#getColumnsAfter:member(1)'
      - 'excel!Excel.Range#getColumnsBefore:member(1)'
      - 'excel!Excel.Range#getEntireColumn:member(1)'
      - 'excel!Excel.Range#getEntireRow:member(1)'
      - 'excel!Excel.Range#getImage:member(1)'
      - 'excel!Excel.Range#getIntersection:member(1)'
      - 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
      - 'excel!Excel.Range#getLastCell:member(1)'
      - 'excel!Excel.Range#getLastColumn:member(1)'
      - 'excel!Excel.Range#getLastRow:member(1)'
      - 'excel!Excel.Range#getOffsetRange:member(1)'
      - 'excel!Excel.Range#getPivotTables:member(1)'
      - 'excel!Excel.Range#getResizedRange:member(1)'
      - 'excel!Excel.Range#getRow:member(1)'
      - 'excel!Excel.Range#getRowsAbove:member(1)'
      - 'excel!Excel.Range#getRowsBelow:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(1)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
      - 'excel!Excel.Range#getSurroundingRegion:member(1)'
      - 'excel!Excel.Range#getTables:member(1)'
      - 'excel!Excel.Range#getUsedRange:member(1)'
      - 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Range#getVisibleView:member(1)'
      - 'excel!Excel.Range#group:member(1)'
      - 'excel!Excel.Range#height:member'
      - 'excel!Excel.Range#hidden:member'
      - 'excel!Excel.Range#hideGroupDetails:member(1)'
      - 'excel!Excel.Range#hyperlink:member'
      - 'excel!Excel.Range#insert:member(1)'
      - 'excel!Excel.Range#isEntireColumn:member'
      - 'excel!Excel.Range#isEntireRow:member'
      - 'excel!Excel.Range#left:member'
      - 'excel!Excel.Range#linkedDataTypeState:member'
      - 'excel!Excel.Range#load:member(1)'
      - 'excel!Excel.Range#merge:member(1)'
      - 'excel!Excel.Range#moveTo:member(1)'
      - 'excel!Excel.Range#numberFormat:member'
      - 'excel!Excel.Range#numberFormatLocal:member'
      - 'excel!Excel.Range#removeDuplicates:member(1)'
      - 'excel!Excel.Range#replaceAll:member(1)'
      - 'excel!Excel.Range#rowCount:member'
      - 'excel!Excel.Range#rowHidden:member'
      - 'excel!Excel.Range#rowIndex:member'
      - 'excel!Excel.Range#select:member(1)'
      - 'excel!Excel.Range#setDirty:member(1)'
      - 'excel!Excel.Range#showCard:member(1)'
      - 'excel!Excel.Range#showGroupDetails:member(1)'
      - 'excel!Excel.Range#sort:member'
      - 'excel!Excel.Range#style:member'
      - 'excel!Excel.Range#text:member'
      - 'excel!Excel.Range#top:member'
      - 'excel!Excel.Range#ungroup:member(1)'
      - 'excel!Excel.Range#unmerge:member(1)'
      - 'excel!Excel.Range#values:member'
      - 'excel!Excel.Range#valueTypes:member'
      - 'excel!Excel.Range#width:member'
      - 'excel!Excel.Range#worksheet:member'
  - uid: 'excel!Excel.Range#address:member'
    summary: 指定 A1 样式中的区域引用。 Address 值将包含工作表引用（例如，"Sheet1！A1： B4 "）。
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#addressLocal:member'
    summary: 以用户语言指定区域的区域引用。
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#autoFill:member(1)'
    summary: |-
      使用指定的自动填充逻辑将范围从当前范围填充到目标区域。 目标区域可以是 null，也可以是水平或垂直扩展源。 不支持不连续的区域。

      有关详细信息，请参阅[使用自动填充和快速填充](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        autoFill(
                    destinationRange?: Range | string,
                    autoFillType?:
                        | AutoFillType
                        | "FillDefault"
                        | "FillCopy"
                        | "FillSeries"
                        | "FillFormats"
                        | "FillValues"
                        | "FillDays"
                        | "FillWeekdays"
                        | "FillMonths"
                        | "FillYears"
                        | "LinearTrend"
                        | "GrowthTrend"
                        | "FlashFill"
                ): void;
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
            let sheet = context.workbook.worksheets.getActiveWorksheet();
            let sumCell = sheet.getRange("P4");
            
            // Copy everything. The formulas will be contextually updated based on their new locations.
            sumCell.autoFill("P4:P7", Excel.AutoFillType.fillCopy);
            sumCell.format.autofitColumns();
            await context.sync();
          }
          ```
      parameters:
        - id: destinationRange
          description: 要自动填充的目标区域。 如果目标区域为 null，则根据周围单元格（双击 UI 的区域填充句柄时的行为）填充数据。
          type:
            - 'excel!Excel.Range#autoFill~0:complex'
        - id: autoFillType
          description: 自动填充的类型。 根据当前区域的内容，指定目标区域的填充方式。 默认值为 "FillDefault"。
          type:
            - 'excel!Excel.Range#autoFill~1:complex'
  - uid: 'excel!Excel.Range#calculate:member(1)'
    summary: 计算工作表上的单元格区域。
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#cellCount:member'
    summary: '指定区域中的单元格的数目。 如果单元格数超过 2^31-1 (2,147,483,647)，此 API 返回 -1。'
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#clear:member(1)'
    summary: 清除区域值、格式、填充、边框等。
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        clear(
                    applyTo?:
                        | ClearApplyTo
                        | "All"
                        | "Formats"
                        | "Contents"
                        | "Hyperlinks"
                        | "RemoveHyperlinks"
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyTo
          description: 可选。 确定清除操作的类型。 有关详细信息，请参阅 ClearApplyTo。
          type:
            - 'excel!Excel.Range#clear~0:complex'
  - uid: 'excel!Excel.Range#columnCount:member'
    summary: 指定区域中的总列数。
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#columnHidden:member'
    summary: 表示当前区域中的所有列是否隐藏。
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#columnIndex:member'
    summary: 指定区域中的第一个单元格的列号。 从零开始编制索引。
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#conditionalFormats:member'
    summary: 与该范围相交的 ConditionalFormats 的集合。
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:interface'
  - uid: 'excel!Excel.Range#convertDataTypeToText:member(1)'
    summary: 将具有数据类型的区域单元格转换为文本。
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#convertToLinkedDataType:member(1)'
    summary: 将区域单元格转换为工作表中的链接数据类型。
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        convertToLinkedDataType(
                    serviceID: number,
                    languageCulture: string
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: 将用于查询数据的服务 ID。
          type:
            - number
        - id: languageCulture
          description: 要为其查询服务的语言区域性。
          type:
            - string
  - uid: 'excel!Excel.Range#copyFrom:member(1)'
    summary: 将单元格数据或格式从源区域或 RangeAreas 复制到当前区域。 目标区域的大小可以与源区域或 RangeAreas 的大小不同。 如果目标小于源，则将自动扩展目标。
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?:
                        | RangeCopyType
                        | "All"
                        | "Formulas"
                        | "Values"
                        | "Formats",
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.getRange("F2").values = [["Copied Formula"]];
              sheet.getRange("F2").format.autofitColumns();

              // copy a range preserving the formulas
              // note: non-formula values are copied over as is
              sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
              await context.sync();
          }
          ```
      parameters:
        - id: sourceRange
          description: 要从其复制的源区域或 RangeAreas。 当源 RangeAreas 有多个区域时，必须通过删除矩形区域中的完整行或列来创建窗体。
          type:
            - 'excel!Excel.Range#copyFrom~0:complex'
        - id: copyType
          description: 要复制的单元格数据的类型或格式。 默认值为 "All"。
          type:
            - 'excel!Excel.Range#copyFrom~1:complex'
        - id: skipBlanks
          description: 如果为 True，则在源区域中跳过空白单元格。 默认为 false。
          type:
            - boolean
        - id: transpose
          description: 如此如果要转置目标区域中的单元格。 默认为 false。
          type:
            - boolean
  - uid: 'excel!Excel.Range#dataValidation:member'
    summary: 返回数据有效性对象。
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:interface'
  - uid: 'excel!Excel.Range#delete:member(1)'
    summary: 删除与区域相关的单元格。
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: DeleteShiftDirection | "Up" | "Left"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: 指定移动单元格的方式。 有关详细信息，请参阅 DeleteShiftDirection。
          type:
            - 'excel!Excel.Range#delete~0:complex'
  - uid: 'excel!Excel.Range#find:member(1)'
    summary: 根据指定的条件查找给定的字符串。 如果当前范围大于单个单元格，则搜索将限制为该范围，否则搜索将覆盖该单元格的所有起始工作表。
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: SearchCriteria): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: text
          description: 要查找的字符串。
          type:
            - string
        - id: criteria
          description: 其他搜索条件，包括搜索方向以及搜索是否需要匹配整个单元格或是否区分大小写。
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#findOrNullObject:member(1)'
    summary: 根据指定的条件查找给定的字符串。 如果当前范围大于单个单元格，则搜索将限制为该范围，否则搜索将覆盖该单元格的所有起始工作表。 如果没有匹配项，则此函数将返回一个 null 对象。
    name: 'findOrNullObject(text, criteria)'
    fullName: 'findOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findOrNullObject(text: string, criteria: SearchCriteria): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let table = sheet.tables.getItem("ExpensesTable");
              let searchRange = table.getRange();
              let foundRange = searchRange.findOrNullObject($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();

              if (foundRange.isNullObject) {
                  console.log("Text not found");
              } else {
                  console.log(foundRange.address);
              }
          }
          ```
      parameters:
        - id: text
          description: 要查找的字符串。
          type:
            - string
        - id: criteria
          description: 其他搜索条件，包括搜索方向以及搜索是否需要匹配整个单元格或是否区分大小写。
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#flashFill:member(1)'
    summary: 对当前区域进行快速填充。快速填充在感知到模式时可自动填充数据，因此该区域必须是单列区域且周围有数据以便查找模式。
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#format:member'
    summary: 返回一个格式对象，其中封装了区域的字体、填充、边框、对齐方式和其他属性。
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:interface'
  - uid: 'excel!Excel.Range#formulas:member'
    summary: 表示采用 A1 表示法的公式。
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasLocal:member'
    summary: 'Represents the formula in A1-style notation, in the user''s language and number-formatting locale. For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.'
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasR1C1:member'
    summary: 表示采用 R1C1 样式表示法的公式。
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
    summary: 获取一个 Range 对象，该对象的左上单元格与当前 Range 对象相同，但具有指定的行数和列数。
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: numRows
          description: 新范围大小的行数。
          type:
            - number
        - id: numColumns
          description: 新范围大小的列数。
          type:
            - number
  - uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    summary: '获取包含指定区域的最小 range 对象。 例如，“B2:C5”和“D10:E15”的 GetBoundingRect 为“B2:E15”。'
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: range 对象或地址或区域名称。
          type:
            - 'excel!Excel.Range#getBoundingRect~0:complex'
  - uid: 'excel!Excel.Range#getCell:member(1)'
    summary: 根据行和列编号获取包含单个单元格的 range 对象。 单元格可以位于其父区域的边界之外，但前提是它停留在工作表网格中。 返回的单元格位于相对于区域左上角的单元格的位置。
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: row
          description: 要检索的单元格的行号。 从零开始编制索引。
          type:
            - number
        - id: column
          description: 要检索的单元格的列号。 从零开始编制索引。
          type:
            - number
  - uid: 'excel!Excel.Range#getColumn:member(1)'
    summary: 获取范围中包含的列。
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: column
          description: 要检索的区域的列号。 从零开始编制索引。
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnsAfter:member(1)'
    summary: 获取当前范围对象右侧的一定数量的列。
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnsBefore:member(1)'
    summary: 获取当前范围对象左侧的一定数量的列。
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    summary: '获取一个对象，该对象代表区域的整列（例如，如果当前区域表示单元格 "B4： E11"，则它 `getEntireColumn` 是表示列 "B:E" 的区域）。'
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getEntireRow:member(1)'
    summary: '获取一个对象，该对象表示区域的整行（例如，如果当前区域表示单元格 "B4： E11"，则它 `GetEntireRow` 是表示行 "4:11" 的区域）。'
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getImage:member(1)'
    summary: 将区域呈现为 base64 编码的 png 图像。
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.Range#getImage~0:complex'
        description: ''
  - uid: 'excel!Excel.Range#getIntersection:member(1)'
    summary: 获取表示指定区域的矩形交集的 range 对象。
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: 将用于确定区域交集的 range 对象或区域地址。
          type:
            - 'excel!Excel.Range#getIntersection~0:complex'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
    summary: 获取表示指定区域的矩形交集的 range 对象。 如果找不到任何交集，则此方法返回空对象。
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let salesTable = sheet.tables.getItem("SalesTable");
              let dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              let usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              let currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              let asianSalesRange = sheet.getRange("A2:E4");
              let europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              let asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              let europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          }
          ```
      parameters:
        - id: anotherRange
          description: 将用于确定区域交集的 range 对象或区域地址。
          type:
            - 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
  - uid: 'excel!Excel.Range#getLastCell:member(1)'
    summary: '获取区域内的最后一个单元格。 例如，“B2:D5”的最后一个单元格是“D5”。'
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getLastColumn:member(1)'
    summary: '获取区域内的最后一列。 例如，“B2:D5”的最后一列是“D2:D5”。'
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getLastRow:member(1)'
    summary: '获取区域内的最后一行。 例如，“B2:D5”的最后一行是“B5:D5”。'
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    summary: 'Gets an object which represents a range that''s offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.'
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: rowOffset
          description: 'The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.'
          type:
            - number
        - id: columnOffset
          description: 'The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.'
          type:
            - number
  - uid: 'excel!Excel.Range#getPivotTables:member(1)'
    summary: 获取与区域重叠的数据透视表的限定集合。
    name: getPivotTables(fullyContained)
    fullName: getPivotTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTables(fullyContained?: boolean): PivotTableScopedCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableScopedCollection:interface'
        description: ''
      parameters:
        - id: fullyContained
          description: 如果为 true，则仅返回完全包含在区域边界内的数据透视表。 默认值为 false。
          type:
            - boolean
  - uid: 'excel!Excel.Range#getResizedRange:member(1)'
    summary: 获取与当前范围对象类似的范围对象，但其右下角可通过一定数量的行和列进行展开（或合拢）。
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: deltaRows
          description: 'The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.'
          type:
            - number
        - id: deltaColumns
          description: 相对于当前范围，从右下角扩展的列数。 使用正数可展开范围，使用负数可合拢范围。
          type:
            - number
  - uid: 'excel!Excel.Range#getRow:member(1)'
    summary: 获取范围中包含的行。
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: row
          description: 要检索的区域的行号。 从零开始编制索引。
          type:
            - number
  - uid: 'excel!Excel.Range#getRowsAbove:member(1)'
    summary: 获取当前范围对象上方的一定数量的行。
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'excel!Excel.Range#getRowsBelow:member(1)'
    summary: 获取当前范围对象下方的一定数量的行。
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'excel!Excel.Range#getSpecialCells:member(1)'
    summary: 获取包含一个或多个矩形区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。 如果找不到特殊单元格，则将引发 ItemNotFound 错误。
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCells(
                    cellType:
                        | SpecialCellType
                        | "ConditionalFormats"
                        | "DataValidations"
                        | "Blanks"
                        | "Constants"
                        | "Formulas"
                        | "SameConditionalFormat"
                        | "SameDataValidation"
                        | "Visible",
                    cellValueType?:
                        | SpecialCellValueType
                        | "All"
                        | "Errors"
                        | "ErrorsLogical"
                        | "ErrorsNumbers"
                        | "ErrorsText"
                        | "ErrorsLogicalNumber"
                        | "ErrorsLogicalText"
                        | "ErrorsNumberText"
                        | "Logical"
                        | "LogicalNumbers"
                        | "LogicalText"
                        | "LogicalNumbersText"
                        | "Numbers"
                        | "NumbersText"
                        | "Text"
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: 要包含的单元格的类型。
          type:
            - 'excel!Excel.Range#getSpecialCells~0:complex'
        - id: cellValueType
          description: 如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。 可以将这些值组合在一起，以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
          type:
            - 'excel!Excel.Range#getSpecialCells~1:complex'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
    summary: 获取包含一个或多个区域的 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。 如果找不到特殊单元格，则返回 null 对象。
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCellsOrNullObject(
                    cellType:
                        | SpecialCellType
                        | "ConditionalFormats"
                        | "DataValidations"
                        | "Blanks"
                        | "Constants"
                        | "Formulas"
                        | "SameConditionalFormat"
                        | "SameDataValidation"
                        | "Visible",
                    cellValueType?:
                        | SpecialCellValueType
                        | "All"
                        | "Errors"
                        | "ErrorsLogical"
                        | "ErrorsNumbers"
                        | "ErrorsText"
                        | "ErrorsLogicalNumber"
                        | "ErrorsLogicalText"
                        | "ErrorsNumberText"
                        | "Logical"
                        | "LogicalNumbers"
                        | "LogicalText"
                        | "LogicalNumbersText"
                        | "Numbers"
                        | "NumbersText"
                        | "Text"
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: 要包含的单元格的类型。
          type:
            - 'excel!Excel.Range#getSpecialCellsOrNullObject~0:complex'
        - id: cellValueType
          description: 如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。 可以将这些值组合在一起，以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
          type:
            - 'excel!Excel.Range#getSpecialCellsOrNullObject~1:complex'
  - uid: 'excel!Excel.Range#getSurroundingRegion:member(1)'
    summary: 返回一个 Range 对象，该对象表示此区域左上单元格的周围区域。 周围区域是由相对于该区域的空白行和空白列的任何组合所限定的区域。
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
  - uid: 'excel!Excel.Range#getTables:member(1)'
    summary: 获取与区域重叠的限定范围的表格集合。
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): TableScopedCollection;'
      return:
        type:
          - 'excel!Excel.TableScopedCollection:interface'
        description: ''
      parameters:
        - id: fullyContained
          description: 如果为 true，则仅返回完全包含在区域边界内的表。 默认值为 false。
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRange:member(1)'
    summary: 'Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.'
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: 仅将有值的单元格视为已使用的单元格。
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
    summary: 'Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.'
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let salesTable = sheet.tables.getItem("SalesTable");
              let dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              let usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  let chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          }
          ```
      parameters:
        - id: valuesOnly
          description: 仅将有值的单元格视为已使用的单元格。
          type:
            - boolean
  - uid: 'excel!Excel.Range#getVisibleView:member(1)'
    summary: 表示当前 range 对象的可见行。
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): RangeView;'
      return:
        type:
          - 'excel!Excel.RangeView:interface'
        description: ''
  - uid: 'excel!Excel.Range#group:member(1)'
    summary: 对列和行进行分组以进行分级显示。
    name: group(groupOption)
    fullName: group(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOption: GroupOption | "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // Group the larger, main level. Note that the outline controls
              // will be on row 10, meaning 4-9 will collapse and expand.
              sheet.getRange("4:9").group(Excel.GroupOption.byRows);

              // Group the smaller, sublevels. Note that the outline controls
              // will be on rows 6 and 9, meaning 4-5 and 7-8 will collapse and expand.
              sheet.getRange("4:5").group(Excel.GroupOption.byRows);
              sheet.getRange("7:8").group(Excel.GroupOption.byRows);
              await context.sync();
          }
          ```
      parameters:
        - id: groupOption
          description: 指定如何按行或列对区域进行分组。 `InvalidArgument`当组选项与范围 `isEntireRow` 或 `isEntireColumn` 属性不同时（即，为 `range.isEntireRow` True 且 `groupOption` 为 "ByColumns"，或者为 `range.isEntireColumn` `groupOption` "ByRows"）时，将引发错误。
          type:
            - 'excel!Excel.Range#group~0:complex'
  - uid: 'excel!Excel.Range#height:member'
    summary: 返回从区域的上边缘到区域的下边缘的 100％ 缩放的距离（以磅为单位）。
    name: height
    fullName: height
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly height: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#hidden:member'
    summary: 表示当前区域中的所有单元格是否隐藏。
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#hideGroupDetails:member(1)'
    summary: 隐藏行或列组的详细信息。
    name: hideGroupDetails(groupOption)
    fullName: hideGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        hideGroupDetails(
                    groupOption: GroupOption | "ByRows" | "ByColumns"
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: 指定是否隐藏分组行或分组列的详细信息。
          type:
            - 'excel!Excel.Range#hideGroupDetails~0:complex'
  - uid: 'excel!Excel.Range#hyperlink:member'
    summary: 表示当前区域的超链接。
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: RangeHyperlink;'
      return:
        type:
          - 'excel!Excel.RangeHyperlink:interface'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Range#insert:member(1)'
    summary: 'Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.'
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: InsertShiftDirection | "Down" | "Right"): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: shift
          description: 指定移动单元格的方式。 有关详细信息，请参阅 InsertShiftDirection。
          type:
            - 'excel!Excel.Range#insert~0:complex'
  - uid: 'excel!Excel.Range#isEntireColumn:member'
    summary: 表示当前区域是否为整列。
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#isEntireRow:member'
    summary: 表示当前区域是否为整行。
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#left:member'
    summary: 返回从工作表的左边缘到区域的左边缘的 100％ 缩放的距离（以磅为单位）。
    name: left
    fullName: left
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly left: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#linkedDataTypeState:member'
    summary: 表示每个单元格的数据类型状态。
    name: linkedDataTypeState
    fullName: linkedDataTypeState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly linkedDataTypeState: LinkedDataTypeState[][];'
      return:
        type:
          - 'excel!Excel.Range#linkedDataTypeState~0:complex'
  - uid: 'excel!Excel.Range#load:member(1)'
    summary: 将命令加入队列以加载对象的指定属性。 在 `context.sync()` 读取属性之前，必须先调用。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Range#merge:member(1)'
    summary: 将范围单元格合并到工作表的一个区域内。
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: across
          description: 可选。 如果为 True，则将指定区域中每一行的单元格合并为一个单独的合并单元格。 默认值是 false。
          type:
            - boolean
  - uid: 'excel!Excel.Range#moveTo:member(1)'
    summary: 将单元格的值、格式和公式从当前区域移动到目标区域，替换这些单元格中的旧信息。 如果目标区域小于当前区域，则将自动扩展目标区域。 原始区域区域以外的目标区域中的任何单元格都不会更改。
    name: moveTo(destinationRange)
    fullName: moveTo(destinationRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: destinationRange 指定此范围中的信息将移动到的范围。
          type:
            - 'excel!Excel.Range#moveTo~0:complex'
  - uid: 'excel!Excel.Range#numberFormat:member'
    summary: 表示给定范围的 Excel 数字格式代码。
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#numberFormatLocal:member'
    summary: 根据用户的语言设置，表示给定范围的 Excel 数字格式代码。 在获取或设置属性时，Excel 不会执行任何语言或格式强制 `numberFormatLocal` 。 任何返回的文本将根据系统设置中指定的语言使用本地格式化的字符串。
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#removeDuplicates:member(1)'
    summary: 从列指定的区域中删除重复值。
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        removeDuplicates(
                    columns: number[],
                    includesHeader: boolean
                ): RemoveDuplicatesResult;
      return:
        type:
          - 'excel!Excel.RemoveDuplicatesResult:interface'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:D11");

              let deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          }
          ```
      parameters:
        - id: columns
          description: 区域中可能包含重复项的列。 至少需要指定一个列。 从零开始编制索引。
          type:
            - 'number[]'
        - id: includesHeader
          description: 如果输入数据包含标头，则为 True。 默认为 false。
          type:
            - boolean
  - uid: 'excel!Excel.Range#replaceAll:member(1)'
    summary: 根据当前区域内指定的条件查找并替换给定的字符串。
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): ClientResult<number>;
      return:
        type:
          - 'excel!Excel.Range#replaceAll~0:complex'
        description: ''
      parameters:
        - id: text
          description: 要查找的字符串。
          type:
            - string
        - id: replacement
          description: 要将原始替换为的字符串。
          type:
            - string
        - id: criteria
          description: 其他替换条件。
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Range#rowCount:member'
    summary: 返回区域中的总行数。
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#rowHidden:member'
    summary: 表示当前区域中的所有行是否隐藏。
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#rowIndex:member'
    summary: 返回区域中第一个单元格的行编号。 从零开始编制索引。
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#select:member(1)'
    summary: 在 Excel UI 中选择指定的区域。
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#setDirty:member(1)'
    summary: 设置下一次重新计算发生时要重新计算的区域。
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#showCard:member(1)'
    summary: 显示活动单元格的卡片（如果该单元格具有富值内容）。
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#showGroupDetails:member(1)'
    summary: 显示行或列组的详细信息。
    name: showGroupDetails(groupOption)
    fullName: showGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        showGroupDetails(
                    groupOption: GroupOption | "ByRows" | "ByColumns"
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: 指定是否显示分组行或分组列的详细信息。
          type:
            - 'excel!Excel.Range#showGroupDetails~0:complex'
  - uid: 'excel!Excel.Range#sort:member'
    summary: 表示当前 range 的区域排序。
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: RangeSort;'
      return:
        type:
          - 'excel!Excel.RangeSort:interface'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let range = sheet.getRange("A1:E5");

              // Find the column header that provides the sort criteria.
              let header = range.find(criteria, {});
              header.load("columnIndex");
              await context.sync();

              range.sort.apply(
                  [
                      {
                          key: header.columnIndex,
                          sortOn: Excel.SortOn.value
                      }
                  ],
                  false /*matchCase*/,
                  true /*hasHeaders*/,
                  Excel.SortOrientation.rows
              );
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Range#style:member'
    summary: 表示当前区域的样式。 如果单元格的样式不一致，则将返回 null。 对于自定义样式，将返回样式名称。 对于内置样式，将返回一个表示 BuiltInStyle 枚举中的值的字符串。
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Range#text:member'
    summary: 指定区域的文本值。 文本值与单元格宽度无关。 \#EXCEL UI 中发生的符号替换不会影响 API 返回的文本值。
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: 'excel!Excel.Range#top:member'
    summary: 返回从工作表的上边缘到区域的上边缘的 100％ 缩放的距离（以磅为单位）。
    name: top
    fullName: top
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly top: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#ungroup:member(1)'
    summary: 取消边框的列和行的组合。
    name: ungroup(groupOption)
    fullName: ungroup(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOption: GroupOption | "ByRows" | "ByColumns"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              
              // This removes two levels of groups from the "A1-R10" range.
              // Any groups at the same level on the same dimension will be removed by a single call.
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byRows);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              sheet.getRange("A1:R10").ungroup(Excel.GroupOption.byColumns);
              await context.sync();
          }
          ```
      parameters:
        - id: groupOption
          description: 指定如何将区域与行或列取消组合。
          type:
            - 'excel!Excel.Range#ungroup~0:complex'
  - uid: 'excel!Excel.Range#unmerge:member(1)'
    summary: 将范围单元格取消合并为各个单元格。
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#values:member'
    summary: 表示指定区域的原始值。 返回的数据可能是字符串、数字，也可能是布尔值。 包含错误的单元格将返回错误字符串。
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#valueTypes:member'
    summary: 指定每个单元格中的数据类型。
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: RangeValueType[][];'
      return:
        type:
          - 'excel!Excel.Range#valueTypes~0:complex'
  - uid: 'excel!Excel.Range#width:member'
    summary: 返回从区域的左边缘到区域的右边缘的 100％ 缩放的距离（以磅为单位）。
    name: width
    fullName: width
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly width: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#worksheet:member'
    summary: 包含当前区域的工作表。
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
references:
  - uid: 'excel!Excel.Range#autoFill~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#autoFill~1:complex'
    name: |-
      | AutoFillType
                      | "FillDefault"
                      | "FillCopy"
                      | "FillSeries"
                      | "FillFormats"
                      | "FillValues"
                      | "FillDays"
                      | "FillWeekdays"
                      | "FillMonths"
                      | "FillYears"
                      | "LinearTrend"
                      | "GrowthTrend"
                      | "FlashFill"
    fullName: |-
      | Excel.AutoFillType
                      | "FillDefault"
                      | "FillCopy"
                      | "FillSeries"
                      | "FillFormats"
                      | "FillValues"
                      | "FillDays"
                      | "FillWeekdays"
                      | "FillMonths"
                      | "FillYears"
                      | "LinearTrend"
                      | "GrowthTrend"
                      | "FlashFill"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.AutoFillType:enum'
        name: AutoFillType
        fullName: Excel.AutoFillType
      - name: |2-

                          | "FillDefault"
                          | "FillCopy"
                          | "FillSeries"
                          | "FillFormats"
                          | "FillValues"
                          | "FillDays"
                          | "FillWeekdays"
                          | "FillMonths"
                          | "FillYears"
                          | "LinearTrend"
                          | "GrowthTrend"
                          | "FlashFill"
                  
        fullName: |2-

                          | "FillDefault"
                          | "FillCopy"
                          | "FillSeries"
                          | "FillFormats"
                          | "FillValues"
                          | "FillDays"
                          | "FillWeekdays"
                          | "FillMonths"
                          | "FillYears"
                          | "LinearTrend"
                          | "GrowthTrend"
                          | "FlashFill"
                  
  - uid: 'excel!Excel.Range#clear~0:complex'
    name: |-
      | ClearApplyTo
                      | "All"
                      | "Formats"
                      | "Contents"
                      | "Hyperlinks"
                      | "RemoveHyperlinks"
    fullName: |-
      | Excel.ClearApplyTo
                      | "All"
                      | "Formats"
                      | "Contents"
                      | "Hyperlinks"
                      | "RemoveHyperlinks"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.ClearApplyTo:enum'
        name: ClearApplyTo
        fullName: Excel.ClearApplyTo
      - name: |2-

                          | "All"
                          | "Formats"
                          | "Contents"
                          | "Hyperlinks"
                          | "RemoveHyperlinks"
                  
        fullName: |2-

                          | "All"
                          | "Formats"
                          | "Contents"
                          | "Hyperlinks"
                          | "RemoveHyperlinks"
                  
  - uid: 'excel!Excel.ConditionalFormatCollection:interface'
    name: ConditionalFormatCollection
    fullName: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:interface'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#copyFrom~1:complex'
    name: |-
      | RangeCopyType
                      | "All"
                      | "Formulas"
                      | "Values"
                      | "Formats"
    fullName: |-
      | Excel.RangeCopyType
                      | "All"
                      | "Formulas"
                      | "Values"
                      | "Formats"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.RangeCopyType:enum'
        name: RangeCopyType
        fullName: Excel.RangeCopyType
      - name: |2-

                          | "All"
                          | "Formulas"
                          | "Values"
                          | "Formats"
        fullName: |2-

                          | "All"
                          | "Formulas"
                          | "Values"
                          | "Formats"
  - uid: 'excel!Excel.DataValidation:interface'
    name: DataValidation
    fullName: Excel.DataValidation
  - uid: 'excel!Excel.Range#delete~0:complex'
    name: DeleteShiftDirection | "Up" | "Left"
    fullName: Excel.DeleteShiftDirection | "Up" | "Left"
    spec.typeScript:
      - uid: 'excel!Excel.DeleteShiftDirection:enum'
        name: DeleteShiftDirection
        fullName: Excel.DeleteShiftDirection
      - name: ' | "Up" | "Left"'
        fullName: ' | "Up" | "Left"'
  - uid: 'excel!Excel.Range:interface'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.SearchCriteria:interface'
    name: SearchCriteria
    fullName: Excel.SearchCriteria
  - uid: 'excel!Excel.RangeFormat:interface'
    name: RangeFormat
    fullName: Excel.RangeFormat
  - uid: 'excel!Excel.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getImage~0:complex'
    name: ClientResult<string>
    fullName: Excel.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:interface'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.Range#getIntersection~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.PivotTableScopedCollection:interface'
    name: PivotTableScopedCollection
    fullName: Excel.PivotTableScopedCollection
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.Range#getSpecialCells~0:complex'
    name: |-
      | SpecialCellType
                      | "ConditionalFormats"
                      | "DataValidations"
                      | "Blanks"
                      | "Constants"
                      | "Formulas"
                      | "SameConditionalFormat"
                      | "SameDataValidation"
                      | "Visible"
    fullName: |-
      | Excel.SpecialCellType
                      | "ConditionalFormats"
                      | "DataValidations"
                      | "Blanks"
                      | "Constants"
                      | "Formulas"
                      | "SameConditionalFormat"
                      | "SameDataValidation"
                      | "Visible"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.SpecialCellType:enum'
        name: SpecialCellType
        fullName: Excel.SpecialCellType
      - name: |2-

                          | "ConditionalFormats"
                          | "DataValidations"
                          | "Blanks"
                          | "Constants"
                          | "Formulas"
                          | "SameConditionalFormat"
                          | "SameDataValidation"
                          | "Visible"
        fullName: |2-

                          | "ConditionalFormats"
                          | "DataValidations"
                          | "Blanks"
                          | "Constants"
                          | "Formulas"
                          | "SameConditionalFormat"
                          | "SameDataValidation"
                          | "Visible"
  - uid: 'excel!Excel.Range#getSpecialCells~1:complex'
    name: |-
      | SpecialCellValueType
                      | "All"
                      | "Errors"
                      | "ErrorsLogical"
                      | "ErrorsNumbers"
                      | "ErrorsText"
                      | "ErrorsLogicalNumber"
                      | "ErrorsLogicalText"
                      | "ErrorsNumberText"
                      | "Logical"
                      | "LogicalNumbers"
                      | "LogicalText"
                      | "LogicalNumbersText"
                      | "Numbers"
                      | "NumbersText"
                      | "Text"
    fullName: |-
      | Excel.SpecialCellValueType
                      | "All"
                      | "Errors"
                      | "ErrorsLogical"
                      | "ErrorsNumbers"
                      | "ErrorsText"
                      | "ErrorsLogicalNumber"
                      | "ErrorsLogicalText"
                      | "ErrorsNumberText"
                      | "Logical"
                      | "LogicalNumbers"
                      | "LogicalText"
                      | "LogicalNumbersText"
                      | "Numbers"
                      | "NumbersText"
                      | "Text"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.SpecialCellValueType:enum'
        name: SpecialCellValueType
        fullName: Excel.SpecialCellValueType
      - name: |2-

                          | "All"
                          | "Errors"
                          | "ErrorsLogical"
                          | "ErrorsNumbers"
                          | "ErrorsText"
                          | "ErrorsLogicalNumber"
                          | "ErrorsLogicalText"
                          | "ErrorsNumberText"
                          | "Logical"
                          | "LogicalNumbers"
                          | "LogicalText"
                          | "LogicalNumbersText"
                          | "Numbers"
                          | "NumbersText"
                          | "Text"
                  
        fullName: |2-

                          | "All"
                          | "Errors"
                          | "ErrorsLogical"
                          | "ErrorsNumbers"
                          | "ErrorsText"
                          | "ErrorsLogicalNumber"
                          | "ErrorsLogicalText"
                          | "ErrorsNumberText"
                          | "Logical"
                          | "LogicalNumbers"
                          | "LogicalText"
                          | "LogicalNumbersText"
                          | "Numbers"
                          | "NumbersText"
                          | "Text"
                  
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject~0:complex'
    name: |-
      | SpecialCellType
                      | "ConditionalFormats"
                      | "DataValidations"
                      | "Blanks"
                      | "Constants"
                      | "Formulas"
                      | "SameConditionalFormat"
                      | "SameDataValidation"
                      | "Visible"
    fullName: |-
      | Excel.SpecialCellType
                      | "ConditionalFormats"
                      | "DataValidations"
                      | "Blanks"
                      | "Constants"
                      | "Formulas"
                      | "SameConditionalFormat"
                      | "SameDataValidation"
                      | "Visible"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.SpecialCellType:enum'
        name: SpecialCellType
        fullName: Excel.SpecialCellType
      - name: |2-

                          | "ConditionalFormats"
                          | "DataValidations"
                          | "Blanks"
                          | "Constants"
                          | "Formulas"
                          | "SameConditionalFormat"
                          | "SameDataValidation"
                          | "Visible"
        fullName: |2-

                          | "ConditionalFormats"
                          | "DataValidations"
                          | "Blanks"
                          | "Constants"
                          | "Formulas"
                          | "SameConditionalFormat"
                          | "SameDataValidation"
                          | "Visible"
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject~1:complex'
    name: |-
      | SpecialCellValueType
                      | "All"
                      | "Errors"
                      | "ErrorsLogical"
                      | "ErrorsNumbers"
                      | "ErrorsText"
                      | "ErrorsLogicalNumber"
                      | "ErrorsLogicalText"
                      | "ErrorsNumberText"
                      | "Logical"
                      | "LogicalNumbers"
                      | "LogicalText"
                      | "LogicalNumbersText"
                      | "Numbers"
                      | "NumbersText"
                      | "Text"
    fullName: |-
      | Excel.SpecialCellValueType
                      | "All"
                      | "Errors"
                      | "ErrorsLogical"
                      | "ErrorsNumbers"
                      | "ErrorsText"
                      | "ErrorsLogicalNumber"
                      | "ErrorsLogicalText"
                      | "ErrorsNumberText"
                      | "Logical"
                      | "LogicalNumbers"
                      | "LogicalText"
                      | "LogicalNumbersText"
                      | "Numbers"
                      | "NumbersText"
                      | "Text"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.SpecialCellValueType:enum'
        name: SpecialCellValueType
        fullName: Excel.SpecialCellValueType
      - name: |2-

                          | "All"
                          | "Errors"
                          | "ErrorsLogical"
                          | "ErrorsNumbers"
                          | "ErrorsText"
                          | "ErrorsLogicalNumber"
                          | "ErrorsLogicalText"
                          | "ErrorsNumberText"
                          | "Logical"
                          | "LogicalNumbers"
                          | "LogicalText"
                          | "LogicalNumbersText"
                          | "Numbers"
                          | "NumbersText"
                          | "Text"
                  
        fullName: |2-

                          | "All"
                          | "Errors"
                          | "ErrorsLogical"
                          | "ErrorsNumbers"
                          | "ErrorsText"
                          | "ErrorsLogicalNumber"
                          | "ErrorsLogicalText"
                          | "ErrorsNumberText"
                          | "Logical"
                          | "LogicalNumbers"
                          | "LogicalText"
                          | "LogicalNumbersText"
                          | "Numbers"
                          | "NumbersText"
                          | "Text"
                  
  - uid: 'excel!Excel.TableScopedCollection:interface'
    name: TableScopedCollection
    fullName: Excel.TableScopedCollection
  - uid: 'excel!Excel.RangeView:interface'
    name: RangeView
    fullName: Excel.RangeView
  - uid: 'excel!Excel.Range#group~0:complex'
    name: GroupOption | "ByRows" | "ByColumns"
    fullName: Excel.GroupOption | "ByRows" | "ByColumns"
    spec.typeScript:
      - uid: 'excel!Excel.GroupOption:enum'
        name: GroupOption
        fullName: Excel.GroupOption
      - name: ' | "ByRows" | "ByColumns"'
        fullName: ' | "ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#hideGroupDetails~0:complex'
    name: GroupOption | "ByRows" | "ByColumns"
    fullName: Excel.GroupOption | "ByRows" | "ByColumns"
    spec.typeScript:
      - uid: 'excel!Excel.GroupOption:enum'
        name: GroupOption
        fullName: Excel.GroupOption
      - name: |2-
           | "ByRows" | "ByColumns"
                  
        fullName: |2-
           | "ByRows" | "ByColumns"
                  
  - uid: 'excel!Excel.RangeHyperlink:interface'
    name: RangeHyperlink
    fullName: Excel.RangeHyperlink
  - uid: 'excel!Excel.Range#insert~0:complex'
    name: InsertShiftDirection | "Down" | "Right"
    fullName: Excel.InsertShiftDirection | "Down" | "Right"
    spec.typeScript:
      - uid: 'excel!Excel.InsertShiftDirection:enum'
        name: InsertShiftDirection
        fullName: Excel.InsertShiftDirection
      - name: ' | "Down" | "Right"'
        fullName: ' | "Down" | "Right"'
  - uid: 'excel!Excel.Range#linkedDataTypeState~0:complex'
    name: 'LinkedDataTypeState[][]'
    fullName: 'Excel.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'excel!Excel.LinkedDataTypeState:enum'
        name: LinkedDataTypeState
        fullName: Excel.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Range#moveTo~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RemoveDuplicatesResult:interface'
    name: RemoveDuplicatesResult
    fullName: Excel.RemoveDuplicatesResult
  - uid: 'excel!Excel.Range#replaceAll~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:interface'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: ReplaceCriteria
    fullName: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Range#showGroupDetails~0:complex'
    name: GroupOption | "ByRows" | "ByColumns"
    fullName: Excel.GroupOption | "ByRows" | "ByColumns"
    spec.typeScript:
      - uid: 'excel!Excel.GroupOption:enum'
        name: GroupOption
        fullName: Excel.GroupOption
      - name: |2-
           | "ByRows" | "ByColumns"
                  
        fullName: |2-
           | "ByRows" | "ByColumns"
                  
  - uid: 'excel!Excel.RangeSort:interface'
    name: RangeSort
    fullName: Excel.RangeSort
  - uid: 'excel!Excel.Range#ungroup~0:complex'
    name: GroupOption | "ByRows" | "ByColumns"
    fullName: Excel.GroupOption | "ByRows" | "ByColumns"
    spec.typeScript:
      - uid: 'excel!Excel.GroupOption:enum'
        name: GroupOption
        fullName: Excel.GroupOption
      - name: ' | "ByRows" | "ByColumns"'
        fullName: ' | "ByRows" | "ByColumns"'
  - uid: 'excel!Excel.Range#valueTypes~0:complex'
    name: 'RangeValueType[][]'
    fullName: 'Excel.RangeValueType[][]'
    spec.typeScript:
      - uid: 'excel!Excel.RangeValueType:enum'
        name: RangeValueType
        fullName: Excel.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Worksheet:interface'
    name: Worksheet
    fullName: Excel.Worksheet