### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.RangeAreas:interface'
    summary: 'RangeAreas 表示同一工作表中的一个或多个矩形区域的集合。 若要了解如何使用 discontinguous 范围，请阅读[在 Excel 加载项中同时处理多个区域](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-multiple-ranges)<!-- -->.'
    name: Excel.RangeAreas
    fullName: Excel.RangeAreas
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.RangeAreas#address:member'
      - 'excel!Excel.RangeAreas#addressLocal:member'
      - 'excel!Excel.RangeAreas#areaCount:member'
      - 'excel!Excel.RangeAreas#areas:member'
      - 'excel!Excel.RangeAreas#calculate:member(1)'
      - 'excel!Excel.RangeAreas#cellCount:member'
      - 'excel!Excel.RangeAreas#clear:member(1)'
      - 'excel!Excel.RangeAreas#conditionalFormats:member'
      - 'excel!Excel.RangeAreas#convertDataTypeToText:member(1)'
      - 'excel!Excel.RangeAreas#convertToLinkedDataType:member(1)'
      - 'excel!Excel.RangeAreas#copyFrom:member(1)'
      - 'excel!Excel.RangeAreas#dataValidation:member'
      - 'excel!Excel.RangeAreas#format:member'
      - 'excel!Excel.RangeAreas#getEntireColumn:member(1)'
      - 'excel!Excel.RangeAreas#getEntireRow:member(1)'
      - 'excel!Excel.RangeAreas#getIntersection:member(1)'
      - 'excel!Excel.RangeAreas#getIntersectionOrNullObject:member(1)'
      - 'excel!Excel.RangeAreas#getOffsetRangeAreas:member(1)'
      - 'excel!Excel.RangeAreas#getSpecialCells:member(1)'
      - 'excel!Excel.RangeAreas#getSpecialCellsOrNullObject:member(1)'
      - 'excel!Excel.RangeAreas#getTables:member(1)'
      - 'excel!Excel.RangeAreas#getUsedRangeAreas:member(1)'
      - 'excel!Excel.RangeAreas#getUsedRangeAreasOrNullObject:member(1)'
      - 'excel!Excel.RangeAreas#isEntireColumn:member'
      - 'excel!Excel.RangeAreas#isEntireRow:member'
      - 'excel!Excel.RangeAreas#load:member(1)'
      - 'excel!Excel.RangeAreas#setDirty:member(1)'
      - 'excel!Excel.RangeAreas#style:member'
      - 'excel!Excel.RangeAreas#worksheet:member'
  - uid: 'excel!Excel.RangeAreas#address:member'
    summary: 返回 A1 样式中的 RangeAreas 引用。 Address 值将包含每个矩形单元格块的工作表名称（例如，"Sheet1！A1： B4、Sheet1！D1： D4 "）。
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.RangeAreas#addressLocal:member'
    summary: 返回用户区域设置中的 RangeAreas 引用。
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.RangeAreas#areaCount:member'
    summary: 返回包含此 RangeAreas 对象的矩形区域的数量。
    name: areaCount
    fullName: areaCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly areaCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.RangeAreas#areas:member'
    summary: 返回包含此 RangeAreas 对象的矩形区域的集合。
    name: areas
    fullName: areas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly areas: RangeCollection;'
      return:
        type:
          - 'excel!Excel.RangeCollection:interface'
  - uid: 'excel!Excel.RangeAreas#calculate:member(1)'
    summary: 计算 RangeAreas 中的所有单元格。
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.RangeAreas#cellCount:member'
    summary: '返回 RangeAreas 对象中的单元格数量，即总计各个矩形区域的单元格计数。 如果单元格计数超过 2^31-1 (2,147,483,647)，则返回 -1。'
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.RangeAreas#clear:member(1)'
    summary: 清除包含此 RangeAreas 对象的每个区域的值、格式、填充、边框等。
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: ClearApplyTo): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyTo
          description: 可选。 确定清除操作的类型。 有关详细信息，请参阅 ClearApplyTo。 默认值为 "All"。
          type:
            - 'excel!Excel.ClearApplyTo:enum'
  - uid: 'excel!Excel.RangeAreas#conditionalFormats:member'
    summary: 返回与此 RangeAreas 对象中的任何单元格相交的 ConditionalFormats 集合。
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:interface'
  - uid: 'excel!Excel.RangeAreas#convertDataTypeToText:member(1)'
    summary: 将 RangeAreas 中具有数据类型的所有单元格转换为文本。
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.RangeAreas#convertToLinkedDataType:member(1)'
    summary: 将 RangeAreas 中的所有单元格转换为链接数据类型。
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        convertToLinkedDataType(
                    serviceID: number,
                    languageCulture: string
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: 将用于查询数据的服务 ID。
          type:
            - number
        - id: languageCulture
          description: 要为其查询服务的语言区域性。
          type:
            - string
  - uid: 'excel!Excel.RangeAreas#copyFrom:member(1)'
    summary: 将单元格数据或格式从源区域或 RangeAreas 复制到当前 RangeAreas。 目标 rangeAreas 的大小可以与源区域或 RangeAreas 的大小不同。 如果目标小于源，则将自动扩展目标。
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?: RangeCopyType,
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: 要从其复制的源区域或 RangeAreas。 如果源 RangeAreas 有多个区域，则必须通过删除矩形区域中的完整行或列来创建窗体。
          type:
            - 'excel!Excel.RangeAreas#copyFrom~0:complex'
        - id: copyType
          description: 要复制的单元格数据的类型或格式。 默认值为 "All"。
          type:
            - 'excel!Excel.RangeCopyType:enum'
        - id: skipBlanks
          description: 如果为 True，则在源区域或 RangeAreas 中跳过空单元格。 默认为 false。
          type:
            - boolean
        - id: transpose
          description: 如此如果转置目标 RangeAreas 中的单元格。 默认为 false。
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#dataValidation:member'
    summary: 返回 RangeAreas 中的所有区域的 dataValidation 对象。
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:interface'
  - uid: 'excel!Excel.RangeAreas#format:member'
    summary: 返回一个 RangeFormat 对象，封装 RangeAreas 对象中所有区域的字体、填充、边框、对齐方式和其他属性。
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:interface'
        description: |-


          #### <a name="examples"></a>示例

          ```typescript
          async function main(context: Excel.RequestContext) {

              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let usedRange = sheet.getUsedRange();

              // Find the ranges with formulas.
              let formulaRanges = usedRange.getSpecialCells("Formulas");
              formulaRanges.format.fill.color = "lightgreen";

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.RangeAreas#getEntireColumn:member(1)'
    summary: '返回表示 RangeAreas 的整个列的 RangeAreas 对象（例如，如果当前 RangeAreas 表示单元格“B4:E11, H2”，它将返回表示列“B:E, H:H”的 RangeAreas）。'
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
  - uid: 'excel!Excel.RangeAreas#getEntireRow:member(1)'
    summary: '获取表示 RangeAreas 的整个行的 RangeAreas 对象（例如，如果当前 RangeAreas 表示单元格“B4:E11”，它将返回表示行“4:11”的 RangeAreas）。'
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
  - uid: 'excel!Excel.RangeAreas#getIntersection:member(1)'
    summary: 返回 RangeAreas 对象，它表示给定区域或 RangeAreas 的交集。 如果未找到任何交集，则将引发 ItemNotFound 错误。
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | RangeAreas | string): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: 将用于确定交集的 range、RangeAreas 对象或 range 地址。
          type:
            - 'excel!Excel.RangeAreas#getIntersection~0:complex'
  - uid: 'excel!Excel.RangeAreas#getIntersectionOrNullObject:member(1)'
    summary: 返回 RangeAreas 对象，它表示给定区域或 RangeAreas 的交集。 如果未找到任何交集，将返回 null 对象。
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getIntersectionOrNullObject(
                    anotherRange: Range | RangeAreas | string
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: 将用于确定交集的范围、RangeAreas 或地址。
          type:
            - 'excel!Excel.RangeAreas#getIntersectionOrNullObject~0:complex'
  - uid: 'excel!Excel.RangeAreas#getOffsetRangeAreas:member(1)'
    summary: 返回 RangeAreas 对象，它按特定的行和列偏移量进行移动。 返回的 RangeAreas 的维度将与原始对象匹配。 如果生成的 RangeAreas 强行超出工作表网格的边界，则将引发错误。
    name: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    fullName: 'getOffsetRangeAreas(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getOffsetRangeAreas(
                    rowOffset: number,
                    columnOffset: number
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: rowOffset
          description: RangeAreas 要偏移的行数（正值、负值或0）。 正值表示向下偏移，负值表示向上偏移。
          type:
            - number
        - id: columnOffset
          description: RangeAreas 要偏移的列数（正值、负值或0）。 正值表示向右偏移，负值表示向左偏移。
          type:
            - number
  - uid: 'excel!Excel.RangeAreas#getSpecialCells:member(1)'
    summary: 返回一个 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。 如果未找到符合条件的特殊单元格，则会引发错误。
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCells(
                    cellType: SpecialCellType,
                    cellValueType?: SpecialCellValueType
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: 要包含的单元格的类型。
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: 如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。 可以将这些值组合在一起，以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.RangeAreas#getSpecialCellsOrNullObject:member(1)'
    summary: 返回一个 RangeAreas 对象，它表示匹配指定类型和值的所有单元格。 如果未找到符合条件的特殊单元格，则返回 null 对象。
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCellsOrNullObject(
                    cellType: SpecialCellType,
                    cellValueType?: SpecialCellValueType
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: 要包含的单元格的类型。
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: 如果 cellType 为常量或公式，则此参数用于确定要在结果中包含哪些类型的单元格。 可以将这些值组合在一起，以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.RangeAreas#getTables:member(1)'
    summary: 返回与此 RangeAreas 对象中的任何区域重叠的限定范围的表格集合。
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): TableScopedCollection;'
      return:
        type:
          - 'excel!Excel.TableScopedCollection:interface'
        description: ''
      parameters:
        - id: fullyContained
          description: 如果为 true，则仅返回完全包含在区域边界内的表。 默认为 false。
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#getUsedRangeAreas:member(1)'
    summary: 返回使用的 RangeAreas，它包含 RangeAreas 对象中的各个矩形区域的所有已用区域。 如果 RangeAreas 中没有已使用的单元格，则将引发 ItemNotFound 错误。
    name: getUsedRangeAreas(valuesOnly)
    fullName: getUsedRangeAreas(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeAreas(valuesOnly?: boolean): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: 是否仅将值为的单元格视为已使用的单元格。 默认为 false。
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#getUsedRangeAreasOrNullObject:member(1)'
    summary: 返回使用的 RangeAreas，它包含 RangeAreas 对象中的各个矩形区域的所有已用区域。 如果 RangeAreas 中没有已使用的单元格，则将返回 null 对象。
    name: getUsedRangeAreasOrNullObject(valuesOnly)
    fullName: getUsedRangeAreasOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeAreasOrNullObject(valuesOnly?: boolean): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: 是否仅将值为的单元格视为已使用的单元格。
          type:
            - boolean
  - uid: 'excel!Excel.RangeAreas#isEntireColumn:member'
    summary: '指定此 RangeAreas 对象上的所有区域是否都代表整列（例如，"A:C，Q:Z"）。'
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.RangeAreas#isEntireRow:member'
    summary: '指定此 RangeAreas 对象上的所有区域是否都代表整行（例如，"1:3，5:7"）。'
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.RangeAreas#load:member(1)'
    summary: 将命令加入队列以加载对象的指定属性。 在 `context.sync()` 读取属性之前，必须先调用。
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: 一个以逗号分隔的字符串或字符串数组，用于指定要加载的属性。
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.RangeAreas#setDirty:member(1)'
    summary: 设置要在下一次重新计算时重新进行计算的 RangeAreas。
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.RangeAreas#style:member'
    summary: 表示此 RangeAreas 对象中的所有区域的样式。 如果单元格的样式不一致，则将返回 null。 对于自定义样式，将返回样式名称。 对于内置样式，将返回一个表示 BuiltInStyle 枚举中的值的字符串。
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.RangeAreas#worksheet:member'
    summary: 返回当前 RangeAreas 的工作表。
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
references:
  - uid: 'excel!Excel.RangeCollection:interface'
    name: RangeCollection
    fullName: Excel.RangeCollection
  - uid: 'excel!Excel.ClearApplyTo:enum'
    name: ClearApplyTo
    fullName: Excel.ClearApplyTo
  - uid: 'excel!Excel.ConditionalFormatCollection:interface'
    name: ConditionalFormatCollection
    fullName: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.RangeAreas#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:interface'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RangeCopyType:enum'
    name: RangeCopyType
    fullName: Excel.RangeCopyType
  - uid: 'excel!Excel.DataValidation:interface'
    name: DataValidation
    fullName: Excel.DataValidation
  - uid: 'excel!Excel.RangeFormat:interface'
    name: RangeFormat
    fullName: Excel.RangeFormat
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.RangeAreas#getIntersection~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:interface'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RangeAreas#getIntersectionOrNullObject~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:interface'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: |2-
           | string
                  
        fullName: |2-
           | string
                  
  - uid: 'excel!Excel.SpecialCellType:enum'
    name: SpecialCellType
    fullName: Excel.SpecialCellType
  - uid: 'excel!Excel.SpecialCellValueType:enum'
    name: SpecialCellValueType
    fullName: Excel.SpecialCellValueType
  - uid: 'excel!Excel.TableScopedCollection:interface'
    name: TableScopedCollection
    fullName: Excel.TableScopedCollection
  - uid: 'excel!Excel.Worksheet:interface'
    name: Worksheet
    fullName: Excel.Worksheet