### YamlMime:TSType
name: ExcelScript.Workbook
uid: ExcelScript!ExcelScript.Workbook:interface
package: ExcelScript!
fullName: ExcelScript.Workbook
summary: 工作簿是包含相关工作簿对象（如工作表、表和范围）的顶级对象。
remarks: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script adds a new worksheet to the workbook, then switches to it.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Add a new worksheet with the default name.\n  let worksheet = workbook.addWorksheet();\n\n  // Switch focus to the new worksheet.\n  worksheet.activate();\n}\n```"
isPreview: false
isDeprecated: false
type: interface
methods:
- name: addBinding(range, bindingType, id)
  uid: ExcelScript!ExcelScript.Workbook#addBinding:member(1)
  package: ExcelScript!
  fullName: addBinding(range, bindingType, id)
  summary: 将新的 binding 对象添加到特定区域。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addBinding(
                  range: Range | string,
                  bindingType: BindingType,
                  id: string
              ): Binding;
    parameters:
    - id: range
      description: 要将绑定绑定到的范围。 可以是 `Range` 对象或字符串。 如果是字符串，必须包含完整地址，包括工作表名称
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: bindingType
      description: 绑定的类型。 看到 `ExcelScript.BindingType`<!-- -->.
      type: <xref uid="ExcelScript!ExcelScript.BindingType:enum" />
    - id: id
      description: 绑定的名称。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />
      description: ''
- name: addBindingFromNamedItem(name, bindingType, id)
  uid: ExcelScript!ExcelScript.Workbook#addBindingFromNamedItem:member(1)
  package: ExcelScript!
  fullName: addBindingFromNamedItem(name, bindingType, id)
  summary: 根据工作簿中的命名项添加新的 binding 对象。 如果命名项引用多个区域， `InvalidReference` 则将返回错误。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addBindingFromNamedItem(
                  name: string,
                  bindingType: BindingType,
                  id: string
              ): Binding;
    parameters:
    - id: name
      description: 从中创建绑定的名称。
      type: string
    - id: bindingType
      description: 绑定的类型。 看到 `ExcelScript.BindingType`<!-- -->.
      type: <xref uid="ExcelScript!ExcelScript.BindingType:enum" />
    - id: id
      description: 绑定的名称。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />
      description: ''
- name: addBindingFromSelection(bindingType, id)
  uid: ExcelScript!ExcelScript.Workbook#addBindingFromSelection:member(1)
  package: ExcelScript!
  fullName: addBindingFromSelection(bindingType, id)
  summary: 根据当前选择的内容添加新的 binding 对象。 如果所选内容具有多个区域， `InvalidReference` 则将返回错误。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addBindingFromSelection(bindingType: BindingType, id: string): Binding;'
    parameters:
    - id: bindingType
      description: 绑定的类型。 看到 `ExcelScript.BindingType`<!-- -->.
      type: <xref uid="ExcelScript!ExcelScript.BindingType:enum" />
    - id: id
      description: 绑定的名称。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />
      description: ''
- name: addComment(cellAddress, content, contentType)
  uid: ExcelScript!ExcelScript.Workbook#addComment:member(1)
  package: ExcelScript!
  fullName: addComment(cellAddress, content, contentType)
  summary: 使用给定单元格上的给定内容创建新批注。 `InvalidArgument`如果提供的区域大于一个单元格，则会引发错误。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addComment(
                  cellAddress: Range | string,
                  content: CommentRichContent | string,
                  contentType?: ContentType
              ): Comment;
    parameters:
    - id: cellAddress
      description: 将注释添加到的单元格。 这可以是 `Range` 对象或字符串。 如果是字符串，则必须包含完整地址，包括工作表名称。 `InvalidArgument`如果提供的区域大于一个单元格，则会引发错误。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: content
      description: 注释的内容。 这可以是字符串或 `CommentRichContent` 对象。 字符串用于纯文本。 `CommentRichContent` 对象允许其他注释功能，例如提及。
      type: <xref uid="ExcelScript!ExcelScript.CommentRichContent:interface" /> | string
    - id: contentType
      description: 可选。 注释中包含的内容类型。 默认值为枚举 `ContentType.Plain`<!-- -->.
      type: <xref uid="ExcelScript!ExcelScript.ContentType:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: addCustomXmlPart(xml)
  uid: ExcelScript!ExcelScript.Workbook#addCustomXmlPart:member(1)
  package: ExcelScript!
  fullName: addCustomXmlPart(xml)
  summary: 向工作簿添加新的自定义 XML 部件。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addCustomXmlPart(xml: string): CustomXmlPart;'
    parameters:
    - id: xml
      description: XML 内容。 必须是有效的 XML 片段。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />
      description: ''
- name: addNamedItem(name, reference, comment)
  uid: ExcelScript!ExcelScript.Workbook#addNamedItem:member(1)
  package: ExcelScript!
  fullName: addNamedItem(name, reference, comment)
  summary: 将新名称添加到给定范围的集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addNamedItem(
                  name: string,
                  reference: Range | string,
                  comment?: string
              ): NamedItem;
    parameters:
    - id: name
      description: 已命名项目的名称。
      type: string
    - id: reference
      description: 名称将引用的公式或区域。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: comment
      description: 可选。 与命名项关联的注释。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" />
      description: ''
- name: addNamedItemFormulaLocal(name, formula, comment)
  uid: ExcelScript!ExcelScript.Workbook#addNamedItemFormulaLocal:member(1)
  package: ExcelScript!
  fullName: addNamedItemFormulaLocal(name, formula, comment)
  summary: 使用用户的公式区域设置，将新名称添加到给定范围的集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addNamedItemFormulaLocal(
                  name: string,
                  formula: string,
                  comment?: string
              ): NamedItem;
    parameters:
    - id: name
      description: 已命名项目的名称。
      type: string
    - id: formula
      description: 名称将引用的采用用户区域设置的公式。
      type: string
    - id: comment
      description: 可选。 与命名项关联的注释。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" />
      description: ''
- name: addPivotTable(name, source, destination)
  uid: ExcelScript!ExcelScript.Workbook#addPivotTable:member(1)
  package: ExcelScript!
  fullName: addPivotTable(name, source, destination)
  summary: 根据指定的源数据添加数据透视表，并将其插入目标范围的左上角单元格。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addPivotTable(
                  name: string,
                  source: Range | string | Table,
                  destination: Range | string
              ): PivotTable;
    parameters:
    - id: name
      description: 新数据透视表的名称。
      type: string
    - id: source
      description: 新数据透视表的源数据，可以是范围 (或字符串地址，包括工作表名称) 或表。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string | <xref uid="ExcelScript!ExcelScript.Table:interface" />
    - id: destination
      description: 数据透视表目标区域（工作表中用于放置所生成的报表的区域）左上角的单元格。
      type: "<xref uid=\"ExcelScript!ExcelScript.Range:interface\" /> | string\n        "
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script creates a PivotTable from an existing table and adds it to an existing worksheet.\n * This script assumes there is a table in the current worksheet with columns named \"Type\" and \"Sales\".\n * It also assumes there is a worksheet named \"PivotSheet\".\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Create a PivotTable based on a table in the current worksheet.\n  let sheet = workbook.getActiveWorksheet();\n  let table = sheet.getTables()[0];\n  let pivotTable = workbook.addPivotTable(\"My Pivot\", table, \"PivotSheet!A1\");\n\n  // Add fields to the PivotTable to show \"Sales\" per \"Type\".\n  pivotTable.addRowHierarchy(pivotTable.getHierarchy(\"Type\"));\n  pivotTable.addDataHierarchy(pivotTable.getHierarchy(\"Sales\"));\n}\n```"
- name: addPivotTableStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: addPivotTableStyle(name, makeUniqueName)
  summary: 创建具有指定名称的空白 `PivotTableStyle` 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addPivotTableStyle(
                  name: string,
                  makeUniqueName?: boolean
              ): PivotTableStyle;
    parameters:
    - id: name
      description: 新数据透视表样式的唯一名称。 如果名称已在使用中，则会引发 `InvalidArgument` 错误。
      type: string
    - id: makeUniqueName
      description: 可选。 默认为 `false`<!-- -->. 如果 `true`<!-- -->，将追加数字到名称，以便使其唯一，如果需要。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" />
      description: ''
- name: addPredefinedCellStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#addPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: addPredefinedCellStyle(name)
  summary: 向集合添加新样式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addPredefinedCellStyle(name: string): void;'
    parameters:
    - id: name
      description: 要添加的样式的名称。
      type: string
    return:
      type: void
      description: ''
- name: addSlicer(slicerSource, sourceField, slicerDestination)
  uid: ExcelScript!ExcelScript.Workbook#addSlicer:member(1)
  package: ExcelScript!
  fullName: addSlicer(slicerSource, sourceField, slicerDestination)
  summary: 将新切片器添加到工作簿。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      addSlicer(
                  slicerSource: string | PivotTable | Table,
                  sourceField: string | PivotField | number | TableColumn,
                  slicerDestination?: string | Worksheet
              ): Slicer;
    parameters:
    - id: slicerSource
      description: 新切片器将基于的数据源。 它可以是 `PivotTable` 对象、 `Table` 对象或字符串。 传递数据透视表对象时，数据源是对象的 `PivotTable` 源。 `Table`传递对象时，数据源是`Table`对象。 传递字符串时，它将解释为数据透视表或表的名称或 ID。
      type: string | <xref uid="ExcelScript!ExcelScript.PivotTable:interface" /> | <xref uid="ExcelScript!ExcelScript.Table:interface" />
    - id: sourceField
      description: 要筛选的数据源中的字段。 它可以是一个 `PivotField` 对象，一个 `TableColumn` 对象，一个 `PivotField` 或名称或 ID 的 ID `TableColumn`<!-- -->.
      type: string | <xref uid="ExcelScript!ExcelScript.PivotField:interface" /> | number | <xref uid="ExcelScript!ExcelScript.TableColumn:interface" />
    - id: slicerDestination
      description: 可选。 将在其中创建新切片器的工作表。 它可以是一个 `Worksheet` 对象，也可以是工作表的名称或 ID。 如果从工作表中检索切片器集合，则可以省略此参数。
      type: string | <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script adds a slicer for an existing PivotTable.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the PivotTable named \"Farm Pivot\".\n  const farmPivot = workbook.getPivotTable(\"Farm Pivot\");\n\n  // Create the slicer. \n  // Note that this assumes \"Type\" is already added as a hierarchy to the PivotTable.\n  const fruitSlicer: ExcelScript.Slicer = workbook.addSlicer(\n    farmPivot, /* The table or PivotTale to be sliced. */\n    farmPivot.getHierarchy(\"Type\").getFields()[0] /* What source field to use as the slicer options. */\n  );\n\n  // Select the items to display.\n  fruitSlicer.selectItems([\"Lemon\", \"Lime\"]);\n\n  // Set the left margin of the slicer.\n  fruitSlicer.setLeft(400);\n}\n```"
- name: addSlicerStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addSlicerStyle:member(1)
  package: ExcelScript!
  fullName: addSlicerStyle(name, makeUniqueName)
  summary: 创建具有指定名称的空白切片器样式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addSlicerStyle(name: string, makeUniqueName?: boolean): SlicerStyle;'
    parameters:
    - id: name
      description: 新切片器样式的唯一名称。 `InvalidArgument`如果名称已在使用中，则引发异常。
      type: string
    - id: makeUniqueName
      description: 可选。 默认为 `false`<!-- -->. 如果 `true`<!-- -->，将追加数字到名称，以便使其唯一，如果需要。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" />
      description: ''
- name: addTable(address, hasHeaders)
  uid: ExcelScript!ExcelScript.Workbook#addTable:member(1)
  package: ExcelScript!
  fullName: addTable(address, hasHeaders)
  summary: 创建一个新表。 范围对象或源地址决定了在哪个工作表下添加表。 如果无法添加表（例如，由于地址无效，或者表与另一个表重叠），则会引发错误。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTable(address: Range | string, hasHeaders: boolean): Table;'
    parameters:
    - id: address
      description: 对象 `Range` ，或表示数据源的范围的字符串地址或名称。 如果地址不包含工作表名称，将使用当前活动的工作表。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: hasHeaders
      description: 一个布尔值，指示导入的数据是否具有列标签。 如果源不包含标头 (即当此属性设置为 `false`<!-- -->) ，Excel将自动生成标头，并将数据向下移一行。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This sample converts the information in the first worksheet\n * into a table with headers.\n*/\nfunction main(workbook: ExcelScript.Workbook) {\n  // This assumes there is one contiguous range in the first worksheet.\n  const dataRange = workbook.getFirstWorksheet().getUsedRange();\n  \n  // Add a table at the workbook level.\n  workbook.addTable(dataRange.getAddress(), true);\n}\n```"
- name: addTableStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addTableStyle:member(1)
  package: ExcelScript!
  fullName: addTableStyle(name, makeUniqueName)
  summary: 创建具有指定名称的空白 `TableStyle` 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTableStyle(name: string, makeUniqueName?: boolean): TableStyle;'
    parameters:
    - id: name
      description: 新表样式的唯一名称。 如果名称已在使用中，则会引发 `InvalidArgument` 错误。
      type: string
    - id: makeUniqueName
      description: 可选。 默认为 `false`<!-- -->. 如果 `true`<!-- -->，将追加数字到名称，以便使其唯一，如果需要。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" />
      description: ''
- name: addTimelineStyle(name, makeUniqueName)
  uid: ExcelScript!ExcelScript.Workbook#addTimelineStyle:member(1)
  package: ExcelScript!
  fullName: addTimelineStyle(name, makeUniqueName)
  summary: 创建具有指定名称的空白 `TimelineStyle` 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addTimelineStyle(name: string, makeUniqueName?: boolean): TimelineStyle;'
    parameters:
    - id: name
      description: 新时间线样式的唯一名称。 如果名称已在使用中，则会引发 `InvalidArgument` 错误。
      type: string
    - id: makeUniqueName
      description: 可选。 默认为 `false`<!-- -->. 如果 `true`<!-- -->，将追加数字到名称，以便使其唯一，如果需要。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" />
      description: ''
- name: addWorksheet(name)
  uid: ExcelScript!ExcelScript.Workbook#addWorksheet:member(1)
  package: ExcelScript!
  fullName: addWorksheet(name)
  summary: 向工作簿添加新工作表。 工作表将添加到现有工作表的末尾。 如果要激活新添加的工作表，请调用 `.activate()` 它。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addWorksheet(name?: string): Worksheet;'
    parameters:
    - id: name
      description: 可选。 要添加的工作表的名称。 如果指定，则名称应是唯一的。 如果未指定，Excel 将确定新工作表的名称。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script adds a new worksheet named \"Data\" to the workbook.\n * If a worksheet with that name already exists, the script logs a note.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Check if the \"Data\" worksheet already exists.\n  if (workbook.getWorksheet(\"Data\")) {\n    console.log(\"The Data worksheet is already in the workbook.\");\n  } else {\n    // Add a new worksheet.\n    let worksheet = workbook.addWorksheet(\"Data\");\n  }\n}\n```"
- name: breakAllLinksToLinkedWorkbooks()
  uid: ExcelScript!ExcelScript.Workbook#breakAllLinksToLinkedWorkbooks:member(1)
  package: ExcelScript!
  fullName: breakAllLinksToLinkedWorkbooks()
  summary: 中断链接工作簿的所有链接。 断开链接后，引用工作簿链接的任何公式都会被完全删除，并替换为最近检索到的值。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'breakAllLinksToLinkedWorkbooks(): void;'
    return:
      type: void
      description: ''
- name: getActiveCell()
  uid: ExcelScript!ExcelScript.Workbook#getActiveCell:member(1)
  package: ExcelScript!
  fullName: getActiveCell()
  summary: 获取工作簿中当前处于活动状态的单元格。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveCell(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script logs the value of the current active cell. \n * If multiple cells are selected, the top-leftmost cell will be logged.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current active cell in the workbook.\n  let cell = workbook.getActiveCell();\n  console.log(`The current cell's value is ${cell.getValue()}`);\n}\n```"
- name: getActiveChart()
  uid: ExcelScript!ExcelScript.Workbook#getActiveChart:member(1)
  package: ExcelScript!
  fullName: getActiveChart()
  summary: 获取工作簿中的当前活动图表。 如果没有活动图表，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveChart(): Chart;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Chart:interface" />
      description: ''
- name: getActiveSlicer()
  uid: ExcelScript!ExcelScript.Workbook#getActiveSlicer:member(1)
  package: ExcelScript!
  fullName: getActiveSlicer()
  summary: 获取工作簿中当前处于活动状态的切片器。 如果没有活动切片器，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveSlicer(): Slicer;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" />
      description: ''
- name: getActiveWorksheet()
  uid: ExcelScript!ExcelScript.Workbook#getActiveWorksheet:member(1)
  package: ExcelScript!
  fullName: getActiveWorksheet()
  summary: 获取工作簿中当前处于活动状态的工作表。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveWorksheet(): Worksheet;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getApplication()
  uid: ExcelScript!ExcelScript.Workbook#getApplication:member(1)
  package: ExcelScript!
  fullName: getApplication()
  summary: 表示包含此工作簿的Excel应用程序实例。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getApplication(): Application;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Application:interface" />
      description: ''
- name: getAutoSave()
  uid: ExcelScript!ExcelScript.Workbook#getAutoSave:member(1)
  package: ExcelScript!
  fullName: getAutoSave()
  summary: 指定工作簿是否处于自动保存模式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAutoSave(): boolean;'
    return:
      type: boolean
      description: ''
- name: getBinding(id)
  uid: ExcelScript!ExcelScript.Workbook#getBinding:member(1)
  package: ExcelScript!
  fullName: getBinding(id)
  summary: 按 ID 获取绑定对象。 如果绑定对象不存在，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBinding(id: string): Binding | undefined;'
    parameters:
    - id: id
      description: 要检索的绑定对象的 ID。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" /> | undefined
      description: ''
- name: getBindings()
  uid: ExcelScript!ExcelScript.Workbook#getBindings:member(1)
  package: ExcelScript!
  fullName: getBindings()
  summary: 表示属于工作簿的绑定的集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBindings(): Binding[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Binding:interface" />[]
      description: ''
- name: getCalculationEngineVersion()
  uid: ExcelScript!ExcelScript.Workbook#getCalculationEngineVersion:member(1)
  package: ExcelScript!
  fullName: getCalculationEngineVersion()
  summary: 返回有关 Excel 计算引擎的版本号。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCalculationEngineVersion(): number;'
    return:
      type: number
      description: ''
- name: getChartDataPointTrack()
  uid: ExcelScript!ExcelScript.Workbook#getChartDataPointTrack:member(1)
  package: ExcelScript!
  fullName: getChartDataPointTrack()
  summary: 如果工作簿中的所有图表都跟踪它们所附加的实际数据点，则为 True。 如果图表跟踪数据点的索引，则为 False。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getChartDataPointTrack(): boolean;'
    return:
      type: boolean
      description: ''
- name: getComment(commentId)
  uid: ExcelScript!ExcelScript.Workbook#getComment:member(1)
  package: ExcelScript!
  fullName: getComment(commentId)
  summary: 根据其 ID 从集合中获取批注。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getComment(commentId: string): Comment;'
    parameters:
    - id: commentId
      description: 注释的标识符。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: getCommentByCell(cellAddress)
  uid: ExcelScript!ExcelScript.Workbook#getCommentByCell:member(1)
  package: ExcelScript!
  fullName: getCommentByCell(cellAddress)
  summary: 从指定单元格获取的批注。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCommentByCell(cellAddress: Range | string): Comment;'
    parameters:
    - id: cellAddress
      description: 注释所在的单元格。 这可以是 `Range` 对象或字符串。 如果是字符串，则必须包含完整地址，包括工作表名称。 `InvalidArgument`如果提供的区域大于一个单元格，则会引发错误。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: getCommentByReplyId(replyId)
  uid: ExcelScript!ExcelScript.Workbook#getCommentByReplyId:member(1)
  package: ExcelScript!
  fullName: getCommentByReplyId(replyId)
  summary: 获取给定答复连接到的注释。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCommentByReplyId(replyId: string): Comment;'
    parameters:
    - id: replyId
      description: 注释回复的标识符。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />
      description: ''
- name: getComments()
  uid: ExcelScript!ExcelScript.Workbook#getComments:member(1)
  package: ExcelScript!
  fullName: getComments()
  summary: 表示与工作簿关联的批注的集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getComments(): Comment[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Comment:interface" />[]
      description: ''
- name: getCustomXmlPart(id)
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlPart:member(1)
  package: ExcelScript!
  fullName: getCustomXmlPart(id)
  summary: 获取基于其 ID 的自定义 XML 部件。 `CustomXmlPart`如果不存在，则此方法返回`undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustomXmlPart(id: string): CustomXmlPart | undefined;'
    parameters:
    - id: id
      description: 要检索的对象的 ID。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" /> | undefined
      description: ''
- name: getCustomXmlPartByNamespace(namespaceUri)
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlPartByNamespace:member(1)
  package: ExcelScript!
  fullName: getCustomXmlPartByNamespace(namespaceUri)
  summary: 获取其命名空间与给定命名空间匹配的自定义 XML 部件的新集合。
  remarks: ''
  isPreview: false
  isDeprecated: true
  customDeprecatedMessage: Use `getCustomXmlPartsByNamespace` instead.
  syntax:
    content: 'getCustomXmlPartByNamespace(namespaceUri: string): CustomXmlPart[];'
    parameters:
    - id: namespaceUri
      description: 这必须是完全限定的架构 URI;例如，“http://schemas.contoso.com/review/1.0”。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />[]
      description: ''
- name: getCustomXmlParts()
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlParts:member(1)
  package: ExcelScript!
  fullName: getCustomXmlParts()
  summary: 表示此工作簿包含的自定义 XML 部件的集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustomXmlParts(): CustomXmlPart[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />[]
      description: ''
- name: getCustomXmlPartsByNamespace(namespaceUri)
  uid: ExcelScript!ExcelScript.Workbook#getCustomXmlPartsByNamespace:member(1)
  package: ExcelScript!
  fullName: getCustomXmlPartsByNamespace(namespaceUri)
  summary: 获取其命名空间与给定命名空间匹配的自定义 XML 部件的新集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustomXmlPartsByNamespace(namespaceUri: string): CustomXmlPart[];'
    parameters:
    - id: namespaceUri
      description: 这必须是完全限定的架构 URI;例如，“http://schemas.contoso.com/review/1.0”。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomXmlPart:interface" />[]
      description: ''
- name: getDefaultPivotTableStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultPivotTableStyle()
  summary: 获取父对象范围的默认数据透视表样式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultPivotTableStyle(): PivotTableStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" />
      description: ''
- name: getDefaultSlicerStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultSlicerStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultSlicerStyle()
  summary: 获取父对象范围的默认 `SlicerStyle` 值。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultSlicerStyle(): SlicerStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" />
      description: ''
- name: getDefaultTableStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultTableStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultTableStyle()
  summary: 获取父对象范围的默认表样式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultTableStyle(): TableStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" />
      description: ''
- name: getDefaultTimelineStyle()
  uid: ExcelScript!ExcelScript.Workbook#getDefaultTimelineStyle:member(1)
  package: ExcelScript!
  fullName: getDefaultTimelineStyle()
  summary: 获取父对象范围的默认时间线样式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDefaultTimelineStyle(): TimelineStyle;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" />
      description: ''
- name: getFirstWorksheet(visibleOnly)
  uid: ExcelScript!ExcelScript.Workbook#getFirstWorksheet:member(1)
  package: ExcelScript!
  fullName: getFirstWorksheet(visibleOnly)
  summary: 获取集合中的第一个工作表。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFirstWorksheet(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: 可选。 如果 `true`<!-- -->，仅考虑可见的工作表，跳过任何隐藏的工作表。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getIsDirty()
  uid: ExcelScript!ExcelScript.Workbook#getIsDirty:member(1)
  package: ExcelScript!
  fullName: getIsDirty()
  summary: 指定自上次保存工作簿以来是否进行了更改。 如果想要关闭修改后的工作簿而不保存工作簿或提示保存它，则可以将此属性 `true` 设置为。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIsDirty(): boolean;'
    return:
      type: boolean
      description: ''
- name: getLastWorksheet(visibleOnly)
  uid: ExcelScript!ExcelScript.Workbook#getLastWorksheet:member(1)
  package: ExcelScript!
  fullName: getLastWorksheet(visibleOnly)
  summary: 获取集合中的最后一个工作表。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastWorksheet(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: 可选。 如果 `true`<!-- -->，仅考虑可见的工作表，跳过任何隐藏的工作表。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: getLinkedWorkbookByUrl(key)
  uid: ExcelScript!ExcelScript.Workbook#getLinkedWorkbookByUrl:member(1)
  package: ExcelScript!
  fullName: getLinkedWorkbookByUrl(key)
  summary: 按其 URL 获取有关链接工作簿的信息。 如果工作簿不存在，则此方法返回一个对象，其 `isNullObject` 属性设置为 `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLinkedWorkbookByUrl(key: string): LinkedWorkbook | undefined;'
    parameters:
    - id: key
      description: 链接工作簿的 URL。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.LinkedWorkbook:interface" /> | undefined
      description: ''
- name: getLinkedWorkbookRefreshMode()
  uid: ExcelScript!ExcelScript.Workbook#getLinkedWorkbookRefreshMode:member(1)
  package: ExcelScript!
  fullName: getLinkedWorkbookRefreshMode()
  summary: 表示工作簿链接的更新模式。 工作簿中存在的所有工作簿链接的模式相同。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLinkedWorkbookRefreshMode(): WorkbookLinksRefreshMode;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.WorkbookLinksRefreshMode:enum" />
      description: ''
- name: getLinkedWorkbooks()
  uid: ExcelScript!ExcelScript.Workbook#getLinkedWorkbooks:member(1)
  package: ExcelScript!
  fullName: getLinkedWorkbooks()
  summary: 返回链接工作簿的集合。 在公式中，工作簿链接可用于引用当前工作簿外部) 的单元格值和名称 (数据。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLinkedWorkbooks(): LinkedWorkbook[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.LinkedWorkbook:interface" />[]
      description: ''
- name: getName()
  uid: ExcelScript!ExcelScript.Workbook#getName:member(1)
  package: ExcelScript!
  fullName: getName()
  summary: 获取工作簿名称。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getName(): string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script logs the name of the workbook without the \".xlsx\" extension.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the workbook's name.\n  let name = workbook.getName();\n\n  // Remove the file extension.\n  name = name.substring(0, name.lastIndexOf(\".xlsx\"));\n\n  // Display the name in the console.\n  console.log(name);\n}\n```"
- name: getNamedItem(name)
  uid: ExcelScript!ExcelScript.Workbook#getNamedItem:member(1)
  package: ExcelScript!
  fullName: getNamedItem(name)
  summary: '`NamedItem`使用其名称获取对象。 如果对象不存在，则此方法返回 `undefined`<!-- -->.'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNamedItem(name: string): NamedItem | undefined;'
    parameters:
    - id: name
      description: Nameditem 名称。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" /> | undefined
      description: ''
- name: getNames()
  uid: ExcelScript!ExcelScript.Workbook#getNames:member(1)
  package: ExcelScript!
  fullName: getNames()
  summary: 表示 (命名范围和常量) 的工作簿范围命名项的集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNames(): NamedItem[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.NamedItem:interface" />[]
      description: ''
- name: getPivotTable(name)
  uid: ExcelScript!ExcelScript.Workbook#getPivotTable:member(1)
  package: ExcelScript!
  fullName: getPivotTable(name)
  summary: 按名称获取 PivotTable 对象。 如果数据透视表不存在，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTable(name: string): PivotTable | undefined;'
    parameters:
    - id: name
      description: 要检索的数据透视表的名称。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" /> | undefined
      description: ''
- name: getPivotTables()
  uid: ExcelScript!ExcelScript.Workbook#getPivotTables:member(1)
  package: ExcelScript!
  fullName: getPivotTables()
  summary: 表示一组与 workbook 相关联的 PivotTable 对象。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTables(): PivotTable[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" />[]
      description: ''
- name: getPivotTableStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: getPivotTableStyle(name)
  summary: 获取一个 `PivotTableStyle` 按名称。 `PivotTableStyle`如果不存在，则此方法返回`undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTableStyle(name: string): PivotTableStyle | undefined;'
    parameters:
    - id: name
      description: 要检索的数据透视表样式的名称。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" /> | undefined
      description: ''
- name: getPivotTableStyles()
  uid: ExcelScript!ExcelScript.Workbook#getPivotTableStyles:member(1)
  package: ExcelScript!
  fullName: getPivotTableStyles()
  summary: 表示一组与工作簿相关联的 PivotTableStyles。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTableStyles(): PivotTableStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTableStyle:interface" />[]
      description: ''
- name: getPredefinedCellStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: getPredefinedCellStyle(name)
  summary: 获取一个 `Style` 按名称。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPredefinedCellStyle(name: string): PredefinedCellStyle;'
    parameters:
    - id: name
      description: 要检索的样式的名称。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.PredefinedCellStyle:interface" />
      description: ''
- name: getPredefinedCellStyles()
  uid: ExcelScript!ExcelScript.Workbook#getPredefinedCellStyles:member(1)
  package: ExcelScript!
  fullName: getPredefinedCellStyles()
  summary: 表示与工作簿关联的样式的集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPredefinedCellStyles(): PredefinedCellStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PredefinedCellStyle:interface" />[]
      description: ''
- name: getPreviouslySaved()
  uid: ExcelScript!ExcelScript.Workbook#getPreviouslySaved:member(1)
  package: ExcelScript!
  fullName: getPreviouslySaved()
  summary: 指定工作簿是已在本地保存还是联机保存。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreviouslySaved(): boolean;'
    return:
      type: boolean
      description: ''
- name: getProperties()
  uid: ExcelScript!ExcelScript.Workbook#getProperties:member(1)
  package: ExcelScript!
  fullName: getProperties()
  summary: 获取工作簿属性。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProperties(): DocumentProperties;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DocumentProperties:interface" />
      description: ''
- name: getProtection()
  uid: ExcelScript!ExcelScript.Workbook#getProtection:member(1)
  package: ExcelScript!
  fullName: getProtection()
  summary: 返回工作簿的保护对象。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProtection(): WorkbookProtection;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.WorkbookProtection:interface" />
      description: ''
- name: getReadOnly()
  uid: ExcelScript!ExcelScript.Workbook#getReadOnly:member(1)
  package: ExcelScript!
  fullName: getReadOnly()
  summary: 如果工作簿在只读模式下打开，则返回 `true` 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getReadOnly(): boolean;'
    return:
      type: boolean
      description: ''
- name: getSelectedRange()
  uid: ExcelScript!ExcelScript.Workbook#getSelectedRange:member(1)
  package: ExcelScript!
  fullName: getSelectedRange()
  summary: 从工作簿中获取当前选定的单个范围。 如果选择了多个范围，则此方法将引发错误。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRange(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSelectedRanges()
  uid: ExcelScript!ExcelScript.Workbook#getSelectedRanges:member(1)
  package: ExcelScript!
  fullName: getSelectedRanges()
  summary: 从工作簿中获取当前选定的一个或多个区域。 与 `getSelectedRange()`<!-- -->，此方法返回一个 `RangeAreas` 对象，该对象表示所有选定区域。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRanges(): RangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getSlicer(key)
  uid: ExcelScript!ExcelScript.Workbook#getSlicer:member(1)
  package: ExcelScript!
  fullName: getSlicer(key)
  summary: 使用其名称或 ID 获取切片器。 如果切片器不存在，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicer(key: string): Slicer | undefined;'
    parameters:
    - id: key
      description: 要检索的切片器的名称或 ID。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" /> | undefined
      description: ''
- name: getSlicers()
  uid: ExcelScript!ExcelScript.Workbook#getSlicers:member(1)
  package: ExcelScript!
  fullName: getSlicers()
  summary: 表示与工作簿关联的切片器集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicers(): Slicer[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Slicer:interface" />[]
      description: ''
- name: getSlicerStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getSlicerStyle:member(1)
  package: ExcelScript!
  fullName: getSlicerStyle(name)
  summary: 获取一个 `SlicerStyle` 按名称。 如果切片器样式不存在，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicerStyle(name: string): SlicerStyle | undefined;'
    parameters:
    - id: name
      description: 要检索的切片器样式的名称。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" /> | undefined
      description: ''
- name: getSlicerStyles()
  uid: ExcelScript!ExcelScript.Workbook#getSlicerStyles:member(1)
  package: ExcelScript!
  fullName: getSlicerStyles()
  summary: 表示一组与工作簿相关联的 SlicerStyles。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSlicerStyles(): SlicerStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" />[]
      description: ''
- name: getTable(key)
  uid: ExcelScript!ExcelScript.Workbook#getTable:member(1)
  package: ExcelScript!
  fullName: getTable(key)
  summary: 按名称或 ID 获取表。 如果表不存在，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTable(key: string): Table | undefined;'
    parameters:
    - id: key
      description: 要检索的表的名称或 ID。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" /> | undefined
      description: ''
- name: getTables()
  uid: ExcelScript!ExcelScript.Workbook#getTables:member(1)
  package: ExcelScript!
  fullName: getTables()
  summary: 表示与工作簿关联的表的集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTables(): Table[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" />[]
      description: ''
- name: getTableStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getTableStyle:member(1)
  package: ExcelScript!
  fullName: getTableStyle(name)
  summary: 获取一个 `TableStyle` 按名称。 如果表样式不存在，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTableStyle(name: string): TableStyle | undefined;'
    parameters:
    - id: name
      description: 要检索的表样式的名称。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" /> | undefined
      description: ''
- name: getTableStyles()
  uid: ExcelScript!ExcelScript.Workbook#getTableStyles:member(1)
  package: ExcelScript!
  fullName: getTableStyles()
  summary: 表示一组与工作簿相关联的 TableStyles。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTableStyles(): TableStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" />[]
      description: ''
- name: getTimelineStyle(name)
  uid: ExcelScript!ExcelScript.Workbook#getTimelineStyle:member(1)
  package: ExcelScript!
  fullName: getTimelineStyle(name)
  summary: 获取一个 `TimelineStyle` 按名称。 如果时间线样式不存在，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTimelineStyle(name: string): TimelineStyle | undefined;'
    parameters:
    - id: name
      description: 要检索的时间线样式的名称。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" /> | undefined
      description: ''
- name: getTimelineStyles()
  uid: ExcelScript!ExcelScript.Workbook#getTimelineStyles:member(1)
  package: ExcelScript!
  fullName: getTimelineStyles()
  summary: 表示一组与工作簿相关联的 TimelineStyles。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTimelineStyles(): TimelineStyle[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" />[]
      description: ''
- name: getUsePrecisionAsDisplayed()
  uid: ExcelScript!ExcelScript.Workbook#getUsePrecisionAsDisplayed:member(1)
  package: ExcelScript!
  fullName: getUsePrecisionAsDisplayed()
  summary: 如果此工作簿中的计算仅使用显示的数字精度来完成，则为 True。 将此属性切换 `false` 到 `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsePrecisionAsDisplayed(): boolean;'
    return:
      type: boolean
      description: ''
- name: getWorksheet(key)
  uid: ExcelScript!ExcelScript.Workbook#getWorksheet:member(1)
  package: ExcelScript!
  fullName: getWorksheet(key)
  summary: 使用其名称或 ID 获取 worksheet 对象。 如果工作表不存在，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWorksheet(key: string): Worksheet | undefined;'
    parameters:
    - id: key
      description: 工作表的名称或 ID。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script switches the active view to a worksheet named \"Data\", if it exists.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Check if the \"Data\" worksheet exists.\n  let dataWorksheet = workbook.getWorksheet(\"Data\");\n  if (dataWorksheet) {\n    // Switch to the \"Data\" worksheet.\n    dataWorksheet.activate();\n  } else {\n    console.log(`No worksheet named \"Data\" in this workbook.`);\n  }\n}\n```"
- name: getWorksheets()
  uid: ExcelScript!ExcelScript.Workbook#getWorksheets:member(1)
  package: ExcelScript!
  fullName: getWorksheets()
  summary: 表示与工作簿关联的工作表的集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWorksheets(): Worksheet[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />[]
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script logs the names of all the worksheets in the workbook.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get all the worksheets in the workbook. \n  let sheets = workbook.getWorksheets();\n\n  // Get a list of all the worksheet names.\n  let names = sheets.map ((sheet) => sheet.getName());\n\n  // Write in the console all the worksheet names and the total count.\n  console.log(names);\n  console.log(`Total worksheets inside of this workbook: ${sheets.length}`);\n}\n```"
- name: refreshAllDataConnections()
  uid: ExcelScript!ExcelScript.Workbook#refreshAllDataConnections:member(1)
  package: ExcelScript!
  fullName: refreshAllDataConnections()
  summary: 刷新所有数据连接。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refreshAllDataConnections(): void;'
    return:
      type: void
      description: ''
- name: refreshAllLinksToLinkedWorkbooks()
  uid: ExcelScript!ExcelScript.Workbook#refreshAllLinksToLinkedWorkbooks:member(1)
  package: ExcelScript!
  fullName: refreshAllLinksToLinkedWorkbooks()
  summary: 发出请求以刷新所有工作簿链接。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refreshAllLinksToLinkedWorkbooks(): void;'
    return:
      type: void
      description: ''
- name: refreshAllPivotTables()
  uid: ExcelScript!ExcelScript.Workbook#refreshAllPivotTables:member(1)
  package: ExcelScript!
  fullName: refreshAllPivotTables()
  summary: 刷新集合中的所有数据透视表。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'refreshAllPivotTables(): void;'
    return:
      type: void
      description: ''
- name: setChartDataPointTrack(chartDataPointTrack)
  uid: ExcelScript!ExcelScript.Workbook#setChartDataPointTrack:member(1)
  package: ExcelScript!
  fullName: setChartDataPointTrack(chartDataPointTrack)
  summary: 如果工作簿中的所有图表都跟踪它们所附加的实际数据点，则为 True。 如果图表跟踪数据点的索引，则为 False。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setChartDataPointTrack(chartDataPointTrack: boolean): void;'
    parameters:
    - id: chartDataPointTrack
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setDefaultPivotTableStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultPivotTableStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultPivotTableStyle(newDefaultStyle)
  summary: 设置要在父对象的作用域中使用的默认数据透视表样式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      setDefaultPivotTableStyle(
                  newDefaultStyle: PivotTableStyle | string
              ): void;
    parameters:
    - id: newDefaultStyle
      description: 应 `PivotTableStyle` 为新默认值的 `PivotTableStyle` 对象或对象的名称。
      type: "<xref uid=\"ExcelScript!ExcelScript.PivotTableStyle:interface\" /> | string\n        "
    return:
      type: void
      description: ''
- name: setDefaultSlicerStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultSlicerStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultSlicerStyle(newDefaultStyle)
  summary: 设置要在父对象的作用域中使用的默认切片器样式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDefaultSlicerStyle(newDefaultStyle: SlicerStyle | string): void;'
    parameters:
    - id: newDefaultStyle
      description: 应 `SlicerStyle` 为新默认值的 `SlicerStyle` 对象或对象的名称。
      type: <xref uid="ExcelScript!ExcelScript.SlicerStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setDefaultTableStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultTableStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultTableStyle(newDefaultStyle)
  summary: 设置要在父对象的作用域中使用的默认表样式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDefaultTableStyle(newDefaultStyle: TableStyle | string): void;'
    parameters:
    - id: newDefaultStyle
      description: 应 `TableStyle` 为新默认值的 `TableStyle` 对象或对象的名称。
      type: <xref uid="ExcelScript!ExcelScript.TableStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setDefaultTimelineStyle(newDefaultStyle)
  uid: ExcelScript!ExcelScript.Workbook#setDefaultTimelineStyle:member(1)
  package: ExcelScript!
  fullName: setDefaultTimelineStyle(newDefaultStyle)
  summary: 设置要在父对象的作用域中使用的默认时间线样式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDefaultTimelineStyle(newDefaultStyle: TimelineStyle | string): void;'
    parameters:
    - id: newDefaultStyle
      description: 应 `TimelineStyle` 为新默认值的 `TimelineStyle` 对象或对象的名称。
      type: <xref uid="ExcelScript!ExcelScript.TimelineStyle:interface" /> | string
    return:
      type: void
      description: ''
- name: setIsDirty(isDirty)
  uid: ExcelScript!ExcelScript.Workbook#setIsDirty:member(1)
  package: ExcelScript!
  fullName: setIsDirty(isDirty)
  summary: 指定自上次保存工作簿以来是否进行了更改。 如果想要关闭修改后的工作簿而不保存工作簿或提示保存它，则可以将此属性 `true` 设置为。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setIsDirty(isDirty: boolean): void;'
    parameters:
    - id: isDirty
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setLinkedWorkbookRefreshMode(linkedWorkbookRefreshMode)
  uid: ExcelScript!ExcelScript.Workbook#setLinkedWorkbookRefreshMode:member(1)
  package: ExcelScript!
  fullName: setLinkedWorkbookRefreshMode(linkedWorkbookRefreshMode)
  summary: 表示工作簿链接的更新模式。 工作簿中存在的所有工作簿链接的模式相同。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      setLinkedWorkbookRefreshMode(
                  linkedWorkbookRefreshMode: WorkbookLinksRefreshMode
              ): void;
    parameters:
    - id: linkedWorkbookRefreshMode
      description: ''
      type: <xref uid="ExcelScript!ExcelScript.WorkbookLinksRefreshMode:enum" />
    return:
      type: void
      description: ''
- name: setUsePrecisionAsDisplayed(usePrecisionAsDisplayed)
  uid: ExcelScript!ExcelScript.Workbook#setUsePrecisionAsDisplayed:member(1)
  package: ExcelScript!
  fullName: setUsePrecisionAsDisplayed(usePrecisionAsDisplayed)
  summary: 如果此工作簿中的计算仅使用显示的数字精度来完成，则为 True。 将此属性切换 `false` 到 `true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setUsePrecisionAsDisplayed(usePrecisionAsDisplayed: boolean): void;'
    parameters:
    - id: usePrecisionAsDisplayed
      description: ''
      type: boolean
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: c59ddc105a519d4e120bc94d88f0c99817598214
  ms.sourcegitcommit: 550121614d5022da564dc035c9550a7aca2c31c5
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 05/13/2022
  ms.locfileid: "65394014"
