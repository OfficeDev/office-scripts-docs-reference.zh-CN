### YamlMime:TSType
name: ExcelScript.Range
uid: ExcelScript!ExcelScript.Range:interface
package: ExcelScript!
fullName: ExcelScript.Range
summary: Range 表示一组或多个连续单元格，例如单元格、行、列或单元格块。
remarks: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script logs the address of the used range in the current worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current, active worksheet.\n  let currentWorksheet = workbook.getActiveWorksheet();\n\n  // Get the range containing all the cells with data or formatting.\n  let usedRange = currentWorksheet.getUsedRange();\n\n  // Log the range's address to the console.\n  console.log(usedRange.getAddress());\n}\n```"
isPreview: false
isDeprecated: false
type: interface
methods:
- name: addConditionalFormat(type)
  uid: ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)
  package: ExcelScript!
  fullName: addConditionalFormat(type)
  summary: 将新的条件格式添加到集合的第一/首要优先级。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
    parameters:
    - id: type
      description: 要添加的条件格式的类型。 有关详细信息，请参阅 `ExcelScript.ConditionalFormatType`。
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormatType:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This sample applies conditional formatting to the currently used range in the worksheet. \n * The conditional formatting is a green fill for the top 10% of values.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current worksheet.\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Get the used range in the worksheet.\n  let range = selectedSheet.getUsedRange();\n\n  // Set the fill color to green for the top 10% of values in the range.\n  let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)\n  conditionalFormat.getTopBottom().getFormat().getFill().setColor(\"green\");\n  conditionalFormat.getTopBottom().setRule({\n    rank: 10, // The percentage threshold.\n    type: ExcelScript.ConditionalTopBottomCriterionType.topPercent // The type of the top/bottom condition.\n  });\n}\n```"
- name: autoFill(destinationRange, autoFillType)
  uid: ExcelScript!ExcelScript.Range#autoFill:member(1)
  package: ExcelScript!
  fullName: autoFill(destinationRange, autoFillType)
  summary: 使用指定的自动填充逻辑填充从当前范围到目标范围的范围。 目标范围可以 `null` 或可以水平或垂直扩展源范围。 不支持不连续的范围。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      autoFill(
                  destinationRange?: Range | string,
                  autoFillType?: AutoFillType
              ): void;
    parameters:
    - id: destinationRange
      description: 自动填充的目标范围。 如果目标范围为 `null`<!-- -->，数据根据周围的单元格填充 (这是双击 UI 的范围填充句柄) 时的行为。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    - id: autoFillType
      description: 自动填充的类型。 根据当前范围的内容指定如何填充目标范围。 默认值为“FillDefault”。
      type: <xref uid="ExcelScript!ExcelScript.AutoFillType:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script uses the autofill feature to complete a table.\n * See https://support.microsoft.com/74e31bdd-d993-45da-aa82-35a236c5b5db\n * for examples of autofill scenarios.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current, active worksheet.\n  let currentWorksheet = workbook.getActiveWorksheet();\n\n  // Get the data range that shows the pattern.\n  let dataRange = currentWorksheet.getRange(\"C2:C3\");\n\n  // Autofill the connected range. C2:C3 are filled in. C4:C14 are blank.\n  // This uses the default behavior to match a pattern with the table's contents.\n  dataRange.autoFill(\"C2:C14\");\n}\n```"
- name: calculate()
  uid: ExcelScript!ExcelScript.Range#calculate:member(1)
  package: ExcelScript!
  fullName: calculate()
  summary: 计算工作表上的单元格区域。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script recalculates the used range of a specific worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Only recalculate if the calculation mode is not set to automatic.\n  if (workbook.getApplication().getCalculationMode() !== ExcelScript.CalculationMode.automatic) {\n    // Get the used range from a worksheet named \"Monthly Report\".\n    let sheet = workbook.getWorksheet(\"Monthly Report\");\n    let range = sheet.getUsedRange();\n    console.log(`Calculating ${range.getAddress()}`);\n\n    // Force all the used cells in that worksheet to calculate.\n    sheet.getUsedRange().calculate();\n  }\n}\n```"
- name: clear(applyTo)
  uid: ExcelScript!ExcelScript.Range#clear:member(1)
  package: ExcelScript!
  fullName: clear(applyTo)
  summary: 清除区域值、格式、填充、边框等。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(applyTo?: ClearApplyTo): void;'
    parameters:
    - id: applyTo
      description: 可选。 确定清除操作的类型。 有关详细信息，请参阅 `ExcelScript.ClearApplyTo`。
      type: <xref uid="ExcelScript!ExcelScript.ClearApplyTo:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script removes all the formatting from the selected range.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the selected range.\n  let range = workbook.getSelectedRange();\n\n  // Clear all the formatting in that range.\n  range.clear(ExcelScript.ClearApplyTo.formats);\n}\n```"
- name: clearAllConditionalFormats()
  uid: ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)
  package: ExcelScript!
  fullName: clearAllConditionalFormats()
  summary: 清除当前指定区域中处于活动状态的所有条件格式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clearAllConditionalFormats(): void;'
    return:
      type: void
      description: ''
- name: convertDataTypeToText()
  uid: ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)
  package: ExcelScript!
  fullName: convertDataTypeToText()
  summary: 将包含数据类型的区域单元格转换为文本。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'convertDataTypeToText(): void;'
    return:
      type: void
      description: ''
- name: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  uid: ExcelScript!ExcelScript.Range#copyFrom:member(1)
  package: ExcelScript!
  fullName: copyFrom(sourceRange, copyType, skipBlanks, transpose)
  summary: 从源范围或当前范围复制单元格数据或 `RangeAreas` 格式。 目标范围的大小可能不同于源范围或 `RangeAreas`<!-- -->. 如果目标小于源，则会自动扩展目标。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      copyFrom(
                  sourceRange: Range | RangeAreas | string,
                  copyType?: RangeCopyType,
                  skipBlanks?: boolean,
                  transpose?: boolean
              ): void;
    parameters:
    - id: sourceRange
      description: 源范围或 `RangeAreas` 要从中复制。 当源 `RangeAreas` 具有多个范围时，必须能够通过从矩形范围中删除完整行或列来创建其窗体。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" /> | string
    - id: copyType
      description: 要复制的单元格数据或格式的类型。 默认值为“All”。
      type: <xref uid="ExcelScript!ExcelScript.RangeCopyType:enum" />
    - id: skipBlanks
      description: 如此 如果跳过源区域中的空白单元格。 默认为 false。
      type: boolean
    - id: transpose
      description: 如果要转置目标区域中的单元格，则为 True。 默认为 false。
      type: boolean
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script copies a table from one worksheet to a new worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the worksheet named \"TableTemplate\".\n  let base = workbook.getWorksheet(\"TableTemplate\");\n  \n  // Get the range to be copied based on the first table.\n  let tableRange = base.getTables()[0].getRange();\n\n  // Get the area in a new worksheet for the new table.\n  let newWorksheet = workbook.addWorksheet();\n  let newRange = newWorksheet.getRangeByIndexes(0,0, tableRange.getRowCount(), tableRange.getColumnCount());\n\n  // Copy the existing data into the new range.\n  newRange.copyFrom(tableRange);\n}\n```"
- name: delete(shift)
  uid: ExcelScript!ExcelScript.Range#delete:member(1)
  package: ExcelScript!
  fullName: delete(shift)
  summary: 删除与区域相关的单元格。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(shift: DeleteShiftDirection): void;'
    parameters:
    - id: shift
      description: 指定移动单元格的方式。 有关详细信息，请参阅 `ExcelScript.DeleteShiftDirection`。
      type: <xref uid="ExcelScript!ExcelScript.DeleteShiftDirection:enum" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This sample creates a sample range, then deletes\n * \"A1\" using different DeleteShiftDirection values.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Add sample data to better visualize the delete changes.\n  const currentSheet = workbook.getActiveWorksheet();\n  currentSheet.getRange(\"A1:D4\").setValues([\n    [1,2,3,4],\n    [5,6,7,8],\n    [9,10,11,12],\n    [13,14,15,16]]);\n\n  // Delete A1 and shift the cells from the right to fill the space.\n  // The value being deleted is 1.\n  currentSheet.getRange(\"A1\").delete(ExcelScript.DeleteShiftDirection.left);\n\n  // Delete A1 and shift the cells from the bottom to fill the space.\n  // The value being deleted is 2.\n  currentSheet.getRange(\"A1\").delete(ExcelScript.DeleteShiftDirection.up);\n\n  // Log the sample range. The values should be:\n  /*\n    5, 3, 4, \"\",\n    9, 6, 7, 8,\n    13, 10, 11, 12,\n    \"\", 14, 15, 16\n  */\n  console.log(currentSheet.getRange(\"A1:D4\").getValues()); \n}\n```"
- name: find(text, criteria)
  uid: ExcelScript!ExcelScript.Range#find:member(1)
  package: ExcelScript!
  fullName: find(text, criteria)
  summary: 根据指定的条件查找给定的字符串。 如果当前范围大于单个单元格，则搜索将限制为该区域，否则搜索将涵盖从该单元格之后开始的整个工作表。 如果没有匹配项，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'find(text: string, criteria: SearchCriteria): Range;'
    parameters:
    - id: text
      description: 要查找的字符串。
      type: string
    - id: criteria
      description: 其他搜索条件，包括搜索方向以及搜索是否需要匹配整个单元格或区分大小写。
      type: <xref uid="ExcelScript!ExcelScript.SearchCriteria:interface" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script searches through a table column and finds cells marked \"no change\". \n * Those cells have \"no change\" replaced with the value from the cell to the left.\n * This script uses Range.find instead of Worksheet.findAll \n * to limit the search to a specific range.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the range of a table named \"Orders\".\n  let table = workbook.getTable(\"Orders\");\n  let range = table.getColumnByName(\"March\").getRange();\n\n  // Find all cells with the value \"no change\".\n  let cellToOverwrite = range.find(\"no change\", { completeMatch: true });\n  while (cellToOverwrite) {\n    let cellToCopyFrom = cellToOverwrite.getOffsetRange(0,-1);\n    cellToOverwrite.setValue(cellToCopyFrom.getValue());\n    cellToOverwrite = range.find(\"no change\", { completeMatch: true });\n  }\n}\n```"
- name: flashFill()
  uid: ExcelScript!ExcelScript.Range#flashFill:member(1)
  package: ExcelScript!
  fullName: flashFill()
  summary: 对当前范围执行闪存填充。 闪存填充在感知模式时会自动填充数据，因此该范围必须是单列范围，并且其周围包含数据才能找到模式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'flashFill(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script uses the Flash Fill feature to complete a table.\n * See https://support.microsoft.com/office/3f9bcf1e-db93-4890-94a0-1578341f73f7\n * for the example table.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current, active worksheet.\n  let currentWorksheet = workbook.getActiveWorksheet();\n\n  // Get the data range with a pattern and cells to fill. C2 is filled in. C3:C6 are blank.\n  let dataRange = currentWorksheet.getRange(\"C2:C6\");\n\n  // Flash fill the connected range. \n  dataRange.flashFill();\n}\n```"
- name: getAbsoluteResizedRange(numRows, numColumns)
  uid: ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)
  package: ExcelScript!
  fullName: getAbsoluteResizedRange(numRows, numColumns)
  summary: 获取一个 `Range` 对象，该对象的左上角单元格与当前 `Range` 对象相同，但具有指定的行数和列数。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
    parameters:
    - id: numRows
      description: 新范围大小的行数。
      type: number
    - id: numColumns
      description: 新范围大小的列数。
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getAddress()
  uid: ExcelScript!ExcelScript.Range#getAddress:member(1)
  package: ExcelScript!
  fullName: getAddress()
  summary: 指定 A1 样式的范围引用。 地址值包含工作表引用 (例如“Sheet1！A1：B4“) 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAddress(): string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script logs the address of the used range in each worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Iterate over every worksheet in the workbook.\n  workbook.getWorksheets().forEach((sheet) => {\n    // Get the used range for a single worksheet.\n    let range = sheet.getUsedRange();\n\n    // Print the address of the used range to the console.\n    console.log(range.getAddress());\n  });\n}\n```"
- name: getAddressLocal()
  uid: ExcelScript!ExcelScript.Range#getAddressLocal:member(1)
  package: ExcelScript!
  fullName: getAddressLocal()
  summary: 表示用户语言中指定范围的范围引用。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAddressLocal(): string;'
    return:
      type: string
      description: ''
- name: getBoundingRect(anotherRange)
  uid: ExcelScript!ExcelScript.Range#getBoundingRect:member(1)
  package: ExcelScript!
  fullName: getBoundingRect(anotherRange)
  summary: 获取包含指定区域的最小 range 对象。 例如，“ `GetBoundingRect` B2：C5”和“D10：E15”为“B2：E15”。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getBoundingRect(anotherRange: Range | string): Range;'
    parameters:
    - id: anotherRange
      description: range 对象、地址或范围名称。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script gets the bounding range of two existing ranges and puts a border around it.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current worksheet.\n  let sheet = workbook.getActiveWorksheet();\n\n  // Create two range objects for the sample.\n  let range1 = sheet.getRange(\"B2:C5\");\n  let range2 = sheet.getRange(\"D10:E15\");\n\n  // Get the rectangular range that fully includes both ranges.\n  let boundingRectangle = range1.getBoundingRect(range2);\n\n  // Add a border around the whole bounding range (B2:E15).\n  let borders = boundingRectangle.getFormat().getBorders();\n  format.getRangeBorder(ExcelScript.BorderIndex.edgeTop).setStyle(ExcelScript.BorderLineStyle.continuous); // Top border\n  format.getRangeBorder(ExcelScript.BorderIndex.edgeBottom).setStyle(ExcelScript.BorderLineStyle.continuous); // Bottom border\n  format.getRangeBorder(ExcelScript.BorderIndex.edgeLeft).setStyle(ExcelScript.BorderLineStyle.continuous); // Left border\n  format.getRangeBorder(ExcelScript.BorderIndex.edgeRight).setStyle(ExcelScript.BorderLineStyle.continuous); // Right border\n}\n```"
- name: getCell(row, column)
  uid: ExcelScript!ExcelScript.Range#getCell:member(1)
  package: ExcelScript!
  fullName: getCell(row, column)
  summary: 根据行和列编号获取包含单个单元格的 range 对象。 只要单元格位于工作表网格内，该单元格就可以超出其父范围的边界。 返回的单元格位于相对于区域左上角的单元格的位置。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Range;'
    parameters:
    - id: row
      description: 要检索的单元格的行号。 从零开始编制索引。
      type: number
    - id: column
      description: 要检索的单元格的列号。 从零开始编制索引。
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getCellCount()
  uid: ExcelScript!ExcelScript.Range#getCellCount:member(1)
  package: ExcelScript!
  fullName: getCellCount()
  summary: 指定区域中的单元格数。 如果单元格数超过 2^31-1 (2,147,483,647)，此 API 返回 -1。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCellCount(): number;'
    return:
      type: number
      description: ''
- name: getColumn(column)
  uid: ExcelScript!ExcelScript.Range#getColumn:member(1)
  package: ExcelScript!
  fullName: getColumn(column)
  summary: 获取范围中包含的列。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumn(column: number): Range;'
    parameters:
    - id: column
      description: 要检索的区域的列号。 从零开始编制索引。
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getColumnCount()
  uid: ExcelScript!ExcelScript.Range#getColumnCount:member(1)
  package: ExcelScript!
  fullName: getColumnCount()
  summary: 指定范围内的列总数。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnCount(): number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This sample provides the count of negative numbers that are present\n * in the used range of the current worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the working range.\n  let usedRange = workbook.getActiveWorksheet().getUsedRange();\n  let rowCount = usedRange.getRowCount();\n  let columnCount = usedRange.getColumnCount();\n\n  // Save the values locally to avoid repeatedly asking the workbook.\n  let usedRangeValues = usedRange.getValues();\n\n  // Start the negative number counter.\n  let negativeCount = 0;\n\n  // Iterate over the entire range looking for negative numbers.\n  for (let i = 0; i < rowCount; i++) {\n    for (let j = 0; j < columnCount; j++) {\n      if (usedRangeValues[i][j] < 0) {\n        negativeCount++;\n      }\n    }\n  }\n\n  // Log the negative number count to the console.\n  console.log(negativeCount);\n}\n```"
- name: getColumnHidden()
  uid: ExcelScript!ExcelScript.Range#getColumnHidden:member(1)
  package: ExcelScript!
  fullName: getColumnHidden()
  summary: 表示当前区域中的所有列是否已隐藏。 值是 `true` 隐藏某个区域中的所有列时。 值是 `false` 区域中未隐藏任何列时。 值是 `null` 当某个区域中的某些列被隐藏并且同一区域中的其他列不隐藏时。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnHidden(): boolean;'
    return:
      type: boolean
      description: ''
- name: getColumnIndex()
  uid: ExcelScript!ExcelScript.Range#getColumnIndex:member(1)
  package: ExcelScript!
  fullName: getColumnIndex()
  summary: 指定区域中第一个单元格的列号。 从零开始编制索引。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnIndex(): number;'
    return:
      type: number
      description: ''
- name: getColumnsAfter(count)
  uid: ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)
  package: ExcelScript!
  fullName: getColumnsAfter(count)
  summary: 获取当前 `Range` 对象右侧的一定数量的列。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsAfter(count?: number): Range;'
    parameters:
    - id: count
      description: 可选。生成的范围中要包含的列数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getColumnsBefore(count)
  uid: ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)
  package: ExcelScript!
  fullName: getColumnsBefore(count)
  summary: 获取当前 `Range` 对象左侧的一定数量的列。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColumnsBefore(count?: number): Range;'
    parameters:
    - id: count
      description: 可选。生成的范围中要包含的列数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getConditionalFormat(id)
  uid: ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)
  package: ExcelScript!
  fullName: getConditionalFormat(id)
  summary: 返回给定 ID 的条件格式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getConditionalFormat(id: string): ConditionalFormat;'
    parameters:
    - id: id
      description: 条件格式的 ID。
      type: string
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />
      description: ''
- name: getConditionalFormats()
  uid: ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)
  package: ExcelScript!
  fullName: getConditionalFormats()
  summary: 该集 `ConditionalFormats` 合与范围相交。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getConditionalFormats(): ConditionalFormat[];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />[]
      description: ''
- name: getDataValidation()
  uid: ExcelScript!ExcelScript.Range#getDataValidation:member(1)
  package: ExcelScript!
  fullName: getDataValidation()
  summary: 返回数据有效性对象。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataValidation(): DataValidation;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DataValidation:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script creates a drop-down selection list for a cell. It uses the existing values of the selected range as the choices for the list.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the values for data validation.\n  let selectedRange = workbook.getSelectedRange();\n  let rangeValues = selectedRange.getValues();\n\n  // Convert the values into a comma-delimited string.\n  let dataValidationListString = \"\";\n  rangeValues.forEach((rangeValueRow) => {\n    rangeValueRow.forEach((value) => {\n      dataValidationListString += value + \",\";\n    });\n  });\n\n  // Clear the old range.\n  selectedRange.clear(ExcelScript.ClearApplyTo.contents);\n\n  // Apply the data validation to the first cell in the selected range.\n  let targetCell = selectedRange.getCell(0,0);\n  let dataValidation = targetCell.getDataValidation();\n\n  // Set the content of the drop-down list.\n  dataValidation.setRule({\n      list: {\n        inCellDropDown: true,\n        source: dataValidationListString\n      }\n    });\n}\n```"
- name: getDirectPrecedents()
  uid: ExcelScript!ExcelScript.Range#getDirectPrecedents:member(1)
  package: ExcelScript!
  fullName: getDirectPrecedents()
  summary: 返回一个对象，该对象表示包含同一 `WorkbookRangeAreas` 工作表或多个工作表中单元格的所有直接先例的范围。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDirectPrecedents(): WorkbookRangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.WorkbookRangeAreas:interface" />
      description: ''
- name: getEntireColumn()
  uid: ExcelScript!ExcelScript.Range#getEntireColumn:member(1)
  package: ExcelScript!
  fullName: getEntireColumn()
  summary: 获取一个对象，该对象表示区域 (的整个列，例如，如果当前区域表示单元格“B4：E11”，则该 `getEntireColumn` 对象是表示列“B：E”) 的区域。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireColumn(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getEntireRow()
  uid: ExcelScript!ExcelScript.Range#getEntireRow:member(1)
  package: ExcelScript!
  fullName: getEntireRow()
  summary: 获取一个对象，该对象表示区域 (的整行，例如，如果当前区域表示单元格“B4：E11”，则该 `GetEntireRow` 对象是表示行“4：11”) 的区域。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntireRow(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getExtendedRange(direction, activeCell)
  uid: ExcelScript!ExcelScript.Range#getExtendedRange:member(1)
  package: ExcelScript!
  fullName: getExtendedRange(direction, activeCell)
  summary: 根据提供的方向返回一个范围对象，该对象包括当前范围和范围的边缘。 这与 Windows UI 上 Excel 中的 Ctrl+Shift+箭头键行为相匹配。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getExtendedRange(
                  direction: KeyboardDirection,
                  activeCell?: Range | string
              ): Range;
    parameters:
    - id: direction
      description: 活动单元格的方向。
      type: <xref uid="ExcelScript!ExcelScript.KeyboardDirection:enum" />
    - id: activeCell
      description: 此区域中的活动单元格。 默认情况下，活动单元格是区域的左上角单元格。 如果活动单元格不在此范围内，则会引发错误。
      type: "<xref uid=\"ExcelScript!ExcelScript.Range:interface\" /> | string\n        "
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script makes the font bold on all the contiguous cells between \n * A1 and the bottom of the used range of the first column.\n */\nfunction main(workbook: ExcelScript.Workbook)\n{\n  // Get the current worksheet.\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Get every cell that's used between A1 and the end of the column.\n  // This recreates the Ctrl+Shift+Down arrow key behavior.\n  let firstCell = selectedSheet.getRange(\"A1\");\n  let firstColumn = firstCell.getExtendedRange(ExcelScript.KeyboardDirection.down);\n\n  // Set the font to bold in that range.\n  firstColumn.getFormat().getFont().setBold(true);\n}\n```"
- name: getFormat()
  uid: ExcelScript!ExcelScript.Range#getFormat:member(1)
  package: ExcelScript!
  fullName: getFormat()
  summary: 返回一个格式对象，其中封装了区域的字体、填充、边框、对齐方式和其他属性。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormat(): RangeFormat;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeFormat:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script gives the total row of a table a green color fill.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the first table in the workbook.\n  let table = workbook.getTables()[0];\n\n  // Get the range for the total row of the table.\n  let totalRange = table.getTotalRowRange();\n\n  // Set the fill color to green.\n  totalRange.getFormat().getFill().setColor(\"green\");\n}\n```"
- name: getFormula()
  uid: ExcelScript!ExcelScript.Range#getFormula:member(1)
  package: ExcelScript!
  fullName: getFormula()
  summary: 表示 A1 样式表示法中的单元格公式。 如果区域包含多个单元格，则将返回第一个单元格中的数据 (由行索引 0 表示，列索引为 0) 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormula(): string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/*\n * This script sets a cell's formula, \n * then displays how Excel stores the cell's formula and value separately.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Set A1 to 2.\n  let a1 = selectedSheet.getRange(\"A1\");\n  a1.setValue(2);\n\n  // Set B1 to the formula =(2*A1), which should equal 4.\n  let b1 = selectedSheet.getRange(\"B1\")\n  b1.setFormula(\"=(2*A1)\");\n\n  // Log the current results for `getFormula` and `getValue` at B1.\n  console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);\n}\n```"
- name: getFormulaLocal()
  uid: ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)
  package: ExcelScript!
  fullName: getFormulaLocal()
  summary: 以用户的语言和数字格式区域设置表示 A1 样式表示法表示单元格公式。 例如，英语中的公式 "=SUM(A1, 1.5)" 在德语中将变为 "=SUMME(A1; 1,5)"。 如果区域包含多个单元格，则将返回第一个单元格中的数据 (由行索引 0 表示，列索引为 0) 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulaLocal(): string;'
    return:
      type: string
      description: ''
- name: getFormulaR1C1()
  uid: ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)
  package: ExcelScript!
  fullName: getFormulaR1C1()
  summary: 表示 R1C1 样式表示法中的单元格公式。 如果区域包含多个单元格，则将返回第一个单元格中的数据 (由行索引 0 表示，列索引为 0) 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulaR1C1(): string;'
    return:
      type: string
      description: ''
- name: getFormulas()
  uid: ExcelScript!ExcelScript.Range#getFormulas:member(1)
  package: ExcelScript!
  fullName: getFormulas()
  summary: 表示采用 A1 表示法的公式。 如果单元格没有公式，则返回其值。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulas(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getFormulasLocal()
  uid: ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)
  package: ExcelScript!
  fullName: getFormulasLocal()
  summary: 表示采用 A1 样式表示法的公式，使用用户的语言和数字格式区域设置。 例如，英语中的公式 "=SUM(A1, 1.5)" 在德语中将变为 "=SUMME(A1; 1,5)"。 如果单元格没有公式，则返回其值。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulasLocal(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getFormulasR1C1()
  uid: ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)
  package: ExcelScript!
  fullName: getFormulasR1C1()
  summary: 表示采用 R1C1 样式表示法的公式。 如果单元格没有公式，则返回其值。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFormulasR1C1(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getHasSpill()
  uid: ExcelScript!ExcelScript.Range#getHasSpill:member(1)
  package: ExcelScript!
  fullName: getHasSpill()
  summary: 表示所有单元格是否都具有溢出边框。 如果所有单元格都有溢出边框，或者`false`所有单元格没有溢出边框，则返回`true`。 如果区域内有带和无溢出边框的单元格，则返回 `null` 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHasSpill(): boolean;'
    return:
      type: boolean
      description: ''
- name: getHeight()
  uid: ExcelScript!ExcelScript.Range#getHeight:member(1)
  package: ExcelScript!
  fullName: getHeight()
  summary: 返回距离（以磅为单位）（以 100% 缩放为单位），从范围的上边缘到范围的下边缘。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHeight(): number;'
    return:
      type: number
      description: ''
- name: getHidden()
  uid: ExcelScript!ExcelScript.Range#getHidden:member(1)
  package: ExcelScript!
  fullName: getHidden()
  summary: 表示当前区域中的所有单元格是否已隐藏。 值是 `true` 隐藏区域中的所有单元格时。 值是 `false` 当区域中没有隐藏单元格时。 值是 `null` 当某个区域中的某些单元格处于隐藏状态且同一区域中的其他单元格不隐藏时。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHidden(): boolean;'
    return:
      type: boolean
      description: ''
- name: getHyperlink()
  uid: ExcelScript!ExcelScript.Range#getHyperlink:member(1)
  package: ExcelScript!
  fullName: getHyperlink()
  summary: 表示当前范围的超链接。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getHyperlink(): RangeHyperlink;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeHyperlink:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This sample clears all of the hyperlinks from the current worksheet\n * and removes the usual hyperlink formatting.\n */\nfunction main(workbook: ExcelScript.Workbook, sheetName: string = 'Sheet1') {\n  // Get the active worksheet. \n  let sheet = workbook.getWorksheet(sheetName);\n\n  // Get the used range to operate on.\n  // For large ranges (over 10000 entries), consider splitting the operation into batches for performance.\n  const targetRange = sheet.getUsedRange(true);\n  console.log(`Target Range to clear hyperlinks from: ${targetRange.getAddress()}`);\n\n  const rowCount = targetRange.getRowCount();\n  const colCount = targetRange.getColumnCount();\n  console.log(`Searching for hyperlinks in ${targetRange.getAddress()} which contains ${(rowCount * colCount)} cells`);\n\n  // Go through each individual cell looking for a hyperlink. \n  // This allows us to limit the formatting changes to only the cells with hyperlink formatting.\n  let clearedCount = 0;\n  for (let i = 0; i < rowCount; i++) {\n    for (let j = 0; j < colCount; j++) {\n      const cell = targetRange.getCell(i, j);\n      const hyperlink = cell.getHyperlink();\n      if (hyperlink) {\n        cell.clear(ExcelScript.ClearApplyTo.hyperlinks);\n        cell.getFormat().getFont().setUnderline(ExcelScript.RangeUnderlineStyle.none);\n        cell.getFormat().getFont().setColor('Black');\n        clearedCount++;\n      }\n    }\n  }\n\n  console.log(`Done. Cleared hyperlinks from ${clearedCount} cells`);\n}\n```"
- name: getImage()
  uid: ExcelScript!ExcelScript.Range#getImage:member(1)
  package: ExcelScript!
  fullName: getImage()
  summary: >-
    将范围呈现为 base64 编码的 png 映像。


    **注意**：有一个已知问题 `Range.getImage` 导致包装的文本或文本超出单元格宽度，以在同一行上呈现而不换行。 这使得生成的图像无法读取，因为整个行的文本溢出。 作为解决方法，请确保区域中的数据以单行方式适合每个单元格。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getImage(): string;'
    return:
      type: string
      description: ''
- name: getIntersection(anotherRange)
  uid: ExcelScript!ExcelScript.Range#getIntersection:member(1)
  package: ExcelScript!
  fullName: getIntersection(anotherRange)
  summary: 获取表示指定区域的矩形交集的 range 对象。 如果未找到交集，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIntersection(anotherRange: Range | string): Range;'
    parameters:
    - id: anotherRange
      description: 将用于确定区域交集的 range 对象或区域地址。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getIsEntireColumn()
  uid: ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)
  package: ExcelScript!
  fullName: getIsEntireColumn()
  summary: 表示当前区域是否为整列。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIsEntireColumn(): boolean;'
    return:
      type: boolean
      description: ''
- name: getIsEntireRow()
  uid: ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)
  package: ExcelScript!
  fullName: getIsEntireRow()
  summary: 表示当前区域是否为整行。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIsEntireRow(): boolean;'
    return:
      type: boolean
      description: ''
- name: getLastCell()
  uid: ExcelScript!ExcelScript.Range#getLastCell:member(1)
  package: ExcelScript!
  fullName: getLastCell()
  summary: 获取区域内的最后一个单元格。 例如，“B2:D5”的最后一个单元格是“D5”。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastCell(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getLastColumn()
  uid: ExcelScript!ExcelScript.Range#getLastColumn:member(1)
  package: ExcelScript!
  fullName: getLastColumn()
  summary: 获取区域内的最后一列。 例如，“B2:D5”的最后一列是“D2:D5”。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastColumn(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getLastRow()
  uid: ExcelScript!ExcelScript.Range#getLastRow:member(1)
  package: ExcelScript!
  fullName: getLastRow()
  summary: 获取区域内的最后一行。 例如，“B2:D5”的最后一行是“B5:D5”。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLastRow(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getLeft()
  uid: ExcelScript!ExcelScript.Range#getLeft:member(1)
  package: ExcelScript!
  fullName: getLeft()
  summary: 返回从工作表左边缘到范围左边缘的 100% 缩放距离（以磅为单位）。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLeft(): number;'
    return:
      type: number
      description: ''
- name: getLinkedDataTypeState()
  uid: ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)
  package: ExcelScript!
  fullName: getLinkedDataTypeState()
  summary: 表示单元格的数据类型状态。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLinkedDataTypeState(): LinkedDataTypeState;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.LinkedDataTypeState:enum" />
      description: ''
- name: getLinkedDataTypeStates()
  uid: ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)
  package: ExcelScript!
  fullName: getLinkedDataTypeStates()
  summary: 表示每个单元格的数据类型状态。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLinkedDataTypeStates(): LinkedDataTypeState[][];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.LinkedDataTypeState:enum" />[][]
      description: ''
- name: getMergedAreas()
  uid: ExcelScript!ExcelScript.Range#getMergedAreas:member(1)
  package: ExcelScript!
  fullName: getMergedAreas()
  summary: 返回一个 `RangeAreas` 对象，该对象表示此范围内的合并区域。 请注意，如果此范围内的合并区域计数超过 512，则此方法将无法返回结果。 `RangeAreas`如果该对象不存在，则此函数将返回一个对象，其`isNullObject`属性设置为`true`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMergedAreas(): RangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getNumberFormat()
  uid: ExcelScript!ExcelScript.Range#getNumberFormat:member(1)
  package: ExcelScript!
  fullName: getNumberFormat()
  summary: 表示给定区域的单元格 Excel 数字格式代码。 如果区域包含多个单元格，则将返回第一个单元格中的数据 (由行索引 0 表示，列索引为 0) 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormat(): string;'
    return:
      type: string
      description: ''
- name: getNumberFormatCategories()
  uid: ExcelScript!ExcelScript.Range#getNumberFormatCategories:member(1)
  package: ExcelScript!
  fullName: getNumberFormatCategories()
  summary: 表示每个单元格的数字格式的类别。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormatCategories(): NumberFormatCategory[][];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.NumberFormatCategory:enum" />[][]
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script finds cells in a table column that are not formatted as currency\n * and sets the fill color to red.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the \"Cost\" column from the \"Expenses\" table.\n  const table = workbook.getTable(\"Expenses\");\n  const costColumn = table.getColumnByName(\"Cost\");\n  const costColumnRange = costColumn.getRangeBetweenHeaderAndTotal();\n\n  // Get the number format categories for the column's range.\n  const numberFormatCategories = costColumnRange.getNumberFormatCategories();\n\n  // If any cell in the column doesn't have a currency format, make the cell red.\n  numberFormatCategories.forEach((category, index) =>{\n    if (category[0] != ExcelScript.NumberFormatCategory.currency) {\n      costColumnRange.getCell(index, 0).getFormat().getFill().setColor(\"red\");\n    }\n  }); \n}\n```"
- name: getNumberFormatCategory()
  uid: ExcelScript!ExcelScript.Range#getNumberFormatCategory:member(1)
  package: ExcelScript!
  fullName: getNumberFormatCategory()
  summary: 指定区域中第一个单元格的数字格式类别 (由行索引 0 表示，列索引为 0) 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormatCategory(): NumberFormatCategory;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.NumberFormatCategory:enum" />
      description: ''
- name: getNumberFormatLocal()
  uid: ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)
  package: ExcelScript!
  fullName: getNumberFormatLocal()
  summary: 根据用户的语言设置表示给定范围的单元格 Excel 数字格式代码。 获取或设置 `numberFormatLocal` 属性时，Excel 不会执行任何语言或格式强制。 任何返回的文本都基于系统设置中指定的语言使用本地格式的字符串。 如果区域包含多个单元格，则将返回第一个单元格中的数据 (由行索引 0 表示，列索引为 0) 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormatLocal(): string;'
    return:
      type: string
      description: ''
- name: getNumberFormats()
  uid: ExcelScript!ExcelScript.Range#getNumberFormats:member(1)
  package: ExcelScript!
  fullName: getNumberFormats()
  summary: 表示 Excel 的给定范围的数字格式代码。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormats(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getNumberFormatsLocal()
  uid: ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)
  package: ExcelScript!
  fullName: getNumberFormatsLocal()
  summary: 根据用户的语言设置表示给定范围的 Excel 数字格式代码。 获取或设置 `numberFormatLocal` 属性时，Excel 不会执行任何语言或格式强制。 任何返回的文本都基于系统设置中指定的语言使用本地格式的字符串。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNumberFormatsLocal(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getOffsetRange(rowOffset, columnOffset)
  uid: ExcelScript!ExcelScript.Range#getOffsetRange:member(1)
  package: ExcelScript!
  fullName: getOffsetRange(rowOffset, columnOffset)
  summary: 获取表示与指定区域偏移的区域的对象。返回的区域的尺寸将与此区域一致。如果强制在工作表网格的边界之外生成区域，将引发错误。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
    parameters:
    - id: rowOffset
      description: 区域偏移的行数（正数、负数或 0）。正数表示向下偏移，负数表示向上偏移。
      type: number
    - id: columnOffset
      description: 区域偏移的列数（正数、负数或 0）。正数表示向右偏移，负数表示向左偏移。
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script gets adjacent cells using relative references.\n * Note that if the active cell is on the top row, part of the script fails, \n * because it references the cell above the currently selected one.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the currently active cell in the workbook.\n  let activeCell = workbook.getActiveCell();\n  console.log(`The active cell's address is: ${activeCell.getAddress()}`);\n\n  // Get the cell to the right of the active cell and set its value and color.\n  let rightCell = activeCell.getOffsetRange(0,1);\n  rightCell.setValue(\"Right cell\");\n  console.log(`The right cell's address is: ${rightCell.getAddress()}`);\n  rightCell.getFormat().getFont().setColor(\"Magenta\");\n  rightCell.getFormat().getFill().setColor(\"Cyan\");\n\n  // Get the cell to the above of the active cell and set its value and color.\n  // Note that this operation will fail if the active cell is in the top row.\n  let aboveCell = activeCell.getOffsetRange(-1, 0);\n  aboveCell.setValue(\"Above cell\");\n  console.log(`The above cell's address is: ${aboveCell.getAddress()}`);\n  aboveCell.getFormat().getFont().setColor(\"White\");\n  aboveCell.getFormat().getFill().setColor(\"Black\");\n}\n```"
- name: getPivotTables(fullyContained)
  uid: ExcelScript!ExcelScript.Range#getPivotTables:member(1)
  package: ExcelScript!
  fullName: getPivotTables(fullyContained)
  summary: 获取与范围重叠的数据透视表的范围集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPivotTables(fullyContained?: boolean): PivotTable[];'
    parameters:
    - id: fullyContained
      description: 如果 `true`<!-- -->，仅返回完全包含在范围范围内的数据透视表。 默认值为 `false`<!-- -->.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.PivotTable:interface" />[]
      description: ''
- name: getPredefinedCellStyle()
  uid: ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: getPredefinedCellStyle()
  summary: 表示当前区域的样式。 如果单元格的样式不一致， `null` 则返回。 对于自定义样式，将返回样式名称。 对于内置样式，将返回表示枚举中的值的 `BuiltInStyle` 字符串。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPredefinedCellStyle(): string;'
    return:
      type: string
      description: ''
- name: getRangeEdge(direction, activeCell)
  uid: ExcelScript!ExcelScript.Range#getRangeEdge:member(1)
  package: ExcelScript!
  fullName: getRangeEdge(direction, activeCell)
  summary: 返回一个 Range 对象，该对象是数据区域的边缘单元格，对应于提供的方向。 这与 Windows UI 上 Excel 中的 Ctrl+箭头键行为相匹配。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getRangeEdge(
                  direction: KeyboardDirection,
                  activeCell?: Range | string
              ): Range;
    parameters:
    - id: direction
      description: 活动单元格的方向。
      type: <xref uid="ExcelScript!ExcelScript.KeyboardDirection:enum" />
    - id: activeCell
      description: 此区域中的活动单元格。 默认情况下，活动单元格是区域的左上角单元格。 如果活动单元格不在此范围内，则会引发错误。
      type: "<xref uid=\"ExcelScript!ExcelScript.Range:interface\" /> | string\n        "
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script adds the value \"Total\" after the end of the first column.\n */\nfunction main(workbook: ExcelScript.Workbook)\n{\n  // Get the current worksheet.\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Get the last used cell at the end of the column.\n  // This recreates the Ctrl+Down arrow key behavior.\n  let firstCell = selectedSheet.getRange(\"A1\");\n  let firstColumn = selectedSheet.getRange(\"A1\").getRangeEdge(ExcelScript.KeyboardDirection.down);\n  let cellAfter = firstColumn.getOffsetRange(1, 0);\n\n  // Set the value of the cell after the current end of the used column to \"Total\".\n  cellAfter.setValue(\"Total\");\n}\n```"
- name: getResizedRange(deltaRows, deltaColumns)
  uid: ExcelScript!ExcelScript.Range#getResizedRange:member(1)
  package: ExcelScript!
  fullName: getResizedRange(deltaRows, deltaColumns)
  summary: 获取一个 `Range` 类似于当前 `Range` 对象的对象，但其右下角展开 (或按一定数量的行和列) 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
    parameters:
    - id: deltaRows
      description: 相对于当前范围，展开右下角的行数。使用正数可展开范围，使用负数可合拢范围。
      type: number
    - id: deltaColumns
      description: 相对于当前范围展开右下角的列数。 使用正数可展开范围，使用负数可合拢范围。
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script copies the formatting in the active cell to the neighboring cells.\n * Note that this script only works when the active cell isn't on an edge of the worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the active cell.\n  let activeCell = workbook.getActiveCell();\n\n  // Get the cell that's one row above and one column to the left of the active cell.\n  let cornerCell = activeCell.getOffsetRange(-1,-1);\n\n  // Get a range that includes all the cells surrounding the active cell.\n  let surroundingRange = cornerCell.getResizedRange(2, 2)\n\n  // Copy the formatting from the active cell to the new range.\n  surroundingRange.copyFrom(\n    activeCell, /* The source range. */\n    ExcelScript.RangeCopyType.formats /* What to copy. */\n  );\n}\n```"
- name: getRow(row)
  uid: ExcelScript!ExcelScript.Range#getRow:member(1)
  package: ExcelScript!
  fullName: getRow(row)
  summary: 获取范围中包含的行。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRow(row: number): Range;'
    parameters:
    - id: row
      description: 要检索的区域的行号。 从零开始编制索引。
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getRowCount()
  uid: ExcelScript!ExcelScript.Range#getRowCount:member(1)
  package: ExcelScript!
  fullName: getRowCount()
  summary: 返回区域中的总行数。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowCount(): number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This sample provides the count of negative numbers that are present\n * in the used range of the current worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the working range.\n  let usedRange = workbook.getActiveWorksheet().getUsedRange();\n  let rowCount = usedRange.getRowCount();\n  let columnCount = usedRange.getColumnCount();\n\n  // Save the values locally to avoid repeatedly asking the workbook.\n  let usedRangeValues = usedRange.getValues();\n\n  // Start the negative number counter.\n  let negativeCount = 0;\n\n  // Iterate over the entire range looking for negative numbers.\n  for (let i = 0; i < rowCount; i++) {\n    for (let j = 0; j < columnCount; j++) {\n      if (usedRangeValues[i][j] < 0) {\n        negativeCount++;\n      }\n    }\n  }\n\n  // Log the negative number count to the console.\n  console.log(negativeCount);\n}\n```"
- name: getRowHidden()
  uid: ExcelScript!ExcelScript.Range#getRowHidden:member(1)
  package: ExcelScript!
  fullName: getRowHidden()
  summary: 表示当前范围中的所有行是否已隐藏。 值是 `true` 隐藏某个区域中的所有行时。 值是 `false` 当区域中没有隐藏行时。 值是 `null` 当某个区域中的某些行被隐藏并且同一区域中的其他行不隐藏时。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowHidden(): boolean;'
    return:
      type: boolean
      description: ''
- name: getRowIndex()
  uid: ExcelScript!ExcelScript.Range#getRowIndex:member(1)
  package: ExcelScript!
  fullName: getRowIndex()
  summary: 返回区域中第一个单元格的行编号。 从零开始编制索引。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowIndex(): number;'
    return:
      type: number
      description: ''
- name: getRowsAbove(count)
  uid: ExcelScript!ExcelScript.Range#getRowsAbove:member(1)
  package: ExcelScript!
  fullName: getRowsAbove(count)
  summary: 获取当前 `Range` 对象上方的一定数量的行。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsAbove(count?: number): Range;'
    parameters:
    - id: count
      description: 可选。生成的范围中要包含的行数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getRowsBelow(count)
  uid: ExcelScript!ExcelScript.Range#getRowsBelow:member(1)
  package: ExcelScript!
  fullName: getRowsBelow(count)
  summary: 获取当前 `Range` 对象下方的一定数量的行。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRowsBelow(count?: number): Range;'
    parameters:
    - id: count
      description: 可选。生成的范围中要包含的行数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
      type: number
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSavedAsArray()
  uid: ExcelScript!ExcelScript.Range#getSavedAsArray:member(1)
  package: ExcelScript!
  fullName: getSavedAsArray()
  summary: 表示是否将所有单元格保存为数组公式。 如果将所有单元格保存为数组公式，或者`false`所有单元格不会保存为数组公式，则返回`true`。 如果某些单元格将保存为数组公式，而某些单元格不会保存，则返回 `null` 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSavedAsArray(): boolean;'
    return:
      type: boolean
      description: ''
- name: getSort()
  uid: ExcelScript!ExcelScript.Range#getSort:member(1)
  package: ExcelScript!
  fullName: getSort()
  summary: 表示当前 range 的区域排序。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSort(): RangeSort;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeSort:interface" />
      description: ''
- name: getSpecialCells(cellType, cellValueType)
  uid: ExcelScript!ExcelScript.Range#getSpecialCells:member(1)
  package: ExcelScript!
  fullName: getSpecialCells(cellType, cellValueType)
  summary: 获取一 `RangeAreas` 个或多个区域组成的对象，该对象表示与指定类型和值匹配的所有单元格。 如果找不到特殊单元格，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getSpecialCells(
                  cellType: SpecialCellType,
                  cellValueType?: SpecialCellValueType
              ): RangeAreas;
    parameters:
    - id: cellType
      description: 要包含的单元格的类型。
      type: <xref uid="ExcelScript!ExcelScript.SpecialCellType:enum" />
    - id: cellValueType
      description: 如果`cellType`是或`constants``formulas`<!-- -->，此参数用于确定要包含在结果中的单元格类型。 这些值可以组合在一起以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
      type: <xref uid="ExcelScript!ExcelScript.SpecialCellValueType:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This sample gets all the blank cells in the current worksheet's used range. It then highlights all those cells with a yellow background.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n    // Get the current used range.\n    let range = workbook.getActiveWorksheet().getUsedRange();\n    \n    // Get all the blank cells.\n    let blankCells = range.getSpecialCells(ExcelScript.SpecialCellType.blanks);\n    // Highlight the blank cells with a yellow background.\n    blankCells.getFormat().getFill().setColor(\"yellow\");\n}\n```"
- name: getSpillingToRange()
  uid: ExcelScript!ExcelScript.Range#getSpillingToRange:member(1)
  package: ExcelScript!
  fullName: getSpillingToRange()
  summary: 获取 Range 对象，它在调用定位单元格时包含溢出区域。 如果范围不是定位单元格或找不到溢出范围，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillingToRange(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSpillParent()
  uid: ExcelScript!ExcelScript.Range#getSpillParent:member(1)
  package: ExcelScript!
  fullName: getSpillParent()
  summary: 获取包含要溢出到单元格的定位单元格的范围对象。 如果它不是溢出的单元格，或者给定了多个单元格，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSpillParent(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getSurroundingRegion()
  uid: ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)
  package: ExcelScript!
  fullName: getSurroundingRegion()
  summary: 返回一个 `Range` 对象，该对象代表此区域中左上角单元格的周围区域。 周围区域是由相对于该区域的空白行和空白列的任何组合所限定的区域。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSurroundingRegion(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getTables(fullyContained)
  uid: ExcelScript!ExcelScript.Range#getTables:member(1)
  package: ExcelScript!
  fullName: getTables(fullyContained)
  summary: 获取与区域重叠的限定范围的表格集合。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTables(fullyContained?: boolean): Table[];'
    parameters:
    - id: fullyContained
      description: 如果 `true`<!-- -->，仅返回完全包含在范围范围内的表。 默认值为 `false`<!-- -->.
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Table:interface" />[]
      description: ''
- name: getText()
  uid: ExcelScript!ExcelScript.Range#getText:member(1)
  package: ExcelScript!
  fullName: getText()
  summary: 表示指定区域的文本值。 文本值与单元格宽度无关。 \#在 Excel UI 中进行的符号替换不会影响 API 返回的文本值。 如果区域包含多个单元格，则将返回第一个单元格中的数据 (由行索引 0 表示，列索引为 0) 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getText(): string;'
    return:
      type: string
      description: ''
- name: getTexts()
  uid: ExcelScript!ExcelScript.Range#getTexts:member(1)
  package: ExcelScript!
  fullName: getTexts()
  summary: 指定区域的文本值。 文本值与单元格宽度无关。 在 Excel UI 中 \# 发生的) 替换 (号不会影响 API 返回的文本值。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTexts(): string[][];'
    return:
      type: string[][]
      description: ''
- name: getTop()
  uid: ExcelScript!ExcelScript.Range#getTop:member(1)
  package: ExcelScript!
  fullName: getTop()
  summary: 返回从工作表的上边缘到范围的上边缘的 100% 缩放距离（以磅为单位）。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTop(): number;'
    return:
      type: number
      description: ''
- name: getUsedRange(valuesOnly)
  uid: ExcelScript!ExcelScript.Range#getUsedRange:member(1)
  package: ExcelScript!
  fullName: getUsedRange(valuesOnly)
  summary: 返回指定 range 对象的所用区域。 如果区域内没有已用单元格，则此方法返回 `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Range;'
    parameters:
    - id: valuesOnly
      description: 仅将有值的单元格视为已使用的单元格。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getValue()
  uid: ExcelScript!ExcelScript.Range#getValue:member(1)
  package: ExcelScript!
  fullName: getValue()
  summary: 表示指定范围的原始值。 返回的数据可能是字符串、数字，也可能是布尔值。 包含错误的单元格将返回错误字符串。 如果区域包含多个单元格，则将返回第一个单元格中的数据 (由行索引 0 表示，列索引为 0) 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValue(): string | number | boolean;'
    return:
      type: string | number | boolean
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This sample reads the value of A1 and prints it to the console.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the current worksheet.\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Get the value of cell A1.\n  let range = selectedSheet.getRange(\"A1\");\n  \n  // Print the value of A1.\n  console.log(range.getValue());\n}\n```"
- name: getValues()
  uid: ExcelScript!ExcelScript.Range#getValues:member(1)
  package: ExcelScript!
  fullName: getValues()
  summary: 表示指定区域的原始值。 返回的数据可以是字符串、数字或布尔值。 包含错误的单元格将返回错误字符串。 如果返回的值以加号 (“+”) 、减去 (“-”) 或等号 (“=”) 开头，Excel 会将此值解释为公式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValues(): (string | number | boolean)[][];'
    return:
      type: (string | number | boolean)[][]
      description: ''
- name: getValueType()
  uid: ExcelScript!ExcelScript.Range#getValueType:member(1)
  package: ExcelScript!
  fullName: getValueType()
  summary: 表示单元格中的数据类型。 如果区域包含多个单元格，则将返回第一个单元格中的数据 (由行索引 0 表示，列索引为 0) 。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValueType(): RangeValueType;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeValueType:enum" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script formats rows in a worksheet based on the first value in that row. \n * If it's the boolean value TRUE, the row is bolded. \n * If it's FALSE, nothing is changed. \n * If the value type isn't a boolean, the row is italicized.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the used range in the active worksheet.\n  const sheet = workbook.getActiveWorksheet();\n  const usedRange = sheet.getUsedRange();\n\n  // Get the values in the first column.\n  const firstColumnValues = usedRange.getColumn(0).getValues();\n\n  // Look at the first cell in each row.\n  const rowCount = usedRange.getRowCount();\n  for (let i = 0; i < rowCount; i++) {\n    // Get the type of the first cell to make sure it's a boolean.\n    let firstValueType = usedRange.getCell(i, 0).getValueType();\n\n    // Set the bold or italic of the row as described earlier.\n    if (firstValueType === ExcelScript.RangeValueType.boolean) {\n      if (firstColumnValues[i][0] as boolean === true) {\n        usedRange.getRow(i).getFormat().getFont().setBold(true);\n      } else {\n        usedRange.getRow(i).getFormat().getFont().setBold(false);\n      }\n    } else {\n      usedRange.getRow(i).getFormat().getFont().setItalic(true);\n    }\n  }\n}\n```"
- name: getValueTypes()
  uid: ExcelScript!ExcelScript.Range#getValueTypes:member(1)
  package: ExcelScript!
  fullName: getValueTypes()
  summary: 指定每个单元格中的数据类型。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getValueTypes(): RangeValueType[][];'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeValueType:enum" />[][]
      description: ''
- name: getVisibleView()
  uid: ExcelScript!ExcelScript.Range#getVisibleView:member(1)
  package: ExcelScript!
  fullName: getVisibleView()
  summary: 表示当前 range 对象的可见行。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getVisibleView(): RangeView;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeView:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script copies values and formatting from the visible range of a table in Sheet1 into Sheet2.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the filtered data from Sheet1.\n  const currentSheet = workbook.getWorksheet(\"Sheet1\");\n  const table = currentSheet.getTables()[0];\n  const source = table.getRange().getVisibleView().getRange();\n  \n  // Copy the data into the other sheet.\n  const otherSheet = workbook.getWorksheet(\"Sheet2\");\n  const otherRangeCorner = otherSheet.getRange(\"A1\");\n  otherRangeCorner.copyFrom(source, ExcelScript.RangeCopyType.all);\n}\n```"
- name: getWidth()
  uid: ExcelScript!ExcelScript.Range#getWidth:member(1)
  package: ExcelScript!
  fullName: getWidth()
  summary: 返回范围左边缘到范围右边缘的 100% 缩放距离（以磅为单位）。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWidth(): number;'
    return:
      type: number
      description: ''
- name: getWorksheet()
  uid: ExcelScript!ExcelScript.Range#getWorksheet:member(1)
  package: ExcelScript!
  fullName: getWorksheet()
  summary: 包含当前区域的工作表。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWorksheet(): Worksheet;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Worksheet:interface" />
      description: ''
- name: group(groupOption)
  uid: ExcelScript!ExcelScript.Range#group:member(1)
  package: ExcelScript!
  fullName: group(groupOption)
  summary: 对大纲的列和行进行分组。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'group(groupOption: GroupOption): void;'
    parameters:
    - id: groupOption
      description: 指定如何按行或列对范围进行分组。 `InvalidArgument`当组选项与范围`isEntireRow`或`isEntireColumn`属性不同时，将引发错误 (即为 true， `range.isEntireRow` `groupOption`为“ByColumns”或`range.isEntireColumn`为 true，`groupOption`并且为“ByRows”) 。
      type: <xref uid="ExcelScript!ExcelScript.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: hideGroupDetails(groupOption)
  uid: ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)
  package: ExcelScript!
  fullName: hideGroupDetails(groupOption)
  summary: 隐藏行或列组的详细信息。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hideGroupDetails(groupOption: GroupOption): void;'
    parameters:
    - id: groupOption
      description: 指定是隐藏分组行还是分组列的详细信息。
      type: <xref uid="ExcelScript!ExcelScript.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: insert(shift)
  uid: ExcelScript!ExcelScript.Range#insert:member(1)
  package: ExcelScript!
  fullName: insert(shift)
  summary: 将单个单元格或一系列单元格插入到工作表中取代此区域，并移动其他单元格以留出空间。 在现在的空白处返回一个新 `Range` 对象。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'insert(shift: InsertShiftDirection): Range;'
    parameters:
    - id: shift
      description: 指定移动单元格的方式。 有关详细信息，请参阅 `ExcelScript.InsertShiftDirection`。
      type: <xref uid="ExcelScript!ExcelScript.InsertShiftDirection:enum" />
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script inserts headers at the top of the worksheet.\n */\nfunction main(workbook: ExcelScript.Workbook)\n{\n  let currentSheet = workbook.getActiveWorksheet();\n\n  // Create headers for 3 columns.\n  let myHeaders = [[\"NAME\", \"ID\", \"ROLE\"]];\n\n  // Add a blank first row and push existing data down a row.\n  let firstRow = currentSheet.getRange(\"1:1\");\n  firstRow.insert(ExcelScript.InsertShiftDirection.down);\n\n  // Add the headers.\n  currentSheet.getRange(\"A1:C1\").setValues(myHeaders);\n}\n```"
- name: merge(across)
  uid: ExcelScript!ExcelScript.Range#merge:member(1)
  package: ExcelScript!
  fullName: merge(across)
  summary: 将范围单元格合并到工作表的一个区域内。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'merge(across?: boolean): void;'
    parameters:
    - id: across
      description: 可选。 设置 `true` 为将指定区域的每一行中的单元格合并为单独的合并单元格。 默认值为 `false`<!-- -->.
      type: boolean
    return:
      type: void
      description: ''
- name: moveTo(destinationRange)
  uid: ExcelScript!ExcelScript.Range#moveTo:member(1)
  package: ExcelScript!
  fullName: moveTo(destinationRange)
  summary: 将单元格值、格式和公式从当前区域移到目标范围，替换这些单元格中的旧信息。 如果目标范围小于当前范围，则会自动扩展目标范围。 目标范围中超出原始区域区域的任何单元格不会更改。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'moveTo(destinationRange: Range | string): void;'
    parameters:
    - id: destinationRange
      description: destinationRange 指定要将此范围中的信息移动到的位置的范围。
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
    return:
      type: void
      description: ''
- name: removeDuplicates(columns, includesHeader)
  uid: ExcelScript!ExcelScript.Range#removeDuplicates:member(1)
  package: ExcelScript!
  fullName: removeDuplicates(columns, includesHeader)
  summary: 从列指定的区域中删除重复值。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      removeDuplicates(
                  columns: number[],
                  includesHeader: boolean
              ): RemoveDuplicatesResult;
    parameters:
    - id: columns
      description: 范围内可能包含重复项的列。 至少需要指定一列。 从零开始编制索引。
      type: number[]
    - id: includesHeader
      description: 如此 如果输入数据包含标头。 默认为 false。
      type: boolean
    return:
      type: <xref uid="ExcelScript!ExcelScript.RemoveDuplicatesResult:interface" />
      description: ''
- name: replaceAll(text, replacement, criteria)
  uid: ExcelScript!ExcelScript.Range#replaceAll:member(1)
  package: ExcelScript!
  fullName: replaceAll(text, replacement, criteria)
  summary: 根据当前区域内指定的条件查找并替换给定的字符串。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      replaceAll(
                  text: string,
                  replacement: string,
                  criteria: ReplaceCriteria
              ): number;
    parameters:
    - id: text
      description: 要查找的字符串。
      type: string
    - id: replacement
      description: 替换原始字符串的字符串。
      type: string
    - id: criteria
      description: 其他替换条件。
      type: <xref uid="ExcelScript!ExcelScript.ReplaceCriteria:interface" />
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script searches through a table column and replaces  \n * cells marked \"monthly special\" with \"parsnip\".\n * This script uses Range.replaceAll instead of Worksheet.replaceAll\n * to limit the search to a specific range.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the range of a table named \"Orders\".\n  let table = workbook.getTable(\"Orders\");\n  let range = table.getColumnByName(\"Vegetable\").getRange();\n  \n  // Change the value of any cells with the value \"monthly special\".\n  range.replaceAll(\"monthly special\", \"parsnip\", {completeMatch: true});\n}\n```"
- name: select()
  uid: ExcelScript!ExcelScript.Range#select:member(1)
  package: ExcelScript!
  fullName: select()
  summary: 在 Excel UI 中选择指定的区域。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'select(): void;'
    return:
      type: void
      description: ''
- name: setColumnHidden(columnHidden)
  uid: ExcelScript!ExcelScript.Range#setColumnHidden:member(1)
  package: ExcelScript!
  fullName: setColumnHidden(columnHidden)
  summary: 表示当前区域中的所有列是否已隐藏。 值是 `true` 隐藏某个区域中的所有列时。 值是 `false` 区域中未隐藏任何列时。 值是 `null` 当某个区域中的某些列被隐藏并且同一区域中的其他列不隐藏时。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setColumnHidden(columnHidden: boolean): void;'
    parameters:
    - id: columnHidden
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setDirty()
  uid: ExcelScript!ExcelScript.Range#setDirty:member(1)
  package: ExcelScript!
  fullName: setDirty()
  summary: 设置下一次重新计算发生时要重新计算的区域。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setDirty(): void;'
    return:
      type: void
      description: ''
- name: setFormula(formula)
  uid: ExcelScript!ExcelScript.Range#setFormula:member(1)
  package: ExcelScript!
  fullName: setFormula(formula)
  summary: 以 A1 样式表示法设置单元格公式。 如果区域包含多个单元格，则给定区域中的每个单元格都将使用输入数据进行更新。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormula(formula: string): void;'
    parameters:
    - id: formula
      description: ''
      type: string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/*\n * This script sets a cell's formula, \n * then displays how Excel stores the cell's formula and value separately.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  let selectedSheet = workbook.getActiveWorksheet();\n\n  // Set A1 to 2.\n  let a1 = selectedSheet.getRange(\"A1\");\n  a1.setValue(2);\n\n  // Set B1 to the formula =(2*A1), which should equal 4.\n  let b1 = selectedSheet.getRange(\"B1\")\n  b1.setFormula(\"=(2*A1)\");\n\n  // Log the current results for `getFormula` and `getValue` at B1.\n  console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);\n}\n```"
- name: setFormulaLocal(formulaLocal)
  uid: ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)
  package: ExcelScript!
  fullName: setFormulaLocal(formulaLocal)
  summary: 使用用户的语言和数字格式区域设置 A1 样式表示法中的单元格公式。 例如，英语中的公式 "=SUM(A1, 1.5)" 在德语中将变为 "=SUMME(A1; 1,5)"。 如果区域包含多个单元格，则给定区域中的每个单元格都将使用输入数据进行更新。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulaLocal(formulaLocal: string): void;'
    parameters:
    - id: formulaLocal
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: setFormulaR1C1(formulaR1C1)
  uid: ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)
  package: ExcelScript!
  fullName: setFormulaR1C1(formulaR1C1)
  summary: 以 R1C1 样式表示法设置单元格公式。 如果区域包含多个单元格，则给定区域中的每个单元格都将使用输入数据进行更新。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulaR1C1(formulaR1C1: string): void;'
    parameters:
    - id: formulaR1C1
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: setFormulas(formulas)
  uid: ExcelScript!ExcelScript.Range#setFormulas:member(1)
  package: ExcelScript!
  fullName: setFormulas(formulas)
  summary: 表示采用 A1 表示法的公式。 如果单元格没有公式，则返回其值。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulas(formulas: string[][]): void;'
    parameters:
    - id: formulas
      description: ''
      type: string[][]
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script sets the values of a range, then adds SUM formulas to calcuate\n * the totals for each row of that range. \n */\nfunction main(workbook: ExcelScript.Workbook)\n{\n  let currentSheet = workbook.getActiveWorksheet();\n\n  // Set the values of a range.\n  let values = [[1, 2, 4], [8, 16, 32], [64, 128, 256]];\n  let valueRange = currentSheet.getRange(\"A1:C3\");\n  valueRange.setValues(values);\n\n  // Set the formulas of a range.\n  let formulas = [[\"=SUM(A1:C1)\"], [\"=SUM(A2:C2)\"], [\"=SUM(A3:C3)\"]];\n  let formulaRange = currentSheet.getRange(\"D1:D3\");\n  formulaRange.setFormulas(formulas);\n}\n```"
- name: setFormulasLocal(formulasLocal)
  uid: ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)
  package: ExcelScript!
  fullName: setFormulasLocal(formulasLocal)
  summary: 表示采用 A1 样式表示法的公式，使用用户的语言和数字格式区域设置。 例如，英语中的公式 "=SUM(A1, 1.5)" 在德语中将变为 "=SUMME(A1; 1,5)"。 如果单元格没有公式，则返回其值。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulasLocal(formulasLocal: string[][]): void;'
    parameters:
    - id: formulasLocal
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setFormulasR1C1(formulasR1C1)
  uid: ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)
  package: ExcelScript!
  fullName: setFormulasR1C1(formulasR1C1)
  summary: 表示采用 R1C1 样式表示法的公式。 如果单元格没有公式，则返回其值。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setFormulasR1C1(formulasR1C1: string[][]): void;'
    parameters:
    - id: formulasR1C1
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setHyperlink(hyperlink)
  uid: ExcelScript!ExcelScript.Range#setHyperlink:member(1)
  package: ExcelScript!
  fullName: setHyperlink(hyperlink)
  summary: 表示当前范围的超链接。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setHyperlink(hyperlink: RangeHyperlink): void;'
    parameters:
    - id: hyperlink
      description: ''
      type: <xref uid="ExcelScript!ExcelScript.RangeHyperlink:interface" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/** \n * This script inserts a hyperlink to the first cell of the last worksheet in the workbook.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the active cell.\n  let cell = workbook.getActiveCell();\n\n  // Get the last worksheet in the workbook.\n  // Note that this might be the current sheet if there's only one worksheet.\n  let lastSheet = workbook.getLastWorksheet();\n\n  // Get sheet name. \n  let linkedSheetName = lastSheet.getName();\n  console.log(`Setting hyperlink of ${cell.getAddress()} to the ${linkedSheetName} sheet's A1 cell`);\n\n  // Set the text for the hyperlink.\n  let value = `Click to go to: ${linkedSheetName}`;\n\n  // Create the hyperlink using that cell's value.\n  cell.setHyperlink({\n    textToDisplay: value.toString(),\n    screenTip: `Navigate to ${linkedSheetName}`,\n    documentReference: `${linkedSheetName}!A1`\n  });\n}\n```"
- name: setNumberFormat(numberFormat)
  uid: ExcelScript!ExcelScript.Range#setNumberFormat:member(1)
  package: ExcelScript!
  fullName: setNumberFormat(numberFormat)
  summary: 设置给定区域的单元格 Excel 数字格式代码。 如果区域包含多个单元格，则给定区域中的每个单元格都将使用输入数据进行更新。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setNumberFormat(numberFormat: string): void;'
    parameters:
    - id: numberFormat
      description: ''
      type: string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script sets the number format in column C to show the data as a percentage.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  const  selectedSheet = workbook.getActiveWorksheet();\n  \n  // Set number format for column C to a percentage that rounds to the nearest percentage point.\n  selectedSheet.getRange(\"C:C\").setNumberFormat(\"0%\");\n}\n```"
- name: setNumberFormatLocal(numberFormatLocal)
  uid: ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)
  package: ExcelScript!
  fullName: setNumberFormatLocal(numberFormatLocal)
  summary: 根据用户的语言设置设置给定范围的单元格 Excel 数字格式代码。 获取或设置 `numberFormatLocal` 属性时，Excel 不会执行任何语言或格式强制。 任何返回的文本都基于系统设置中指定的语言使用本地格式的字符串。 如果区域包含多个单元格，则给定区域中的每个单元格都将使用输入数据进行更新。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setNumberFormatLocal(numberFormatLocal: string): void;'
    parameters:
    - id: numberFormatLocal
      description: ''
      type: string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This script sets the number format in column D to show the data as a percentage with a decimal.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  const  selectedSheet = workbook.getActiveWorksheet();\n  \n  // Set number format for column D to a percentage that rounds to the nearest tenth of a percentage.\n  selectedSheet.getRange(\"D:D\").setNumberFormatLocal(\"0.0%\");\n}\n```"
- name: setNumberFormats(numberFormats)
  uid: ExcelScript!ExcelScript.Range#setNumberFormats:member(1)
  package: ExcelScript!
  fullName: setNumberFormats(numberFormats)
  summary: 表示 Excel 的给定范围的数字格式代码。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setNumberFormats(numberFormats: string[][]): void;'
    parameters:
    - id: numberFormats
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setNumberFormatsLocal(numberFormatsLocal)
  uid: ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)
  package: ExcelScript!
  fullName: setNumberFormatsLocal(numberFormatsLocal)
  summary: 根据用户的语言设置表示给定范围的 Excel 数字格式代码。 获取或设置 `numberFormatLocal` 属性时，Excel 不会执行任何语言或格式强制。 任何返回的文本都基于系统设置中指定的语言使用本地格式的字符串。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setNumberFormatsLocal(numberFormatsLocal: string[][]): void;'
    parameters:
    - id: numberFormatsLocal
      description: ''
      type: string[][]
    return:
      type: void
      description: ''
- name: setPredefinedCellStyle(predefinedCellStyle)
  uid: ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)
  package: ExcelScript!
  fullName: setPredefinedCellStyle(predefinedCellStyle)
  summary: 表示当前区域的样式。 如果单元格的样式不一致， `null` 则返回。 对于自定义样式，将返回样式名称。 对于内置样式，将返回表示枚举中的值的 `BuiltInStyle` 字符串。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
    parameters:
    - id: predefinedCellStyle
      description: ''
      type: string
    return:
      type: void
      description: ''
- name: setRowHidden(rowHidden)
  uid: ExcelScript!ExcelScript.Range#setRowHidden:member(1)
  package: ExcelScript!
  fullName: setRowHidden(rowHidden)
  summary: 表示当前范围中的所有行是否已隐藏。 值是 `true` 隐藏某个区域中的所有行时。 值是 `false` 当区域中没有隐藏行时。 值是 `null` 当某个区域中的某些行被隐藏并且同一区域中的其他行不隐藏时。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setRowHidden(rowHidden: boolean): void;'
    parameters:
    - id: rowHidden
      description: ''
      type: boolean
    return:
      type: void
      description: ''
- name: setValue(value)
  uid: ExcelScript!ExcelScript.Range#setValue:member(1)
  package: ExcelScript!
  fullName: setValue(value)
  summary: 设置指定范围的原始值。 所设置的数据可以是字符串、数字或布尔值类型。 `null` (未在 Excel) 中设置或覆盖值，将忽略值。 如果区域包含多个单元格，则给定区域中的每个单元格都将使用输入数据进行更新。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setValue(value: any): void;'
    parameters:
    - id: value
      description: ''
      type: any
    return:
      type: void
      description: ''
- name: setValues(values)
  uid: ExcelScript!ExcelScript.Range#setValues:member(1)
  package: ExcelScript!
  fullName: setValues(values)
  summary: 设置指定范围的原始值。 提供的数据可以是字符串、数字或布尔值。 如果提供的值以加号 (“+”) 、减去 (“-”) 或等号 (“=”) 开头，Excel 会将此值解释为公式。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setValues(values: (string | number | boolean)[][]): void;'
    parameters:
    - id: values
      description: ''
      type: (string | number | boolean)[][]
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>示例\n\n```TypeScript\n/**\n * This sample inserts some pre-loaded data into a range.\n * It also shows how to get a range that fits the data.\n */\n function main(workbook: ExcelScript.Workbook) {\n   // Get the active cell.\n   let currentCell = workbook.getActiveCell();\n   \n   // Calculate the range needed to fit the given data.\n   let targetRange = currentCell.getResizedRange(DATA.length - 1, DATA[0].length - 1);\n\n   // Set range values to the data.\n   targetRange.setValues(DATA);\n\n   // Autofit the columns so the worksheet is readable. \n   targetRange.getFormat().autofitColumns();\n }\n\n /* \n  * This sample's data is in a static 2-dimensional array.\n  * You could also get the input from other ranges or sources.\n  * Note that each row must have the same number of columns to be valid. \n  */\n const DATA = [\n   ['Date', 'Salesperson', 'Product', 'Amount']\n   , ['3/2/2020', 'Anne', 'Pizza', '$1400']\n   , ['3/2/2020', 'Mariya', 'Pizza', '$1700']\n   , ['3/7/2020', 'Mark', 'Sandwiches', '$1010']\n   , ['3/24/2020', 'Anne', 'Pizza', '$750']\n   , ['3/28/2020', 'Mark', 'Salads', '$510']\n   , ['4/17/2020', 'Laura', 'Salads', '$900']\n   , ['4/17/2020', 'Mariya', 'Salads', '$1600']\n   , ['4/28/2020', 'Laura', 'Sandwiches', '$680']\n ];\n```"
- name: showCard()
  uid: ExcelScript!ExcelScript.Range#showCard:member(1)
  package: ExcelScript!
  fullName: showCard()
  summary: 显示活动单元格的卡片（如果该单元格具有富值内容）。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showCard(): void;'
    return:
      type: void
      description: ''
- name: showGroupDetails(groupOption)
  uid: ExcelScript!ExcelScript.Range#showGroupDetails:member(1)
  package: ExcelScript!
  fullName: showGroupDetails(groupOption)
  summary: 显示行或列组的详细信息。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGroupDetails(groupOption: GroupOption): void;'
    parameters:
    - id: groupOption
      description: 指定是显示分组行还是分组列的详细信息。
      type: <xref uid="ExcelScript!ExcelScript.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: ungroup(groupOption)
  uid: ExcelScript!ExcelScript.Range#ungroup:member(1)
  package: ExcelScript!
  fullName: ungroup(groupOption)
  summary: 取消对大纲的列和行进行分组。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'ungroup(groupOption: GroupOption): void;'
    parameters:
    - id: groupOption
      description: 指定如何按行或列取消组合范围。
      type: <xref uid="ExcelScript!ExcelScript.GroupOption:enum" />
    return:
      type: void
      description: ''
- name: unmerge()
  uid: ExcelScript!ExcelScript.Range#unmerge:member(1)
  package: ExcelScript!
  fullName: unmerge()
  summary: 将范围单元格取消合并为各个单元格。
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'unmerge(): void;'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: f055657018c896408c2ce68ec4513deb84712b6c
  ms.sourcegitcommit: 224152865ad439182e63f5630f0f0aec589420a7
  ms.translationtype: MT
  ms.contentlocale: zh-CN
  ms.lasthandoff: 07/13/2022
  ms.locfileid: "66767166"
