### YamlMime:TSType
name: ExcelScript.Range
uid: 'ExcelScript!ExcelScript.Range:interface'
package: ExcelScript!
fullName: ExcelScript.Range
summary: 区域表示一个或多个相邻的单元格，如单元格、行、列、单元格块等。
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: addConditionalFormat(type)
    uid: 'ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)'
    package: ExcelScript!
    fullName: addConditionalFormat(type)
    summary: 将新的条件格式添加到第一/第一优先级的集合。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
      parameters:
        - id: type
          description: 要添加的条件格式的类型。 有关详细信息，请参阅 `ExcelScript.ConditionalFormatType`。
          type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormatType:enum" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />'
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /**
           * This sample applies conditional formatting to the currently used range in the worksheet. 
           * The conditional formatting is a green fill for the top 10% of values.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the used range in the worksheet.
            let range = selectedSheet.getUsedRange();

            // Set the fill color to green for the top 10% of values in the range.
            let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)
            conditionalFormat.getTopBottom().getFormat().getFill().setColor("green");
            conditionalFormat.getTopBottom().setRule({
              rank: 10, // The percentage threshold.
              type: ExcelScript.ConditionalTopBottomCriterionType.topPercent // The type of the top/bottom condition.
            });
          }
          ```
  - name: 'autoFill(destinationRange, autoFillType)'
    uid: 'ExcelScript!ExcelScript.Range#autoFill:member(1)'
    package: ExcelScript!
    fullName: 'autoFill(destinationRange, autoFillType)'
    summary: 使用指定的自动填充逻辑填充从当前区域到目标区域的范围。 目标区域可以是 `null`<!-- -->，或者可以水平或垂直扩展源。 不支持不连续的范围。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        autoFill(
                    destinationRange?: Range | string,
                    autoFillType?: AutoFillType
                ): void;
      parameters:
        - id: destinationRange
          description: '"自动填充"的目标区域。 如果目标区域为 `null`<!-- -->，则基于周围单元格 (填充数据，这是双击 UI 的范围填充句柄或) 。'
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
        - id: autoFillType
          description: 自动填充的类型。 指定如何根据当前区域的内容填充目标区域。 默认值为"FillDefault"。
          type: '<xref uid="ExcelScript!ExcelScript.AutoFillType:enum" />'
      return:
        type: void
        description: ''
  - name: calculate()
    uid: 'ExcelScript!ExcelScript.Range#calculate:member(1)'
    package: ExcelScript!
    fullName: calculate()
    summary: 计算工作表上的单元格区域。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculate(): void;'
      return:
        type: void
        description: ''
  - name: clear(applyTo)
    uid: 'ExcelScript!ExcelScript.Range#clear:member(1)'
    package: ExcelScript!
    fullName: clear(applyTo)
    summary: 清除区域值、格式、填充、边框等。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clear(applyTo?: ClearApplyTo): void;'
      parameters:
        - id: applyTo
          description: 可选。 确定清除操作的类型。 有关详细信息，请参阅 `ExcelScript.ClearApplyTo`。
          type: '<xref uid="ExcelScript!ExcelScript.ClearApplyTo:enum" />'
      return:
        type: void
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /**
           * This script removes all the formatting from the selected range.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the selected range.
            let range = workbook.getSelectedRange();

            // Clear all the formatting in that range.
            range.clear(ExcelScript.ClearApplyTo.formats);
          }
          ```
  - name: clearAllConditionalFormats()
    uid: 'ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)'
    package: ExcelScript!
    fullName: clearAllConditionalFormats()
    summary: 清除当前指定区域中处于活动状态的所有条件格式。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'clearAllConditionalFormats(): void;'
      return:
        type: void
        description: ''
  - name: convertDataTypeToText()
    uid: 'ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)'
    package: ExcelScript!
    fullName: convertDataTypeToText()
    summary: 将数据类型为区域单元格转换为文本。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type: void
        description: ''
  - name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    uid: 'ExcelScript!ExcelScript.Range#copyFrom:member(1)'
    package: ExcelScript!
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    summary: 将单元格数据或格式从源区域或 `RangeAreas` 当前区域复制。 目标区域的大小可以不同于源区域或 `RangeAreas`<!-- -->. 如果目标小于源，则会自动展开目标。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?: RangeCopyType,
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      parameters:
        - id: sourceRange
          description: 源区域或 `RangeAreas` 复制源区域。 当源具有多个区域时，必须通过从矩形区域中删除整行或整列来 `RangeAreas` 创建其形式。
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" /> | string'
        - id: copyType
          description: 要复制的单元格数据或格式的类型。 默认值为"All"。
          type: '<xref uid="ExcelScript!ExcelScript.RangeCopyType:enum" />'
        - id: skipBlanks
          description: 如此 如果跳过源范围中的空白单元格。 默认值为 false。
          type: boolean
        - id: transpose
          description: 如此 如果转置目标区域单元格。 默认为 false。
          type: boolean
      return:
        type: void
        description: ''
  - name: delete(shift)
    uid: 'ExcelScript!ExcelScript.Range#delete:member(1)'
    package: ExcelScript!
    fullName: delete(shift)
    summary: 删除与区域相关的单元格。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(shift: DeleteShiftDirection): void;'
      parameters:
        - id: shift
          description: 指定移动单元格的方式。 有关详细信息，请参阅 `ExcelScript.DeleteShiftDirection`。
          type: '<xref uid="ExcelScript!ExcelScript.DeleteShiftDirection:enum" />'
      return:
        type: void
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /**
           * This sample creates a sample range, then deletes
           * "A1" using different DeleteShiftDirection values.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Add sample data to better visualize the delete changes.
            const currentSheet = workbook.getActiveWorksheet();
            currentSheet.getRange("A1:D4").setValues([
              [1,2,3,4],
              [5,6,7,8],
              [9,10,11,12],
              [13,14,15,16]]);

            // Delete A1 and shift the cells from the right to fill the space.
            // The value being deleted is 1.
            currentSheet.getRange("A1").delete(ExcelScript.DeleteShiftDirection.left);

            // Delete A1 and shift the cells from the bottom to fill the space.
            // The value being deleted is 2.
            currentSheet.getRange("A1").delete(ExcelScript.DeleteShiftDirection.up);

            // Log the sample range. The values should be:
            /*
              5, 3, 4, "",
              9, 6, 7, 8,
              13, 10, 11, 12,
              "", 14, 15, 16
            */
            console.log(currentSheet.getRange("A1:D4").getValues()); 
          }
          ```
  - name: 'find(text, criteria)'
    uid: 'ExcelScript!ExcelScript.Range#find:member(1)'
    package: ExcelScript!
    fullName: 'find(text, criteria)'
    summary: 根据指定的条件查找给定的字符串。 如果当前区域大于单个单元格，则搜索将限制为该范围，否则搜索将覆盖从该单元格之后开始的整个工作表。 如果没有匹配项，则此函数将返回其属性设置为 `isNullObject` 的对象 `true`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'find(text: string, criteria: SearchCriteria): Range;'
      parameters:
        - id: text
          description: 要查找的字符串。
          type: string
        - id: criteria
          description: 其他搜索条件，包括搜索方向以及搜索是否需要匹配整个单元格或区分大小写。
          type: '<xref uid="ExcelScript!ExcelScript.SearchCriteria:interface" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: flashFill()
    uid: 'ExcelScript!ExcelScript.Range#flashFill:member(1)'
    package: ExcelScript!
    fullName: flashFill()
    summary: 对当前范围进行快速填充。 快速填充会在有图案时自动填充数据，因此区域必须是单个列区域，并且周围必须有数据才能找到图案。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'flashFill(): void;'
      return:
        type: void
        description: ''
  - name: 'getAbsoluteResizedRange(numRows, numColumns)'
    uid: 'ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)'
    package: ExcelScript!
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    summary: 获取一个对象，该对象的左上单元格与当前对象相同，但具有 `Range` `Range` 指定的行数和列数。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
      parameters:
        - id: numRows
          description: 新区域大小的行数。
          type: number
        - id: numColumns
          description: 新区域大小的列数。
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getAddress()
    uid: 'ExcelScript!ExcelScript.Range#getAddress:member(1)'
    package: ExcelScript!
    fullName: getAddress()
    summary: 指定 A1 样式的范围引用。 地址值包含工作表引用 (例如，"Sheet1！A1：B4") 。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAddress(): string;'
      return:
        type: string
        description: ''
  - name: getAddressLocal()
    uid: 'ExcelScript!ExcelScript.Range#getAddressLocal:member(1)'
    package: ExcelScript!
    fullName: getAddressLocal()
    summary: 表示以用户语言表示指定区域的范围引用。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAddressLocal(): string;'
      return:
        type: string
        description: ''
  - name: getBoundingRect(anotherRange)
    uid: 'ExcelScript!ExcelScript.Range#getBoundingRect:member(1)'
    package: ExcelScript!
    fullName: getBoundingRect(anotherRange)
    summary: 获取包含指定区域的最小 range 对象。 例如 `GetBoundingRect` ，"B2：C5"和"D10：E15"为"B2：E15"。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Range;'
      parameters:
        - id: anotherRange
          description: range 对象、地址或区域名称。
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: 'getCell(row, column)'
    uid: 'ExcelScript!ExcelScript.Range#getCell:member(1)'
    package: ExcelScript!
    fullName: 'getCell(row, column)'
    summary: 根据行和列编号获取包含单个单元格的 range 对象。 单元格可以位于父区域外，只要它保持在工作表网格内即可。 返回的单元格位于相对于区域左上角的单元格的位置。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      parameters:
        - id: row
          description: 要检索的单元格的行号。从零开始编制索引。
          type: number
        - id: column
          description: 要检索的单元格的列号。从零开始编制索引。
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getCellCount()
    uid: 'ExcelScript!ExcelScript.Range#getCellCount:member(1)'
    package: ExcelScript!
    fullName: getCellCount()
    summary: '指定区域中的单元格数。 如果单元格数超过 2^31-1 (2,147,483,647)，此 API 返回 -1。'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCellCount(): number;'
      return:
        type: number
        description: ''
  - name: getColumn(column)
    uid: 'ExcelScript!ExcelScript.Range#getColumn:member(1)'
    package: ExcelScript!
    fullName: getColumn(column)
    summary: 获取范围中包含的列。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumn(column: number): Range;'
      parameters:
        - id: column
          description: 要检索的区域的列号。从零开始编制索引。
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getColumnCount()
    uid: 'ExcelScript!ExcelScript.Range#getColumnCount:member(1)'
    package: ExcelScript!
    fullName: getColumnCount()
    summary: 指定范围中的列总数。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnCount(): number;'
      return:
        type: number
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - name: getColumnHidden()
    uid: 'ExcelScript!ExcelScript.Range#getColumnHidden:member(1)'
    package: ExcelScript!
    fullName: getColumnHidden()
    summary: 表示当前区域的所有列是否隐藏。 值为 `true` 隐藏区域内的所有列时。 当 `false` 范围中没有任何列处于隐藏状态时，值为 。 当 `null` 一个范围中的某些列处于隐藏状态，而同一区域的其他列处于隐藏状态时，值为 。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnHidden(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getColumnIndex()
    uid: 'ExcelScript!ExcelScript.Range#getColumnIndex:member(1)'
    package: ExcelScript!
    fullName: getColumnIndex()
    summary: 指定范围中第一个单元格的列号。 从零开始编制索引。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnIndex(): number;'
      return:
        type: number
        description: ''
  - name: getColumnsAfter(count)
    uid: 'ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)'
    package: ExcelScript!
    fullName: getColumnsAfter(count)
    summary: 获取当前对象右边的一定数量的 `Range` 列。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnsAfter(count?: number): Range;'
      parameters:
        - id: count
          description: 可选。生成的范围中要包含的列数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getColumnsBefore(count)
    uid: 'ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)'
    package: ExcelScript!
    fullName: getColumnsBefore(count)
    summary: 获取当前对象左侧的一定数量的 `Range` 列。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getColumnsBefore(count?: number): Range;'
      parameters:
        - id: count
          description: 可选。生成的范围中要包含的列数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getConditionalFormat(id)
    uid: 'ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)'
    package: ExcelScript!
    fullName: getConditionalFormat(id)
    summary: 返回给定 ID 的条件格式。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getConditionalFormat(id: string): ConditionalFormat;'
      parameters:
        - id: id
          description: 条件格式的 ID。
          type: string
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />'
        description: ''
  - name: getConditionalFormats()
    uid: 'ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)'
    package: ExcelScript!
    fullName: getConditionalFormats()
    summary: 与区域 `ConditionalFormats` 相交的集合。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getConditionalFormats(): ConditionalFormat[];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.ConditionalFormat:interface" />[]'
        description: ''
  - name: getDataValidation()
    uid: 'ExcelScript!ExcelScript.Range#getDataValidation:member(1)'
    package: ExcelScript!
    fullName: getDataValidation()
    summary: 返回数据有效性对象。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDataValidation(): DataValidation;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.DataValidation:interface" />'
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /**
           * This script creates a drop-down selection list for a cell. It uses the existing values of the selected range as the choices for the list.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the values for data validation.
            let selectedRange = workbook.getSelectedRange();
            let rangeValues = selectedRange.getValues();

            // Convert the values into a comma-delimited string.
            let dataValidationListString = "";
            rangeValues.forEach((rangeValueRow) => {
              rangeValueRow.forEach((value) => {
                dataValidationListString += value + ",";
              });
            });

            // Clear the old range.
            selectedRange.clear(ExcelScript.ClearApplyTo.contents);

            // Apply the data validation to the first cell in the selected range.
            let targetCell = selectedRange.getCell(0,0);
            let dataValidation = targetCell.getDataValidation();

            // Set the content of the drop-down list.
            dataValidation.setRule({
                list: {
                  inCellDropDown: true,
                  source: dataValidationListString
                }
              });
          }
          ```
  - name: getDirectPrecedents()
    uid: 'ExcelScript!ExcelScript.Range#getDirectPrecedents:member(1)'
    package: ExcelScript!
    fullName: getDirectPrecedents()
    summary: 返回一个对象，该对象表示包含同一工作表或多个工作表中单元格的所有直接引用 `WorkbookRangeAreas` 单元格的范围。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDirectPrecedents(): WorkbookRangeAreas;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.WorkbookRangeAreas:interface" />'
        description: ''
  - name: getEntireColumn()
    uid: 'ExcelScript!ExcelScript.Range#getEntireColumn:member(1)'
    package: ExcelScript!
    fullName: getEntireColumn()
    summary: 获取一个对象，该对象代表区域整列 (例如，如果当前区域代表单元格"B4：E11"，则它是表示列 `getEntireColumn` "B：E") 。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireColumn(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getEntireRow()
    uid: 'ExcelScript!ExcelScript.Range#getEntireRow:member(1)'
    package: ExcelScript!
    fullName: getEntireRow()
    summary: 获取一个对象，该对象代表区域 (例如，如果当前区域代表单元格"B4：E11"，则其为表示行 `GetEntireRow` "4：11") 。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEntireRow(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: 'getExtendedRange(direction, activeCell)'
    uid: 'ExcelScript!ExcelScript.Range#getExtendedRange:member(1)'
    package: ExcelScript!
    fullName: 'getExtendedRange(direction, activeCell)'
    summary: 返回一个 range 对象，该对象包括当前区域以及范围边缘，根据提供的方向。 这与 UI 上键的 Ctrl+Shift+箭头Excel行为Windows匹配。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getExtendedRange(
                    direction: KeyboardDirection,
                    activeCell?: Range | string
                ): Range;
      parameters:
        - id: direction
          description: 从活动单元格的方向。
          type: '<xref uid="ExcelScript!ExcelScript.KeyboardDirection:enum" />'
        - id: activeCell
          description: 此范围中的活动单元格。 默认情况下，活动单元格是区域左上方的单元格。 如果活动单元格不在此范围内，则会引发错误。
          type: |-
            <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
                    
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getFormat()
    uid: 'ExcelScript!ExcelScript.Range#getFormat:member(1)'
    package: ExcelScript!
    fullName: getFormat()
    summary: 返回一个格式对象，其中封装了区域的字体、填充、边框、对齐方式和其他属性。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormat(): RangeFormat;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeFormat:interface" />'
        description: ''
  - name: getFormula()
    uid: 'ExcelScript!ExcelScript.Range#getFormula:member(1)'
    package: ExcelScript!
    fullName: getFormula()
    summary: 表示用 A1 样式表示法的单元格公式。 如果区域包含多个单元格，则返回第一个单元格 (0 的行索引和 0 的列索引) 数据。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormula(): string;'
      return:
        type: string
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /*
           * This script sets a cell's formula, 
           * then displays how Excel stores the cell's formula and value separately.
           */
          function main(workbook: ExcelScript.Workbook) {
            let selectedSheet = workbook.getActiveWorksheet();

            // Set A1 to 2.
            let a1 = selectedSheet.getRange("A1");
            a1.setValue(2);

            // Set B1 to the formula =(2*A1), which should equal 4.
            let b1 = selectedSheet.getRange("B1")
            b1.setFormula("=(2*A1)");

            // Log the current results for `getFormula` and `getValue` at B1.
            console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);
          }
          ```
  - name: getFormulaLocal()
    uid: 'ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)'
    package: ExcelScript!
    fullName: getFormulaLocal()
    summary: '表示采用 A1 样式表示法的单元格公式，采用用户的语言和数字格式区域设置。 例如，英语中的公式 "=SUM(A1, 1.5)" 在德语中将变为 "=SUMME(A1; 1,5)"。 如果区域包含多个单元格，则返回第一个单元格 (0 的行索引和 0 的列索引) 数据。'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulaLocal(): string;'
      return:
        type: string
        description: ''
  - name: getFormulaR1C1()
    uid: 'ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)'
    package: ExcelScript!
    fullName: getFormulaR1C1()
    summary: 表示 R1C1 样式表示法中的单元格公式。 如果区域包含多个单元格，则返回第一个单元格 (0 的行索引和 0 的列索引) 数据。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulaR1C1(): string;'
      return:
        type: string
        description: ''
  - name: getFormulas()
    uid: 'ExcelScript!ExcelScript.Range#getFormulas:member(1)'
    package: ExcelScript!
    fullName: getFormulas()
    summary: 表示采用 A1 表示法的公式。 如果单元格没有公式，则改为返回其值。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulas(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getFormulasLocal()
    uid: 'ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)'
    package: ExcelScript!
    fullName: getFormulasLocal()
    summary: '表示采用 A1 样式表示法的公式，使用用户的语言和数字格式区域设置。 例如，英语中的公式 "=SUM(A1, 1.5)" 在德语中将变为 "=SUMME(A1; 1,5)"。 如果单元格没有公式，则改为返回其值。'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulasLocal(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getFormulasR1C1()
    uid: 'ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)'
    package: ExcelScript!
    fullName: getFormulasR1C1()
    summary: 表示采用 R1C1 样式表示法的公式。 如果单元格没有公式，则改为返回其值。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFormulasR1C1(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getHasSpill()
    uid: 'ExcelScript!ExcelScript.Range#getHasSpill:member(1)'
    package: ExcelScript!
    fullName: getHasSpill()
    summary: 表示所有单元格是否都具有溢出边框。 如果 `true` 所有单元格都有溢出边框，或者所有单元格没有溢出边框，则 `false` 返回 。 如果 `null` 单元格区域内同时包含和没有溢出边框，则返回 。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHasSpill(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getHeight()
    uid: 'ExcelScript!ExcelScript.Range#getHeight:member(1)'
    package: ExcelScript!
    fullName: getHeight()
    summary: 返回从区域上边缘到区域下边缘的距离（100% 缩放）。以点表示。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHeight(): number;'
      return:
        type: number
        description: ''
  - name: getHidden()
    uid: 'ExcelScript!ExcelScript.Range#getHidden:member(1)'
    package: ExcelScript!
    fullName: getHidden()
    summary: 表示当前区域的所有单元格是否隐藏。 值为 `true` 隐藏区域内的所有单元格时。 当 `false` 范围中没有任何单元格处于隐藏状态时，值为 。 值 `null` 是当一个范围中的某些单元格处于隐藏状态，而同一区域的其他单元格处于隐藏状态时。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHidden(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getHyperlink()
    uid: 'ExcelScript!ExcelScript.Range#getHyperlink:member(1)'
    package: ExcelScript!
    fullName: getHyperlink()
    summary: 表示当前范围的超链接。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getHyperlink(): RangeHyperlink;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeHyperlink:interface" />'
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /**
           * This sample clears all of the hyperlinks from the current worksheet
           * and removes the usual hyperlink formatting.
           */
          function main(workbook: ExcelScript.Workbook, sheetName: string = 'Sheet1') {
            // Get the active worksheet. 
            let sheet = workbook.getWorksheet(sheetName);

            // Get the used range to operate on.
            // For large ranges (over 10000 entries), consider splitting the operation into batches for performance.
            const targetRange = sheet.getUsedRange(true);
            console.log(`Target Range to clear hyperlinks from: ${targetRange.getAddress()}`);

            const rowCount = targetRange.getRowCount();
            const colCount = targetRange.getColumnCount();
            console.log(`Searching for hyperlinks in ${targetRange.getAddress()} which contains ${(rowCount * colCount)} cells`);

            // Go through each individual cell looking for a hyperlink. 
            // This allows us to limit the formatting changes to only the cells with hyperlink formatting.
            let clearedCount = 0;
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < colCount; j++) {
                const cell = targetRange.getCell(i, j);
                const hyperlink = cell.getHyperlink();
                if (hyperlink) {
                  cell.clear(ExcelScript.ClearApplyTo.hyperlinks);
                  cell.getFormat().getFont().setUnderline(ExcelScript.RangeUnderlineStyle.none);
                  cell.getFormat().getFont().setColor('Black');
                  clearedCount++;
                }
              }
            }

            console.log(`Done. Cleared hyperlinks from ${clearedCount} cells`);
          }
          ```
  - name: getImage()
    uid: 'ExcelScript!ExcelScript.Range#getImage:member(1)'
    package: ExcelScript!
    fullName: getImage()
    summary: 将区域呈现为 base64 编码 png 图像。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getImage(): string;'
      return:
        type: string
        description: ''
  - name: getIntersection(anotherRange)
    uid: 'ExcelScript!ExcelScript.Range#getIntersection:member(1)'
    package: ExcelScript!
    fullName: getIntersection(anotherRange)
    summary: 获取表示指定区域的矩形交集的 range 对象。 如果未找到任何交集，则此函数将返回其属性设置为 `isNullObject` 的对象 `true`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Range;'
      parameters:
        - id: anotherRange
          description: 将用于确定区域交集的 range 对象或区域地址。
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getIsEntireColumn()
    uid: 'ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)'
    package: ExcelScript!
    fullName: getIsEntireColumn()
    summary: 表示当前区域是否为整列。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIsEntireColumn(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getIsEntireRow()
    uid: 'ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)'
    package: ExcelScript!
    fullName: getIsEntireRow()
    summary: 表示当前区域是否为整行。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getIsEntireRow(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getLastCell()
    uid: 'ExcelScript!ExcelScript.Range#getLastCell:member(1)'
    package: ExcelScript!
    fullName: getLastCell()
    summary: '获取区域内的最后一个单元格。例如，“B2:D5”的最后一个单元格是“D5”。'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastCell(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getLastColumn()
    uid: 'ExcelScript!ExcelScript.Range#getLastColumn:member(1)'
    package: ExcelScript!
    fullName: getLastColumn()
    summary: '获取区域内的最后一列。例如，“B2:D5”的最后一列是“D2:D5”。'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastColumn(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getLastRow()
    uid: 'ExcelScript!ExcelScript.Range#getLastRow:member(1)'
    package: ExcelScript!
    fullName: getLastRow()
    summary: '获取区域内的最后一行。例如，“B2:D5”的最后一行是“B5:D5”。'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLastRow(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getLeft()
    uid: 'ExcelScript!ExcelScript.Range#getLeft:member(1)'
    package: ExcelScript!
    fullName: getLeft()
    summary: 返回从工作表左边缘到区域左边缘的距离（100% 缩放）。以点表示。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLeft(): number;'
      return:
        type: number
        description: ''
  - name: getLinkedDataTypeState()
    uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)'
    package: ExcelScript!
    fullName: getLinkedDataTypeState()
    summary: 表示数据类型的单元格状态。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLinkedDataTypeState(): LinkedDataTypeState;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.LinkedDataTypeState:enum" />'
        description: ''
  - name: getLinkedDataTypeStates()
    uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)'
    package: ExcelScript!
    fullName: getLinkedDataTypeStates()
    summary: 表示每个单元格的数据类型状态。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getLinkedDataTypeStates(): LinkedDataTypeState[][];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.LinkedDataTypeState:enum" />[][]'
        description: ''
  - name: getMergedAreas()
    uid: 'ExcelScript!ExcelScript.Range#getMergedAreas:member(1)'
    package: ExcelScript!
    fullName: getMergedAreas()
    summary: 返回一个 RangeAreas 对象，该对象代表此范围中的合并区域。 请注意，如果此范围中的合并区域计数超过 512，API 将无法返回结果。 如果 RangeAreas 不存在，将返回 null 对象。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getMergedAreas(): RangeAreas;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />'
        description: ''
  - name: getNumberFormat()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormat:member(1)'
    package: ExcelScript!
    fullName: getNumberFormat()
    summary: 表示Excel区域编号格式代码的单元格。 如果区域包含多个单元格，将返回第一 (0 的行索引和 0 的列索引) 数据。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormat(): string;'
      return:
        type: string
        description: ''
  - name: getNumberFormatCategories()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormatCategories:member(1)'
    package: ExcelScript!
    fullName: getNumberFormatCategories()
    summary: 表示每个单元格的编号格式类别。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormatCategories(): NumberFormatCategory[][];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.NumberFormatCategory:enum" />[][]'
        description: ''
  - name: getNumberFormatCategory()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormatCategory:member(1)'
    package: ExcelScript!
    fullName: getNumberFormatCategory()
    summary: 指定区域第一个单元格的编号 (由 0 的行索引和 0 的列索引表示) 。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormatCategory(): NumberFormatCategory;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.NumberFormatCategory:enum" />'
        description: ''
  - name: getNumberFormatLocal()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)'
    package: ExcelScript!
    fullName: getNumberFormatLocal()
    summary: 表示单元格Excel用户的语言设置，指定区域使用数字格式代码。 Excel获取或设置属性时，不会执行任何语言或格式 `numberFormatLocal` 强制转换。 任何返回的文本都基于系统设置中指定的语言使用本地格式的字符串。 如果区域包含多个单元格，将返回第一 (0 的行索引和 0 的列索引) 数据。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormatLocal(): string;'
      return:
        type: string
        description: ''
  - name: getNumberFormats()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormats:member(1)'
    package: ExcelScript!
    fullName: getNumberFormats()
    summary: 表示Excel区域的电话号码格式代码。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormats(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getNumberFormatsLocal()
    uid: 'ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)'
    package: ExcelScript!
    fullName: getNumberFormatsLocal()
    summary: 表示Excel用户的语言设置，指定范围的号码格式代码。 Excel获取或设置属性时，不会执行任何语言或格式 `numberFormatLocal` 强制转换。 任何返回的文本都基于系统设置中指定的语言使用本地格式的字符串。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getNumberFormatsLocal(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: 'getOffsetRange(rowOffset, columnOffset)'
    uid: 'ExcelScript!ExcelScript.Range#getOffsetRange:member(1)'
    package: ExcelScript!
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    summary: 获取表示与指定区域偏移的区域的对象。返回的区域的尺寸将与此区域一致。如果强制在工作表网格的边界之外生成区域，将引发错误。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
      parameters:
        - id: rowOffset
          description: 区域偏移的行数（正数、负数或 0）。正数表示向下偏移，负数表示向上偏移。
          type: number
        - id: columnOffset
          description: 区域偏移的列数（正数、负数或 0）。正数表示向右偏移，负数表示向左偏移。
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /**
           * This script gets adjacent cells using relative references.
           * Note that if the active cell is on the top row, part of the script fails, 
           * because it references the cell above the currently selected one.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the currently active cell in the workbook.
            let activeCell = workbook.getActiveCell();
            console.log(`The active cell's address is: ${activeCell.getAddress()}`);

            // Get the cell to the right of the active cell and set its value and color.
            let rightCell = activeCell.getOffsetRange(0,1);
            rightCell.setValue("Right cell");
            console.log(`The right cell's address is: ${rightCell.getAddress()}`);
            rightCell.getFormat().getFont().setColor("Magenta");
            rightCell.getFormat().getFill().setColor("Cyan");

            // Get the cell to the above of the active cell and set its value and color.
            // Note that this operation will fail if the active cell is in the top row.
            let aboveCell = activeCell.getOffsetRange(-1, 0);
            aboveCell.setValue("Above cell");
            console.log(`The above cell's address is: ${aboveCell.getAddress()}`);
            aboveCell.getFormat().getFont().setColor("White");
            aboveCell.getFormat().getFill().setColor("Black");
          }
          ```
  - name: getPivotTables(fullyContained)
    uid: 'ExcelScript!ExcelScript.Range#getPivotTables:member(1)'
    package: ExcelScript!
    fullName: getPivotTables(fullyContained)
    summary: 获取与区域重叠的数据透视表的范围集合。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPivotTables(fullyContained?: boolean): PivotTable[];'
      parameters:
        - id: fullyContained
          description: If `true`<!-- -->，则仅返回范围边界内完全包含的数据透视表。 默认值为 `false`<!-- -->.
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.PivotTable:interface" />[]'
        description: ''
  - name: getPredefinedCellStyle()
    uid: 'ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)'
    package: ExcelScript!
    fullName: getPredefinedCellStyle()
    summary: 表示当前区域的样式。 如果单元格的样式不一致， `null` 将返回 。 对于自定义样式，将返回样式名称。 对于内置样式，将返回表示枚举中的 `BuiltInStyle` 值的字符串。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getPredefinedCellStyle(): string;'
      return:
        type: string
        description: ''
  - name: 'getRangeEdge(direction, activeCell)'
    uid: 'ExcelScript!ExcelScript.Range#getRangeEdge:member(1)'
    package: ExcelScript!
    fullName: 'getRangeEdge(direction, activeCell)'
    summary: 返回一个 range 对象，该对象是数据区域的边缘单元格，对应于提供的方向。 这与 UI 上控件的 Excel 中的 Ctrl+Windows行为匹配。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getRangeEdge(
                    direction: KeyboardDirection,
                    activeCell?: Range | string
                ): Range;
      parameters:
        - id: direction
          description: 从活动单元格的方向。
          type: '<xref uid="ExcelScript!ExcelScript.KeyboardDirection:enum" />'
        - id: activeCell
          description: 此范围中的活动单元格。 默认情况下，活动单元格是区域左上方的单元格。 如果活动单元格不在此范围内，则会引发错误。
          type: |-
            <xref uid="ExcelScript!ExcelScript.Range:interface" /> | string
                    
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: 'getResizedRange(deltaRows, deltaColumns)'
    uid: 'ExcelScript!ExcelScript.Range#getResizedRange:member(1)'
    package: ExcelScript!
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    summary: 获取一个类似于当前对象的对象，但其右下角 (或按) 行和列数收缩 `Range` `Range` 。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
      parameters:
        - id: deltaRows
          description: 相对于当前范围，展开右下角的行数。使用正数可展开范围，使用负数可合拢范围。
          type: number
        - id: deltaColumns
          description: 相对于当前范围，右下角展开的列数。 使用正数可展开范围，使用负数可合拢范围。
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /**
           * This script copies the formatting in the active cell to the neighboring cells.
           * Note that this script only works when the active cell isn't on an edge of the worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the active cell.
            let activeCell = workbook.getActiveCell();

            // Get the cell that's one row above and one column to the left of the active cell.
            let cornerCell = activeCell.getOffsetRange(-1,-1);

            // Get a range that includes all the cells surrounding the active cell.
            let surroundingRange = cornerCell.getResizedRange(2, 2)

            // Copy the formatting from the active cell to the new range.
            surroundingRange.copyFrom(
              activeCell, /* The source range. */
              ExcelScript.RangeCopyType.formats /* What to copy. */
            );
          }
          ```
  - name: getRow(row)
    uid: 'ExcelScript!ExcelScript.Range#getRow:member(1)'
    package: ExcelScript!
    fullName: getRow(row)
    summary: 获取范围中包含的行。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRow(row: number): Range;'
      parameters:
        - id: row
          description: 要检索的区域的行号。从零开始编制索引。
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getRowCount()
    uid: 'ExcelScript!ExcelScript.Range#getRowCount:member(1)'
    package: ExcelScript!
    fullName: getRowCount()
    summary: 返回区域中的总行数。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowCount(): number;'
      return:
        type: number
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - name: getRowHidden()
    uid: 'ExcelScript!ExcelScript.Range#getRowHidden:member(1)'
    package: ExcelScript!
    fullName: getRowHidden()
    summary: 表示当前区域的所有行是否隐藏。 值为 `true` 隐藏区域内的所有行时。 当 `false` 范围中没有任何行处于隐藏状态时，值为 。 当 `null` 一个范围中的某些行处于隐藏状态，而同一区域的其他行处于隐藏状态时，值为 。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowHidden(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getRowIndex()
    uid: 'ExcelScript!ExcelScript.Range#getRowIndex:member(1)'
    package: ExcelScript!
    fullName: getRowIndex()
    summary: 返回区域中第一个单元格的行编号。 从零开始编制索引。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowIndex(): number;'
      return:
        type: number
        description: ''
  - name: getRowsAbove(count)
    uid: 'ExcelScript!ExcelScript.Range#getRowsAbove:member(1)'
    package: ExcelScript!
    fullName: getRowsAbove(count)
    summary: 获取当前对象上方的一定数量的 `Range` 行。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowsAbove(count?: number): Range;'
      parameters:
        - id: count
          description: 可选。生成的范围中要包含的行数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getRowsBelow(count)
    uid: 'ExcelScript!ExcelScript.Range#getRowsBelow:member(1)'
    package: ExcelScript!
    fullName: getRowsBelow(count)
    summary: 获取当前对象下方的一定数量的 `Range` 行。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRowsBelow(count?: number): Range;'
      parameters:
        - id: count
          description: 可选。生成的范围中要包含的行数。一般来说，使用正数可以在当前范围之外创建一个范围。也可以使用负数在当前范围之内创建一个范围。默认值为 1。
          type: number
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getSavedAsArray()
    uid: 'ExcelScript!ExcelScript.Range#getSavedAsArray:member(1)'
    package: ExcelScript!
    fullName: getSavedAsArray()
    summary: 表示所有单元格是否将另存为数组公式。 如果 `true` 所有单元格都另存为数组公式，或者所有单元格不会另存为数组公式，则 `false` 返回 。 返回 `null` 一些单元格是否另存为数组公式，而有些则不保存。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSavedAsArray(): boolean;'
      return:
        type: boolean
        description: ''
  - name: getSort()
    uid: 'ExcelScript!ExcelScript.Range#getSort:member(1)'
    package: ExcelScript!
    fullName: getSort()
    summary: 表示当前 range 的区域排序。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSort(): RangeSort;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeSort:interface" />'
        description: ''
  - name: 'getSpecialCells(cellType, cellValueType)'
    uid: 'ExcelScript!ExcelScript.Range#getSpecialCells:member(1)'
    package: ExcelScript!
    fullName: 'getSpecialCells(cellType, cellValueType)'
    summary: 获取包含一个或多个区域的对象，该对象代表与指定类型和值 `RangeAreas` 匹配的所有单元格。 如果没有找到特殊单元格，则此函数将返回其属性设置为 `isNullObject` 的对象 `true`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        getSpecialCells(
                    cellType: SpecialCellType,
                    cellValueType?: SpecialCellValueType
                ): RangeAreas;
      parameters:
        - id: cellType
          description: 要包含的单元格的类型。
          type: '<xref uid="ExcelScript!ExcelScript.SpecialCellType:enum" />'
        - id: cellValueType
          description: If `cellType` 为 `constants` 或 `formulas`<!-- -->，该参数用于确定结果中要包含的单元格类型。 这些值可以组合在一起以返回多个类型。 默认情况下，将选择所有常量或公式，无论类型如何。
          type: '<xref uid="ExcelScript!ExcelScript.SpecialCellValueType:enum" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />'
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /**
           * This sample gets all the blank cells in the current worksheet's used range. It then highlights all those cells with a yellow background.
           */
          function main(workbook: ExcelScript.Workbook) {
              // Get the current used range.
              let range = workbook.getActiveWorksheet().getUsedRange();
              
              // Get all the blank cells.
              let blankCells = range.getSpecialCells(ExcelScript.SpecialCellType.blanks);
              // Highlight the blank cells with a yellow background.
              blankCells.getFormat().getFill().setColor("yellow");
          }
          ```
  - name: getSpillingToRange()
    uid: 'ExcelScript!ExcelScript.Range#getSpillingToRange:member(1)'
    package: ExcelScript!
    fullName: getSpillingToRange()
    summary: 获取 Range 对象，它在调用定位单元格时包含溢出区域。 如果区域不是定位单元格或找不到溢出区域，则此函数将返回其属性设置为 `isNullObject` 的对象 `true`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSpillingToRange(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getSpillParent()
    uid: 'ExcelScript!ExcelScript.Range#getSpillParent:member(1)'
    package: ExcelScript!
    fullName: getSpillParent()
    summary: 获取包含被溢出到的单元格的定位单元格的 range 对象。 如果该对象不是溢出的单元格，或者给定了多个单元格，则此函数将返回一个属性设置为 `isNullObject``true`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSpillParent(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getSurroundingRegion()
    uid: 'ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)'
    package: ExcelScript!
    fullName: getSurroundingRegion()
    summary: 返回 `Range` 一个对象，该对象代表此区域左上单元格的周围区域。 周围区域是由相对于该区域的空白行和空白列的任何组合所限定的区域。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSurroundingRegion(): Range;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getTables(fullyContained)
    uid: 'ExcelScript!ExcelScript.Range#getTables:member(1)'
    package: ExcelScript!
    fullName: getTables(fullyContained)
    summary: 获取与区域重叠的限定范围的表格集合。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTables(fullyContained?: boolean): Table[];'
      parameters:
        - id: fullyContained
          description: If `true`<!-- -->，则仅返回范围边界内完全包含的表。 默认值为 `false`<!-- -->.
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Table:interface" />[]'
        description: ''
  - name: getText()
    uid: 'ExcelScript!ExcelScript.Range#getText:member(1)'
    package: ExcelScript!
    fullName: getText()
    summary: 表示指定区域的文本值。 文本值与单元格宽度无关。 在 \# UI 中Excel替换符号不会影响 API 返回的文本值。 如果区域包含多个单元格，将返回第一 (0 的行索引和 0 的列索引) 数据。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getText(): string;'
      return:
        type: string
        description: ''
  - name: getTexts()
    uid: 'ExcelScript!ExcelScript.Range#getTexts:member(1)'
    package: ExcelScript!
    fullName: getTexts()
    summary: 指定区域的文本值。 文本值与单元格宽度无关。 在 ui \# () 替换Excel符号不会影响 API 返回的文本值。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTexts(): string[][];'
      return:
        type: 'string[][]'
        description: ''
  - name: getTop()
    uid: 'ExcelScript!ExcelScript.Range#getTop:member(1)'
    package: ExcelScript!
    fullName: getTop()
    summary: 返回从工作表的上边缘到区域上边缘的距离（100% 缩放）。以点表示。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getTop(): number;'
      return:
        type: number
        description: ''
  - name: getUsedRange(valuesOnly)
    uid: 'ExcelScript!ExcelScript.Range#getUsedRange:member(1)'
    package: ExcelScript!
    fullName: getUsedRange(valuesOnly)
    summary: 返回指定 range 对象的所用区域。 如果范围内没有已使用的单元格，则此函数将返回其属性设置为 `isNullObject` 的对象 `true`<!-- -->.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      parameters:
        - id: valuesOnly
          description: 仅将有值的单元格视为已使用的单元格。
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: getValue()
    uid: 'ExcelScript!ExcelScript.Range#getValue:member(1)'
    package: ExcelScript!
    fullName: getValue()
    summary: 表示指定区域的原始值。 返回的数据可能是字符串、数字，也可能是布尔值。 包含错误的单元格将返回错误字符串。 如果区域包含多个单元格，则返回第一个单元格 (0 的行索引和 0 的列索引) 数据。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getValue(): string | number | boolean;'
      return:
        type: string | number | boolean
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /**
           * This sample reads the value of A1 and prints it to the console.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the value of cell A1.
            let range = selectedSheet.getRange("A1");
            
            // Print the value of A1.
            console.log(range.getValue());
          }
          ```
  - name: getValues()
    uid: 'ExcelScript!ExcelScript.Range#getValues:member(1)'
    package: ExcelScript!
    fullName: getValues()
    summary: 表示指定区域的原始值。 返回的数据可以是字符串、数字或布尔值。 包含错误的单元格将返回错误字符串。 如果返回的值以加号 ("+") 、减号 ("-") 或等号 ("=") 开头，Excel 将此值解释为公式。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getValues(): (string | number | boolean)[][];'
      return:
        type: '(string | number | boolean)[][]'
        description: ''
  - name: getValueType()
    uid: 'ExcelScript!ExcelScript.Range#getValueType:member(1)'
    package: ExcelScript!
    fullName: getValueType()
    summary: 表示单元格中数据类型。 如果区域包含多个单元格，则返回第一个单元格 (0 的行索引和 0 的列索引) 数据。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getValueType(): RangeValueType;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeValueType:enum" />'
        description: ''
  - name: getValueTypes()
    uid: 'ExcelScript!ExcelScript.Range#getValueTypes:member(1)'
    package: ExcelScript!
    fullName: getValueTypes()
    summary: 指定每个单元格中数据类型。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getValueTypes(): RangeValueType[][];'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeValueType:enum" />[][]'
        description: ''
  - name: getVisibleView()
    uid: 'ExcelScript!ExcelScript.Range#getVisibleView:member(1)'
    package: ExcelScript!
    fullName: getVisibleView()
    summary: 表示当前 range 对象的可见行。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getVisibleView(): RangeView;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RangeView:interface" />'
        description: ''
  - name: getWidth()
    uid: 'ExcelScript!ExcelScript.Range#getWidth:member(1)'
    package: ExcelScript!
    fullName: getWidth()
    summary: 返回从区域左边缘到区域右边缘的距离（以 100% 缩放表示）。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getWidth(): number;'
      return:
        type: number
        description: ''
  - name: getWorksheet()
    uid: 'ExcelScript!ExcelScript.Range#getWorksheet:member(1)'
    package: ExcelScript!
    fullName: getWorksheet()
    summary: 包含当前区域的工作表。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getWorksheet(): Worksheet;'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Worksheet:interface" />'
        description: ''
  - name: group(groupOption)
    uid: 'ExcelScript!ExcelScript.Range#group:member(1)'
    package: ExcelScript!
    fullName: group(groupOption)
    summary: 对大纲的列和行进行分组。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'group(groupOption: GroupOption): void;'
      parameters:
        - id: groupOption
          description: 指定如何按行或列对区域进行分组。 当组选项与区域或属性不同时将引发错误 (即为 `InvalidArgument` `isEntireRow` `isEntireColumn` `range.isEntireRow` true，为 `groupOption` "ByColumns"或 `range.isEntireColumn` true，且为 `groupOption` "ByRows") 。
          type: '<xref uid="ExcelScript!ExcelScript.GroupOption:enum" />'
      return:
        type: void
        description: ''
  - name: hideGroupDetails(groupOption)
    uid: 'ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)'
    package: ExcelScript!
    fullName: hideGroupDetails(groupOption)
    summary: 隐藏行或列组的详细信息。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hideGroupDetails(groupOption: GroupOption): void;'
      parameters:
        - id: groupOption
          description: 指定是否隐藏分组行或分组列的详细信息。
          type: '<xref uid="ExcelScript!ExcelScript.GroupOption:enum" />'
      return:
        type: void
        description: ''
  - name: insert(shift)
    uid: 'ExcelScript!ExcelScript.Range#insert:member(1)'
    package: ExcelScript!
    fullName: insert(shift)
    summary: 将单个单元格或一系列单元格插入到工作表中取代此区域，并移动其他单元格以留出空间。 返回一 `Range` 个位于现在空白处的新对象。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'insert(shift: InsertShiftDirection): Range;'
      parameters:
        - id: shift
          description: 指定移动单元格的方式。 有关详细信息，请参阅 `ExcelScript.InsertShiftDirection`。
          type: '<xref uid="ExcelScript!ExcelScript.InsertShiftDirection:enum" />'
      return:
        type: '<xref uid="ExcelScript!ExcelScript.Range:interface" />'
        description: ''
  - name: merge(across)
    uid: 'ExcelScript!ExcelScript.Range#merge:member(1)'
    package: ExcelScript!
    fullName: merge(across)
    summary: 将范围单元格合并到工作表的一个区域内。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'merge(across?: boolean): void;'
      parameters:
        - id: across
          description: 可选。 设置为 `true` 将指定区域的每一行中的单元格合并为单独的合并单元格。 默认值为 `false`<!-- -->.
          type: boolean
      return:
        type: void
        description: ''
  - name: moveTo(destinationRange)
    uid: 'ExcelScript!ExcelScript.Range#moveTo:member(1)'
    package: ExcelScript!
    fullName: moveTo(destinationRange)
    summary: 将单元格值、格式设置和公式从当前区域移动到目标区域，替换这些单元格中的旧信息。 如果目标区域小于当前范围，将自动扩展该范围。 不会更改目标区域中原始区域之外的任何单元格。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      parameters:
        - id: destinationRange
          description: destinationRange 指定此范围中信息将移动到的范围。
          type: '<xref uid="ExcelScript!ExcelScript.Range:interface" /> | string'
      return:
        type: void
        description: ''
  - name: 'removeDuplicates(columns, includesHeader)'
    uid: 'ExcelScript!ExcelScript.Range#removeDuplicates:member(1)'
    package: ExcelScript!
    fullName: 'removeDuplicates(columns, includesHeader)'
    summary: 从列指定的区域中删除重复值。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        removeDuplicates(
                    columns: number[],
                    includesHeader: boolean
                ): RemoveDuplicatesResult;
      parameters:
        - id: columns
          description: 区域内可能包含重复项的列。 至少需要指定一列。 从零开始编制索引。
          type: 'number[]'
        - id: includesHeader
          description: 如此 如果输入数据包含标头。 默认为 false。
          type: boolean
      return:
        type: '<xref uid="ExcelScript!ExcelScript.RemoveDuplicatesResult:interface" />'
        description: ''
  - name: 'replaceAll(text, replacement, criteria)'
    uid: 'ExcelScript!ExcelScript.Range#replaceAll:member(1)'
    package: ExcelScript!
    fullName: 'replaceAll(text, replacement, criteria)'
    summary: 根据当前区域内指定的条件查找并替换给定的字符串。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): number;
      parameters:
        - id: text
          description: 要查找的字符串。
          type: string
        - id: replacement
          description: 替换原始字符串的字符串。
          type: string
        - id: criteria
          description: 其他替换条件。
          type: '<xref uid="ExcelScript!ExcelScript.ReplaceCriteria:interface" />'
      return:
        type: number
        description: ''
  - name: select()
    uid: 'ExcelScript!ExcelScript.Range#select:member(1)'
    package: ExcelScript!
    fullName: select()
    summary: 在 Excel UI 中选择指定的区域。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'select(): void;'
      return:
        type: void
        description: ''
  - name: setColumnHidden(columnHidden)
    uid: 'ExcelScript!ExcelScript.Range#setColumnHidden:member(1)'
    package: ExcelScript!
    fullName: setColumnHidden(columnHidden)
    summary: 表示当前区域的所有列是否隐藏。 值为 `true` 隐藏区域内的所有列时。 当 `false` 范围中没有任何列处于隐藏状态时，值为 。 当 `null` 一个范围中的某些列处于隐藏状态，而同一区域的其他列处于隐藏状态时，值为 。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setColumnHidden(columnHidden: boolean): void;'
      parameters:
        - id: columnHidden
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: setDirty()
    uid: 'ExcelScript!ExcelScript.Range#setDirty:member(1)'
    package: ExcelScript!
    fullName: setDirty()
    summary: 设置下一次重新计算发生时要重新计算的区域。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setDirty(): void;'
      return:
        type: void
        description: ''
  - name: setFormula(formula)
    uid: 'ExcelScript!ExcelScript.Range#setFormula:member(1)'
    package: ExcelScript!
    fullName: setFormula(formula)
    summary: 使用 A1 样式表示法设置单元格公式。 如果区域包含多个单元格，则给定区域的每个单元格都将使用输入数据进行更新。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormula(formula: string): void;'
      parameters:
        - id: formula
          description: ''
          type: string
      return:
        type: void
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /*
           * This script sets a cell's formula, 
           * then displays how Excel stores the cell's formula and value separately.
           */
          function main(workbook: ExcelScript.Workbook) {
            let selectedSheet = workbook.getActiveWorksheet();

            // Set A1 to 2.
            let a1 = selectedSheet.getRange("A1");
            a1.setValue(2);

            // Set B1 to the formula =(2*A1), which should equal 4.
            let b1 = selectedSheet.getRange("B1")
            b1.setFormula("=(2*A1)");

            // Log the current results for `getFormula` and `getValue` at B1.
            console.log(`B1 - Formula: ${b1.getFormula()} | Value: ${b1.getValue()}`);
          }
          ```
  - name: setFormulaLocal(formulaLocal)
    uid: 'ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)'
    package: ExcelScript!
    fullName: setFormulaLocal(formulaLocal)
    summary: '使用用户的语言和数字格式区域设置 A1 样式表示法的单元格公式。 例如，英语中的公式 "=SUM(A1, 1.5)" 在德语中将变为 "=SUMME(A1; 1,5)"。 如果区域包含多个单元格，则给定区域的每个单元格都将使用输入数据进行更新。'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulaLocal(formulaLocal: string): void;'
      parameters:
        - id: formulaLocal
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setFormulaR1C1(formulaR1C1)
    uid: 'ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)'
    package: ExcelScript!
    fullName: setFormulaR1C1(formulaR1C1)
    summary: 使用 R1C1 样式表示法设置单元格公式。 如果区域包含多个单元格，则给定区域的每个单元格都将使用输入数据进行更新。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulaR1C1(formulaR1C1: string): void;'
      parameters:
        - id: formulaR1C1
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setFormulas(formulas)
    uid: 'ExcelScript!ExcelScript.Range#setFormulas:member(1)'
    package: ExcelScript!
    fullName: setFormulas(formulas)
    summary: 表示采用 A1 表示法的公式。 如果单元格没有公式，则改为返回其值。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulas(formulas: string[][]): void;'
      parameters:
        - id: formulas
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setFormulasLocal(formulasLocal)
    uid: 'ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)'
    package: ExcelScript!
    fullName: setFormulasLocal(formulasLocal)
    summary: '表示采用 A1 样式表示法的公式，使用用户的语言和数字格式区域设置。 例如，英语中的公式 "=SUM(A1, 1.5)" 在德语中将变为 "=SUMME(A1; 1,5)"。 如果单元格没有公式，则改为返回其值。'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulasLocal(formulasLocal: string[][]): void;'
      parameters:
        - id: formulasLocal
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setFormulasR1C1(formulasR1C1)
    uid: 'ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)'
    package: ExcelScript!
    fullName: setFormulasR1C1(formulasR1C1)
    summary: 表示采用 R1C1 样式表示法的公式。 如果单元格没有公式，则改为返回其值。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setFormulasR1C1(formulasR1C1: string[][]): void;'
      parameters:
        - id: formulasR1C1
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setHyperlink(hyperlink)
    uid: 'ExcelScript!ExcelScript.Range#setHyperlink:member(1)'
    package: ExcelScript!
    fullName: setHyperlink(hyperlink)
    summary: 表示当前范围的超链接。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setHyperlink(hyperlink: RangeHyperlink): void;'
      parameters:
        - id: hyperlink
          description: ''
          type: '<xref uid="ExcelScript!ExcelScript.RangeHyperlink:interface" />'
      return:
        type: void
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /** 
           * This script inserts a hyperlink to the first cell of the last worksheet in the workbook.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the active cell.
            let cell = workbook.getActiveCell();

            // Get the last worksheet in the workbook.
            // Note that this might be the current sheet if there's only one worksheet.
            let lastSheet = workbook.getLastWorksheet();

            // Get sheet name. 
            let linkedSheetName = lastSheet.getName();
            console.log(`Setting hyperlink of ${cell.getAddress()} to the ${linkedSheetName} sheet's A1 cell`);

            // Set the text for the hyperlink.
            let value = `Click to go to: ${linkedSheetName}`;

            // Create the hyperlink using that cell's value.
            cell.setHyperlink({
              textToDisplay: value.toString(),
              screenTip: `Navigate to ${linkedSheetName}`,
              documentReference: `${linkedSheetName}!A1`
            });
          }
          ```
  - name: setNumberFormat(numberFormat)
    uid: 'ExcelScript!ExcelScript.Range#setNumberFormat:member(1)'
    package: ExcelScript!
    fullName: setNumberFormat(numberFormat)
    summary: 设置Excel单元格的编号格式代码。 如果区域包含多个单元格，则给定区域的每个单元格都将使用输入数据进行更新。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setNumberFormat(numberFormat: string): void;'
      parameters:
        - id: numberFormat
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setNumberFormatLocal(numberFormatLocal)
    uid: 'ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)'
    package: ExcelScript!
    fullName: setNumberFormatLocal(numberFormatLocal)
    summary: 根据Excel设置，设置指定区域单元格的编号格式代码。 Excel获取或设置属性时，不会执行任何语言或格式 `numberFormatLocal` 强制转换。 任何返回的文本都基于系统设置中指定的语言使用本地格式的字符串。 如果区域包含多个单元格，则给定区域的每个单元格都将使用输入数据进行更新。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setNumberFormatLocal(numberFormatLocal: string): void;'
      parameters:
        - id: numberFormatLocal
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setNumberFormats(numberFormats)
    uid: 'ExcelScript!ExcelScript.Range#setNumberFormats:member(1)'
    package: ExcelScript!
    fullName: setNumberFormats(numberFormats)
    summary: 表示Excel区域的电话号码格式代码。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setNumberFormats(numberFormats: string[][]): void;'
      parameters:
        - id: numberFormats
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setNumberFormatsLocal(numberFormatsLocal)
    uid: 'ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)'
    package: ExcelScript!
    fullName: setNumberFormatsLocal(numberFormatsLocal)
    summary: 表示Excel用户的语言设置，指定范围的号码格式代码。 Excel获取或设置属性时，不会执行任何语言或格式 `numberFormatLocal` 强制转换。 任何返回的文本都基于系统设置中指定的语言使用本地格式的字符串。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setNumberFormatsLocal(numberFormatsLocal: string[][]): void;'
      parameters:
        - id: numberFormatsLocal
          description: ''
          type: 'string[][]'
      return:
        type: void
        description: ''
  - name: setPredefinedCellStyle(predefinedCellStyle)
    uid: 'ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)'
    package: ExcelScript!
    fullName: setPredefinedCellStyle(predefinedCellStyle)
    summary: 表示当前区域的样式。 如果单元格的样式不一致， `null` 将返回 。 对于自定义样式，将返回样式名称。 对于内置样式，将返回表示枚举中的 `BuiltInStyle` 值的字符串。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
      parameters:
        - id: predefinedCellStyle
          description: ''
          type: string
      return:
        type: void
        description: ''
  - name: setRowHidden(rowHidden)
    uid: 'ExcelScript!ExcelScript.Range#setRowHidden:member(1)'
    package: ExcelScript!
    fullName: setRowHidden(rowHidden)
    summary: 表示当前区域的所有行是否隐藏。 值为 `true` 隐藏区域内的所有行时。 当 `false` 范围中没有任何行处于隐藏状态时，值为 。 当 `null` 一个范围中的某些行处于隐藏状态，而同一区域的其他行处于隐藏状态时，值为 。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setRowHidden(rowHidden: boolean): void;'
      parameters:
        - id: rowHidden
          description: ''
          type: boolean
      return:
        type: void
        description: ''
  - name: setValue(value)
    uid: 'ExcelScript!ExcelScript.Range#setValue:member(1)'
    package: ExcelScript!
    fullName: setValue(value)
    summary: 设置指定区域的原始值。 要设置的数据的类型可以是字符串、数字或布尔值。 `null`值将被忽略， (中未设置或覆盖Excel) 。 如果区域包含多个单元格，则给定区域的每个单元格都将使用输入数据进行更新。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setValue(value: any): void;'
      parameters:
        - id: value
          description: ''
          type: any
      return:
        type: void
        description: ''
  - name: setValues(values)
    uid: 'ExcelScript!ExcelScript.Range#setValues:member(1)'
    package: ExcelScript!
    fullName: setValues(values)
    summary: 设置指定区域的原始值。 提供的数据可以是字符串、数字或布尔值。 如果提供的值以加号 ("+") 、减号 ("-") 或等号 ("=") 开头，Excel 将此值解释为公式。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setValues(values: (string | number | boolean)[][]): void;'
      parameters:
        - id: values
          description: ''
          type: '(string | number | boolean)[][]'
      return:
        type: void
        description: |-


          #### <a name="examples"></a>示例

          ```TypeScript
          /**
           * This sample inserts some pre-loaded data into a range.
           * It also shows how to get a range that fits the data.
           */
           function main(workbook: ExcelScript.Workbook) {
             // Get the active cell.
             let currentCell = workbook.getActiveCell();
             
             // Calculate the range needed to fit the given data.
             let targetRange = currentCell.getResizedRange(DATA.length - 1, DATA[0].length - 1);

             // Set range values to the data.
             targetRange.setValues(DATA);

             // Autofit the columns so the worksheet is readable. 
             targetRange.getFormat().autofitColumns();
           }

           /* 
            * This sample's data is in a static 2-dimensional array.
            * You could also get the input from other ranges or sources.
            * Note that each row must have the same number of columns to be valid. 
            */
           const DATA = [
             ['Date', 'Salesperson', 'Product', 'Amount']
             , ['3/2/2020', 'Anne', 'Pizza', '$1400']
             , ['3/2/2020', 'Mariya', 'Pizza', '$1700']
             , ['3/7/2020', 'Mark', 'Sandwiches', '$1010']
             , ['3/24/2020', 'Anne', 'Pizza', '$750']
             , ['3/28/2020', 'Mark', 'Salads', '$510']
             , ['4/17/2020', 'Laura', 'Salads', '$900']
             , ['4/17/2020', 'Mariya', 'Salads', '$1600']
             , ['4/28/2020', 'Laura', 'Sandwiches', '$680']
           ];
          ```
  - name: showCard()
    uid: 'ExcelScript!ExcelScript.Range#showCard:member(1)'
    package: ExcelScript!
    fullName: showCard()
    summary: 显示活动单元格的卡片（如果该单元格具有富值内容）。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showCard(): void;'
      return:
        type: void
        description: ''
  - name: showGroupDetails(groupOption)
    uid: 'ExcelScript!ExcelScript.Range#showGroupDetails:member(1)'
    package: ExcelScript!
    fullName: showGroupDetails(groupOption)
    summary: 显示行或列组的详细信息。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showGroupDetails(groupOption: GroupOption): void;'
      parameters:
        - id: groupOption
          description: 指定是显示分组行的详细信息还是分组列的详细信息。
          type: '<xref uid="ExcelScript!ExcelScript.GroupOption:enum" />'
      return:
        type: void
        description: ''
  - name: ungroup(groupOption)
    uid: 'ExcelScript!ExcelScript.Range#ungroup:member(1)'
    package: ExcelScript!
    fullName: ungroup(groupOption)
    summary: 取消大纲的列和行的组合。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ungroup(groupOption: GroupOption): void;'
      parameters:
        - id: groupOption
          description: 指定如何按行或列取消区域组合。
          type: '<xref uid="ExcelScript!ExcelScript.GroupOption:enum" />'
      return:
        type: void
        description: ''
  - name: unmerge()
    uid: 'ExcelScript!ExcelScript.Range#unmerge:member(1)'
    package: ExcelScript!
    fullName: unmerge()
    summary: 将范围单元格取消合并为各个单元格。
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'unmerge(): void;'
      return:
        type: void
        description: ''